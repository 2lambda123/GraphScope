Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_submit_pr", "development/how_to_test", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_load_graphs", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/faq", "interactive_engine/getting_started", "interactive_engine/guide_and_examples", "interactive_engine/supported_gremlin_steps", "interactive_engine/tinkerpop_eco", "interactive_engine/tutorial_ldbc_gremlin", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.fetch_gremlin_result", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_query", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.get_option", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_load_graphs.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/faq.md", "interactive_engine/getting_started.md", "interactive_engine/guide_and_examples.md", "interactive_engine/supported_gremlin_steps.md", "interactive_engine/tinkerpop_eco.md", "interactive_engine/tutorial_ldbc_gremlin.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.fetch_gremlin_result.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_query.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.get_option.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetowrkX APIs", "Tutorial: Graph Operations with NetowrkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Depoly with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to Submit Pull-requests", "How to Test", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Load Graphs", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "FAQs for GIE Gremlin Usage", "Getting Started", "Guide and Examples", "Supported Gremlin Steps", "Apache TinkerPop Ecosystem", "Tutorial: LDBC Gremlin", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.fetch_gremlin_result", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_query", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.get_option", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gs</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 20, 22, 24, 27, 28, 29, 30, 31, 33, 35, 36, 39, 41, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 87, 102, 106, 107, 108, 109, 112, 120, 122, 123, 130, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 158, 159, 163, 164, 165, 168, 169, 171, 173, 174, 179, 182, 187, 188, 189, 190, 191, 192, 195, 198, 201, 204, 206, 207, 208, 210, 211, 213, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 295, 296, 298, 301, 302, 303, 304, 305, 306, 310, 312], "graph": [0, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 28, 35, 36, 41, 48, 49, 50, 51, 52, 54, 57, 61, 63, 68, 72, 75, 76, 77, 78, 79, 86, 87, 88, 89, 90, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 122, 129, 132, 133, 138, 144, 147, 148, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 290, 293, 294, 295, 296, 305, 306, 312, 316, 317, 318, 320, 321, 322], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 31, 33, 35, 39, 41, 56, 57, 68, 70, 72, 73, 75, 79, 81, 84, 89, 151, 289, 294, 296, 302, 305, 306, 312], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 31, 33, 39, 41, 44, 45, 48, 49, 50, 51, 53, 56, 59, 63, 64, 67, 68, 69, 70, 71, 73, 77, 81, 89, 106, 107, 132, 133, 137, 145, 151, 152, 153, 289, 295, 296, 298, 302, 303, 304, 305, 315, 316], "gae": [0, 3, 10, 12, 14, 15, 31, 41, 47, 57, 58, 66, 69, 73, 74, 75, 81, 106, 107, 152, 313, 314], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 18, 24, 32, 33, 34, 36, 37, 40, 41, 43, 45, 48, 50, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 67, 68, 70, 74, 75, 77, 78, 81, 151, 152, 153, 154, 289, 291, 292, 293, 294, 295, 296, 297, 301, 302, 303, 304, 305, 306, 312, 313, 315, 316, 317, 320, 322, 323], "offer": [0, 2, 9, 12, 20, 33, 47, 50, 58, 59, 66, 67, 68, 72, 73, 301], "mani": [0, 4, 6, 10, 12, 14, 24, 31, 33, 35, 36, 41, 44, 49, 52, 60, 67, 68, 69, 71, 138, 145, 192, 236, 238, 289, 301, 306], "which": [0, 2, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 39, 41, 44, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 81, 85, 88, 101, 112, 114, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 151, 152, 153, 154, 168, 193, 195, 208, 209, 210, 218, 220, 237, 238, 239, 246, 248, 249, 267, 279, 281, 283, 287, 288, 289, 291, 292, 293, 295, 296, 298, 300, 301, 302, 303, 304, 306], "enabl": [0, 4, 6, 15, 17, 18, 23, 30, 41, 55, 56, 59, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 148, 154, 289, 296, 301, 302, 305, 306, 310], "user": [0, 2, 4, 6, 9, 11, 12, 14, 15, 17, 18, 22, 23, 24, 27, 28, 30, 33, 36, 39, 41, 47, 49, 51, 54, 55, 56, 58, 62, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 137, 139, 140, 141, 142, 143, 144, 146, 149, 152, 289, 295, 296, 298, 301, 302, 305, 316, 320], "analyz": [0, 7, 19, 27, 55, 66, 67, 69, 72, 143, 301], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 32, 33, 41, 45, 47, 49, 50, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 84, 86, 92, 93, 98, 104, 105, 110, 118, 119, 137, 139, 140, 141, 142, 143, 147, 151, 161, 167, 183, 184, 199, 216, 232, 251, 281, 289, 291, 292, 295, 296, 298, 301, 303, 304, 306, 312, 313, 315, 316, 321], "least": [0, 6, 36, 56, 154, 188, 210], "effort": [0, 33, 74, 301], "cover": [0, 6, 15, 39, 62], "wide": [0, 11, 12, 24, 52, 57, 58, 62, 66, 67, 69, 70, 71, 73, 141, 300, 306], "rang": [0, 18, 51, 54, 56, 58, 61, 62, 64, 65, 66, 67, 70, 73, 76, 78, 79, 92, 93, 104, 105, 110, 118, 119, 137, 142, 146, 194, 196, 198, 201, 204, 216, 222, 236, 237, 238, 239, 267, 289, 294, 301, 312, 315, 316, 320, 321], "applic": [0, 4, 6, 8, 10, 11, 14, 24, 33, 41, 48, 49, 55, 58, 59, 68, 69, 70, 71, 74, 76, 77, 79, 89, 141, 220, 244, 300, 310], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 58, 66, 67, 68, 69, 72, 76, 77, 81, 139, 147, 240, 281, 286, 290, 300], "detect": [0, 6, 8, 9, 58, 66, 67, 69, 70, 72, 73, 77, 208, 212, 213, 214], "etc": [0, 6, 7, 15, 28, 44, 49, 55, 59, 62, 67, 68, 71, 74, 78, 137, 140, 141, 142, 145, 156, 168, 177, 182, 183, 289, 291, 302], "ar": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 16, 17, 20, 22, 23, 24, 27, 28, 31, 32, 33, 34, 36, 37, 41, 44, 48, 49, 50, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 81, 84, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 154, 163, 164, 165, 178, 179, 184, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 207, 208, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222, 223, 224, 228, 232, 234, 235, 236, 237, 238, 239, 240, 244, 246, 248, 250, 251, 254, 272, 281, 282, 283, 284, 285, 289, 292, 295, 296, 298, 300, 301, 302, 303, 305, 310, 322], "implement": [0, 1, 4, 8, 9, 12, 16, 18, 22, 24, 33, 44, 49, 54, 55, 58, 59, 62, 66, 70, 73, 76, 77, 81, 137, 139, 141, 142, 143, 145, 148, 149, 151, 152, 154, 230, 231, 235, 236, 238, 240, 241, 242, 283, 284, 292, 312], "pie": [0, 1, 3, 8, 12, 33, 56, 57, 58, 69, 81, 84, 294, 306, 316, 318], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 57, 58, 62, 66, 68, 69, 71, 73, 74, 81, 137, 142, 143, 301, 302, 306], "model": [0, 1, 3, 8, 9, 18, 44, 49, 55, 56, 57, 58, 61, 62, 63, 66, 67, 69, 70, 73, 81, 139, 141, 143, 144, 208, 212, 216, 218, 220, 222, 228, 230, 231, 236, 237, 238, 239, 240, 244, 245, 279, 286, 296, 300, 306, 316], "highli": [0, 4, 12, 33, 56, 58, 68, 69, 300], "optim": [0, 9, 12, 14, 33, 49, 55, 56, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 137, 149, 301, 303, 316], "best": [0, 16, 66, 68, 70, 73, 74, 77, 289, 312], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 39, 47, 49, 54, 56, 57, 59, 66, 68, 69, 71, 72, 73, 78, 139, 143, 145, 151, 246, 251, 281, 293, 295, 298, 302, 304, 306], "can": [0, 1, 2, 4, 6, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 44, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 64, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 81, 85, 87, 102, 113, 114, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 163, 164, 167, 171, 192, 195, 208, 209, 210, 217, 218, 220, 236, 237, 238, 239, 246, 250, 251, 258, 260, 262, 267, 270, 275, 276, 281, 283, 289, 292, 293, 295, 296, 298, 300, 301, 302, 303, 304, 306, 310, 312], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 32, 34, 35, 36, 37, 39, 41, 44, 45, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 86, 87, 113, 114, 123, 128, 137, 138, 139, 140, 141, 143, 145, 148, 150, 151, 152, 153, 154, 173, 174, 183, 195, 198, 202, 208, 209, 210, 216, 218, 222, 223, 225, 227, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 246, 250, 254, 267, 272, 281, 283, 286, 287, 289, 291, 292, 294, 296, 300, 301, 304, 305, 306, 310, 312, 316, 322], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 29, 32, 33, 35, 39, 41, 44, 49, 54, 56, 64, 66, 67, 69, 71, 73, 74, 75, 86, 137, 140, 149, 194, 281, 295, 301, 302, 312], "out": [0, 6, 9, 12, 27, 28, 32, 33, 36, 45, 51, 55, 59, 67, 68, 69, 70, 73, 77, 79, 137, 140, 141, 143, 151, 154, 211, 220, 221, 228, 229, 232, 246, 247, 283, 287, 289, 301, 302, 303, 305, 316, 320], "box": [0, 68, 282], "manner": [0, 2, 17, 18, 31, 35, 67, 69, 70], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 32, 35, 36, 37, 39, 41, 48, 49, 50, 51, 52, 54, 55, 56, 58, 60, 61, 64, 65, 71, 74, 77, 138, 139, 143, 146, 148, 149, 151, 154, 208, 220, 235, 236, 238, 247, 267, 289, 292, 300, 301, 302, 316], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 44, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 87, 113, 123, 125, 129, 130, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 162, 164, 166, 168, 169, 170, 171, 172, 173, 174, 183, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 310, 312, 315, 316, 320, 321, 322], "full": [0, 4, 12, 16, 17, 18, 22, 33, 51, 58, 59, 62, 66, 71, 73, 77, 137, 140, 141, 143, 199, 302, 306, 312, 321], "list": [0, 16, 19, 20, 30, 33, 36, 37, 48, 51, 54, 55, 56, 58, 64, 68, 71, 75, 77, 79, 98, 99, 108, 109, 123, 138, 141, 143, 151, 154, 163, 165, 168, 175, 177, 183, 184, 187, 188, 192, 194, 195, 213, 216, 218, 220, 221, 222, 223, 224, 236, 240, 243, 246, 247, 252, 254, 267, 283, 289, 290, 292, 296, 302, 305, 310, 317, 320], "support": [0, 3, 4, 6, 9, 10, 12, 17, 18, 20, 22, 24, 28, 31, 33, 36, 41, 44, 47, 48, 49, 51, 52, 55, 56, 57, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 81, 87, 137, 138, 139, 141, 142, 143, 145, 146, 148, 151, 154, 289, 292, 295, 296, 298, 300, 302, 303, 305, 306, 315], "bf": [0, 15, 17, 33, 74, 77, 312], "df": [0, 33], "hit": [0, 33, 35, 77, 78, 154, 290, 295, 312], "lpa": [0, 7, 33, 67, 77, 312], "sssp": [0, 7, 8, 9, 14, 17, 18, 22, 24, 33, 40, 67, 74, 77, 78, 85, 295, 296, 304, 305, 312], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 44, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 95, 110, 113, 128, 137, 138, 139, 141, 142, 143, 144, 145, 147, 149, 151, 154, 171, 185, 186, 187, 188, 189, 190, 195, 198, 200, 201, 208, 209, 210, 212, 213, 216, 217, 218, 220, 222, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 248, 250, 267, 269, 272, 277, 281, 283, 284, 286, 287, 288, 289, 291, 293, 295, 296, 297, 298, 300, 301, 302, 306, 310, 312], "find": [0, 4, 8, 9, 22, 30, 35, 36, 39, 41, 44, 47, 50, 51, 52, 54, 56, 64, 67, 69, 70, 74, 76, 85, 131, 136, 154, 159, 178, 179, 208, 296, 301, 302], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 30, 36, 37, 41, 43, 44, 49, 56, 69, 71], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 28, 29, 33, 35, 36, 37, 41, 44, 45, 48, 49, 50, 51, 52, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 85, 102, 107, 108, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 168, 187, 189, 194, 196, 198, 201, 208, 211, 215, 216, 217, 218, 220, 223, 228, 229, 231, 232, 236, 237, 238, 239, 240, 241, 248, 255, 264, 276, 281, 283, 284, 288, 289, 291, 292, 295, 296, 301, 303, 312, 316, 317, 320, 322], "given": [0, 7, 9, 14, 20, 33, 44, 48, 49, 50, 54, 55, 56, 62, 67, 70, 71, 73, 77, 141, 143, 146, 149, 151, 153, 188, 195, 206, 218, 219, 220, 221, 222, 223, 224, 232, 240, 241, 242, 246, 247, 248, 249, 253, 281, 284, 285, 288, 289, 295, 296, 300, 301, 304, 305], "weight": [0, 7, 19, 20, 32, 40, 54, 56, 62, 67, 69, 74, 77, 108, 137, 139, 140, 141, 142, 143, 146, 149, 154, 156, 157, 158, 162, 173, 174, 216, 228, 232, 236, 239, 279, 287, 288, 289, 291, 296, 321], "As": [0, 7, 12, 15, 16, 18, 20, 22, 24, 27, 41, 49, 52, 56, 61, 62, 66, 70, 137, 139, 145, 146, 147, 218, 300, 301], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 32, 36, 44, 49, 50, 54, 55, 56, 58, 62, 66, 67, 69, 70, 71, 76, 77, 78, 86, 92, 93, 102, 103, 110, 112, 114, 115, 118, 119, 131, 137, 140, 141, 143, 145, 146, 148, 151, 152, 154, 218, 220, 223, 242, 289, 302, 304, 312, 316], "comput": [0, 3, 4, 6, 9, 14, 15, 16, 17, 18, 19, 22, 23, 24, 30, 33, 36, 49, 50, 54, 56, 58, 59, 62, 67, 68, 69, 70, 71, 72, 73, 76, 77, 79, 141, 142, 145, 147, 154, 235, 238, 239, 243, 248, 257, 280, 281, 293, 296, 302, 303, 312], "minimum": [0, 6, 41, 50, 54, 56, 77, 208, 296], "distanc": [0, 7, 15, 17, 18, 67, 77, 154, 189, 228, 232, 236, 237, 238, 239, 240, 258, 270, 312], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 32, 33, 35, 36, 37, 48, 49, 51, 52, 54, 55, 56, 66, 67, 69, 70, 73, 75, 76, 78, 87, 94, 141, 151, 152, 153, 154, 165, 169, 184, 208, 213, 215, 218, 220, 236, 238, 240, 289, 292, 295, 301], "vertex": [0, 2, 3, 4, 6, 9, 12, 14, 15, 16, 17, 18, 19, 22, 29, 32, 33, 40, 48, 51, 54, 55, 57, 58, 59, 62, 66, 67, 68, 69, 70, 71, 74, 76, 77, 78, 79, 84, 107, 138, 139, 140, 141, 142, 143, 146, 149, 151, 153, 154, 228, 233, 250, 251, 267, 292, 294, 298, 300, 302, 303, 306, 312, 317], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 28, 29, 32, 33, 35, 36, 41, 44, 49, 51, 54, 55, 56, 58, 59, 62, 64, 66, 68, 69, 70, 71, 72, 73, 77, 79, 137, 139, 141, 143, 147, 150, 151, 152, 154, 158, 189, 191, 195, 198, 208, 217, 223, 229, 238, 239, 281, 289, 291, 292, 295, 296, 300, 301, 302, 305], "vertic": [0, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 22, 24, 32, 40, 45, 48, 49, 51, 52, 54, 59, 62, 66, 67, 69, 70, 71, 76, 77, 78, 79, 109, 138, 139, 140, 141, 142, 143, 146, 149, 151, 212, 223, 233, 235, 250, 251, 262, 264, 275, 276, 282, 295, 296, 298, 300, 301, 302, 303, 312, 316, 317], "all_pairs_shortest_path_length": [0, 33], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 29, 32, 33, 36, 39, 41, 48, 50, 51, 52, 54, 55, 56, 59, 60, 62, 69, 70, 71, 73, 77, 96, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 154, 187, 188, 199, 208, 209, 210, 211, 212, 213, 214, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 289, 302, 306, 320], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 36, 48, 49, 51, 56, 59, 62, 66, 69, 73, 77, 137, 138, 139, 140, 143, 146, 151, 281, 289], "over": [0, 9, 12, 15, 16, 18, 22, 24, 32, 33, 41, 44, 54, 57, 62, 66, 68, 69, 73, 74, 77, 79, 140, 154, 176, 177, 183, 235, 289, 298, 306], "dissimilar": 0, "measur": [0, 6, 20, 49, 69, 71, 77, 138, 154, 232, 233, 266], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 15, 17, 20, 22, 28, 36, 45, 49, 54, 56, 59, 69, 70, 74, 138, 139, 143, 144, 147, 149, 151, 153, 154, 182, 183, 204, 212, 213, 218, 220, 246, 247, 249, 282, 283, 289, 296, 300, 301, 302, 303, 304], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 32, 40, 45, 50, 67, 69, 70, 71, 76, 77, 78, 79, 96, 112, 126, 127, 128, 140, 143, 151, 152, 236, 251, 281, 286, 289, 292, 295, 296, 298, 300, 302, 303, 310, 316, 317, 320], "each": [0, 6, 9, 10, 12, 14, 15, 16, 19, 20, 24, 29, 33, 34, 35, 39, 45, 48, 49, 51, 54, 55, 56, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 127, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 151, 154, 163, 165, 183, 184, 189, 193, 195, 200, 206, 208, 210, 211, 212, 214, 215, 217, 218, 220, 221, 223, 228, 231, 233, 236, 237, 238, 239, 240, 243, 244, 246, 248, 249, 254, 257, 269, 274, 279, 283, 285, 286, 287, 289, 295, 296, 298, 300, 301, 302, 303, 306, 310], "attribute_assort": [0, 33], "nearest": [0, 77], "neighbor": [0, 6, 9, 14, 17, 18, 40, 54, 56, 59, 62, 69, 70, 71, 77, 79, 137, 138, 140, 141, 143, 145, 146, 147, 149, 150, 154, 159, 160, 179, 231, 232, 246, 249, 282, 289, 298, 301, 312], "return": [0, 6, 9, 15, 18, 20, 40, 49, 54, 55, 56, 62, 64, 70, 77, 78, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 295, 296, 298, 301, 312, 321], "success": [0, 22, 81, 139, 223, 254], "0": [0, 9, 10, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 32, 34, 41, 44, 48, 50, 52, 54, 56, 59, 61, 62, 64, 65, 67, 74, 76, 77, 78, 79, 93, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 154, 156, 157, 158, 160, 164, 165, 168, 169, 173, 183, 187, 188, 190, 191, 192, 193, 195, 198, 200, 201, 203, 204, 205, 207, 208, 211, 212, 213, 214, 216, 217, 218, 220, 221, 224, 227, 229, 236, 237, 238, 239, 240, 246, 247, 251, 254, 267, 272, 281, 283, 284, 289, 291, 292, 296, 298, 301, 302, 303, 304, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322], "1": [0, 6, 7, 9, 10, 14, 15, 17, 19, 20, 22, 23, 24, 29, 30, 32, 33, 34, 36, 44, 45, 48, 49, 50, 51, 52, 54, 56, 59, 61, 62, 64, 65, 67, 70, 71, 74, 77, 78, 137, 140, 142, 143, 144, 146, 151, 152, 153, 154, 156, 157, 158, 160, 164, 165, 168, 173, 174, 177, 182, 183, 187, 189, 190, 191, 192, 193, 195, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 291, 292, 296, 301, 302, 303, 304, 310, 312, 316, 317, 319, 320, 321, 322], "2": [0, 6, 9, 10, 14, 17, 18, 19, 20, 22, 23, 30, 32, 33, 36, 45, 48, 49, 50, 52, 54, 56, 59, 61, 62, 64, 65, 67, 70, 71, 74, 77, 78, 137, 140, 141, 142, 143, 144, 146, 154, 156, 157, 158, 160, 168, 169, 173, 174, 177, 182, 183, 190, 191, 192, 195, 200, 201, 206, 208, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 256, 258, 260, 261, 262, 266, 267, 269, 271, 272, 274, 281, 282, 283, 284, 289, 291, 292, 296, 301, 302, 303, 304, 312, 313, 314, 316, 317, 319, 320, 321, 322], "average_degree_connect": [0, 77, 312], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 29, 41, 45, 49, 54, 55, 56, 62, 71, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 131, 136, 138, 139, 141, 143, 146, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 171, 172, 173, 174, 178, 179, 183, 184, 187, 189, 191, 192, 194, 195, 196, 198, 199, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 296, 301, 302], "str": [0, 20, 64, 65, 77, 78, 79, 85, 86, 92, 93, 94, 96, 102, 104, 105, 106, 107, 110, 112, 113, 114, 115, 118, 119, 131, 149, 151, 152, 167, 169, 283, 289, 291, 295, 296, 302, 317, 322], "target": [0, 6, 17, 22, 24, 50, 59, 60, 66, 67, 71, 73, 77, 79, 143, 145, 151, 154, 225, 227, 246, 249, 281, 302, 312], "base": [0, 4, 6, 9, 11, 12, 14, 18, 31, 33, 44, 49, 50, 51, 54, 56, 58, 62, 66, 67, 68, 69, 70, 71, 74, 76, 77, 78, 100, 108, 137, 139, 141, 143, 144, 145, 151, 154, 225, 264, 279, 289, 301, 302, 306, 312, 321], "v": [0, 2, 6, 7, 9, 10, 14, 15, 18, 20, 22, 24, 32, 40, 44, 51, 52, 55, 56, 62, 67, 70, 71, 76, 77, 78, 79, 137, 140, 141, 142, 143, 146, 149, 151, 152, 153, 154, 160, 183, 208, 211, 216, 218, 222, 228, 231, 236, 239, 246, 249, 251, 283, 289, 295, 296, 301, 302, 312, 316, 320, 321], "sum": [0, 20, 51, 69, 77, 79, 154, 208, 213, 216, 218, 219, 220, 229, 236, 239, 240, 247, 248, 287, 289, 320], "fraction": [0, 77, 154, 208], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 36, 49, 54, 56, 62, 70, 71, 77, 79, 84, 143, 147, 149, 198, 236, 238, 281, 289, 293, 302, 312, 317, 322], "through": [0, 2, 4, 6, 12, 14, 15, 16, 19, 22, 24, 27, 31, 33, 36, 47, 48, 49, 52, 54, 55, 56, 59, 62, 67, 69, 70, 71, 73, 78, 81, 138, 139, 141, 142, 143, 148, 149, 151, 154, 184, 198, 215, 254, 289, 301, 302], "betweenness_centr": [0, 33, 154], "normal": [0, 6, 27, 41, 56, 77, 143, 151, 154, 211, 301], "endpoint": [0, 9, 10, 27, 28, 48, 50, 54, 55, 64, 67, 76, 143, 152, 154, 296, 298, 302, 312, 320, 322], "bool": [0, 6, 14, 15, 20, 40, 76, 77, 79, 125, 151, 154, 161, 171, 173, 174, 183, 212, 222, 228, 232, 248, 289, 291, 296, 301, 322], "whether": [0, 36, 48, 49, 54, 56, 66, 70, 76, 77, 138, 139, 143, 151, 211, 213, 216, 236, 247, 248, 289, 301, 302, 303], "should": [0, 6, 9, 16, 19, 20, 22, 23, 27, 32, 36, 48, 49, 51, 52, 54, 56, 66, 67, 71, 76, 77, 85, 88, 101, 112, 147, 148, 151, 153, 154, 184, 208, 236, 237, 238, 239, 289, 291, 296, 298, 301, 302, 303, 304], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 34, 35, 36, 44, 47, 49, 50, 54, 55, 56, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 139, 140, 143, 145, 151, 154, 169, 208, 216, 222, 232, 281, 288, 289, 300, 301, 302, 310], "count": [0, 6, 32, 49, 51, 52, 55, 56, 62, 67, 69, 76, 77, 141, 142, 146, 147, 150, 154, 164, 222, 289, 302, 316, 320], "an": [0, 4, 6, 7, 8, 9, 10, 12, 15, 16, 17, 18, 19, 27, 28, 30, 33, 36, 39, 41, 44, 45, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 81, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 101, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 118, 119, 120, 122, 123, 132, 133, 137, 138, 139, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 165, 166, 171, 176, 177, 183, 184, 186, 187, 188, 190, 193, 194, 195, 196, 198, 199, 201, 203, 204, 207, 209, 210, 218, 220, 221, 222, 224, 225, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 250, 254, 256, 262, 267, 271, 274, 275, 279, 281, 282, 283, 284, 286, 287, 289, 292, 293, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306], "travers": [0, 6, 15, 17, 49, 55, 59, 66, 67, 68, 69, 137, 140, 143, 145, 149, 152, 283, 289, 298, 301, 302, 303, 312, 320], "It": [0, 2, 4, 6, 9, 10, 11, 12, 15, 16, 24, 27, 28, 33, 36, 39, 41, 44, 48, 49, 51, 52, 54, 55, 56, 58, 59, 65, 67, 68, 69, 71, 72, 73, 76, 77, 81, 129, 137, 138, 139, 143, 145, 147, 151, 152, 154, 158, 213, 217, 241, 242, 246, 249, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 270, 273, 275, 276, 281, 289, 296, 300, 301, 302, 303, 310], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 30, 31, 36, 47, 48, 54, 55, 62, 64, 70, 72, 75, 76, 78, 137, 141, 143, 152, 153, 154, 189, 214, 218, 220, 221, 224, 240, 254, 283, 291, 296, 301, 302, 306], "root": [0, 4, 27, 31, 35, 41, 68, 189, 191, 282, 283, 300], "explor": [0, 17, 44, 50, 54, 56, 66, 67, 70, 301], "present": [0, 2, 20, 27, 56, 62, 63, 64, 65, 66, 67, 69, 81, 154, 165, 208, 289, 300, 301], "prior": [0, 12, 33, 56, 58, 66], "move": [0, 4, 6, 68, 143, 246, 249, 296], "next": [0, 6, 9, 12, 14, 16, 24, 28, 29, 32, 33, 55, 56, 59, 62, 63, 66, 71, 137, 138, 141, 143, 145, 147, 148, 149, 215, 283, 295, 298, 301, 302, 304], "level": [0, 6, 12, 37, 44, 49, 66, 67, 68, 71, 77, 145, 199, 246, 247, 286, 301, 302], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 32, 40, 55, 64, 76, 77, 78, 79, 113, 138, 139, 140, 141, 142, 143, 146, 149, 150, 151, 153, 154, 182, 187, 189, 191, 194, 196, 198, 199, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 224, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 250, 251, 252, 253, 284, 289, 291, 296, 298, 302, 312, 320, 322], "origin": [0, 4, 6, 9, 12, 22, 49, 54, 55, 59, 64, 65, 71, 76, 78, 107, 137, 139, 151, 152, 208, 230, 236, 275, 283, 287, 289, 295, 296, 302, 303], "reciproc": [0, 154], "n": [0, 19, 20, 29, 32, 37, 49, 54, 56, 58, 62, 71, 74, 77, 78, 141, 143, 146, 148, 154, 164, 168, 169, 171, 175, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 217, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 251, 254, 267, 282, 283, 284, 286, 289], "reachabl": [0, 154], "node": [0, 4, 10, 15, 18, 27, 29, 32, 41, 44, 61, 62, 63, 66, 67, 69, 71, 73, 75, 77, 78, 79, 99, 103, 109, 112, 113, 132, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 175, 177, 179, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 301, 303, 312, 315, 316, 321], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 33, 58, 66, 68, 69, 71, 73, 141, 147, 298, 301], "improv": [0, 6, 9, 17, 19, 23, 51, 68, 71, 72, 73, 305], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 14, 15, 16, 17, 20, 27, 28, 31, 33, 35, 36, 37, 39, 41, 44, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 66, 68, 69, 70, 71, 72, 73, 76, 77, 78, 81, 137, 138, 141, 142, 143, 147, 148, 151, 154, 187, 228, 235, 236, 250, 251, 283, 289, 291, 296, 300, 301, 302, 305, 306], "than": [0, 15, 18, 23, 24, 28, 32, 36, 41, 45, 48, 49, 54, 56, 57, 62, 66, 69, 70, 72, 73, 77, 139, 141, 143, 150, 154, 164, 198, 206, 208, 210, 215, 217, 228, 230, 239, 296, 301, 302, 305, 306], "one": [0, 2, 6, 9, 10, 12, 14, 15, 19, 20, 22, 24, 28, 29, 35, 36, 39, 41, 44, 47, 48, 49, 54, 55, 56, 59, 62, 67, 70, 71, 73, 76, 77, 79, 85, 86, 102, 128, 137, 138, 139, 140, 141, 143, 147, 151, 154, 163, 187, 188, 191, 192, 195, 204, 205, 208, 217, 218, 223, 225, 226, 227, 228, 229, 231, 246, 249, 257, 260, 264, 267, 273, 274, 275, 281, 283, 285, 289, 295, 296, 298, 300, 301, 302, 305, 316, 320], "compon": [0, 4, 6, 12, 19, 28, 31, 33, 37, 39, 41, 52, 66, 68, 69, 76, 77, 154, 222, 236, 295, 301, 302], "ratio": [0, 56, 281], "actor": [0, 56, 66, 266], "group": [0, 2, 41, 49, 67, 69, 70, 76, 145, 151, 212, 213, 214, 216, 233, 261, 279, 300, 302, 320, 322], "who": [0, 11, 28, 56, 66, 70, 144, 149, 302], "closeness_centr": [0, 33], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 14, 16, 20, 27, 29, 32, 33, 35, 37, 41, 43, 44, 47, 48, 50, 52, 53, 54, 55, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 78, 81, 89, 138, 139, 143, 145, 296, 297, 301, 303, 305, 306, 316], "its": [0, 4, 6, 7, 9, 10, 12, 14, 18, 24, 29, 30, 33, 44, 51, 54, 56, 59, 61, 62, 65, 66, 67, 69, 71, 77, 78, 79, 128, 137, 139, 143, 147, 149, 151, 154, 196, 199, 206, 208, 228, 233, 246, 249, 257, 276, 286, 296, 301, 302, 304], "being": [0, 55, 62, 70, 151, 188, 218, 298, 301, 302, 303], "cliqu": [0, 6, 56, 66, 69, 209, 210, 214, 215, 217, 231], "complet": [0, 14, 30, 32, 33, 45, 49, 55, 56, 68, 137, 139, 143, 164, 189, 190, 192, 194, 195, 201, 206, 215, 246, 249, 273, 289, 302], "have": [0, 2, 4, 6, 8, 9, 11, 12, 15, 19, 20, 23, 24, 27, 28, 29, 30, 32, 35, 36, 39, 41, 44, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 66, 67, 69, 70, 71, 73, 77, 78, 81, 85, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 154, 164, 168, 171, 183, 189, 194, 199, 208, 218, 219, 220, 222, 228, 231, 246, 247, 249, 265, 269, 283, 289, 295, 296, 300, 301, 302, 304, 306, 310, 316], "edg": [0, 6, 7, 9, 12, 15, 17, 18, 19, 22, 24, 29, 32, 36, 40, 45, 48, 49, 51, 54, 55, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 76, 77, 78, 79, 90, 91, 94, 99, 108, 112, 113, 132, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 156, 157, 158, 161, 164, 165, 167, 168, 169, 171, 173, 174, 177, 178, 180, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 205, 206, 208, 210, 213, 214, 216, 218, 219, 220, 222, 224, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 279, 283, 286, 287, 288, 289, 290, 292, 295, 296, 298, 300, 302, 303, 304, 312, 316, 317, 321], "u": [0, 6, 14, 16, 18, 20, 36, 40, 41, 51, 56, 67, 77, 143, 147, 149, 151, 154, 160, 183, 195, 208, 222, 228, 231, 236, 239, 251, 289, 301, 312, 322], "equal": [0, 10, 41, 54, 56, 61, 65, 67, 154, 206, 208, 239, 244, 282, 316], "degree_assortativity_coeffici": [0, 77, 312], "hold": [0, 10, 20, 54, 76, 77, 78, 79, 102, 106, 107, 115, 139, 151, 152, 154, 289, 295], "numer": [0, 20, 66, 68, 69, 77, 78, 154, 289, 295, 301], "valu": [0, 6, 9, 15, 18, 20, 24, 28, 35, 40, 41, 48, 49, 59, 64, 69, 71, 76, 77, 78, 79, 114, 123, 131, 136, 137, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 163, 183, 198, 208, 236, 237, 238, 239, 246, 248, 249, 281, 282, 283, 289, 291, 292, 295, 296, 298, 301, 302, 303, 312, 320, 321, 322], "If": [0, 2, 4, 6, 7, 8, 14, 15, 17, 20, 23, 27, 28, 29, 31, 32, 35, 36, 41, 48, 50, 52, 54, 56, 61, 67, 73, 77, 78, 81, 131, 136, 138, 139, 143, 144, 147, 148, 150, 151, 152, 153, 154, 159, 160, 162, 169, 173, 174, 183, 184, 189, 190, 191, 192, 194, 195, 196, 198, 199, 201, 203, 204, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 249, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 281, 284, 285, 287, 289, 291, 292, 295, 296, 298, 301, 302, 303, 310], "fals": [0, 15, 17, 18, 19, 20, 45, 48, 76, 77, 79, 129, 137, 138, 139, 143, 149, 151, 153, 154, 167, 171, 173, 174, 183, 185, 186, 211, 212, 213, 216, 222, 232, 247, 289, 292, 296, 302, 312, 321], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 17, 23, 28, 30, 33, 36, 39, 41, 44, 49, 50, 51, 52, 53, 55, 56, 59, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 76, 77, 78, 79, 81, 128, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 151, 152, 154, 171, 173, 174, 177, 182, 183, 189, 204, 206, 208, 219, 223, 228, 236, 237, 238, 239, 240, 246, 249, 255, 256, 260, 261, 265, 271, 273, 276, 279, 281, 283, 287, 289, 293, 295, 296, 304, 306, 316, 317, 320], "adjac": [0, 10, 16, 20, 24, 54, 56, 71, 77, 140, 145, 154, 177, 210, 234, 252, 267, 281, 282, 289, 290, 301], "direct": [0, 9, 10, 15, 45, 48, 56, 59, 62, 65, 67, 68, 71, 76, 77, 97, 129, 137, 139, 143, 146, 149, 151, 154, 159, 164, 170, 185, 196, 209, 210, 211, 212, 213, 216, 220, 221, 223, 232, 233, 234, 235, 246, 247, 256, 283, 287, 289, 290, 292, 300, 301, 303, 317, 321, 322], "three": [0, 6, 10, 12, 14, 18, 29, 33, 39, 56, 66, 68, 73, 74, 81, 138, 141, 142, 143, 146, 147, 148, 149, 154, 183, 188, 195, 271, 276, 285, 289, 302, 306], "separ": [0, 6, 17, 29, 35, 48, 50, 56, 66, 73, 138, 139, 236, 291, 301, 302], "defin": [0, 4, 6, 10, 12, 18, 20, 24, 27, 41, 48, 51, 54, 55, 56, 58, 61, 64, 66, 67, 68, 70, 76, 77, 81, 96, 137, 138, 141, 143, 146, 148, 149, 154, 191, 213, 215, 238, 295, 296, 300, 301, 302, 316], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 31, 32, 36, 37, 39, 41, 49, 50, 51, 54, 56, 66, 68, 70, 76, 77, 78, 79, 85, 123, 138, 140, 143, 145, 147, 149, 151, 152, 154, 173, 174, 188, 255, 262, 267, 279, 285, 289, 291, 292, 295, 296, 300, 301, 302, 310, 312, 313, 315, 320, 322], "both": [0, 2, 10, 12, 18, 19, 20, 33, 51, 52, 55, 59, 65, 66, 67, 68, 69, 70, 71, 77, 79, 137, 138, 139, 151, 152, 153, 168, 177, 182, 183, 188, 208, 232, 235, 240, 246, 249, 296, 298, 300, 301, 302, 304, 305, 319, 320], "degree_centr": [0, 33, 44, 77, 154, 290, 312], "centrality_typ": [0, 77], "appli": [0, 6, 9, 10, 12, 24, 27, 32, 48, 49, 54, 57, 59, 66, 67, 69, 73, 231, 238, 254, 281, 298, 301, 302, 304, 306], "far": [0, 66, 138], "possibl": [0, 4, 6, 15, 41, 49, 59, 70, 71, 77, 139, 145, 146, 154, 222, 230, 231, 246, 247, 248, 249, 281, 285, 301], "along": [0, 6, 10, 20, 24, 30, 51, 54, 59, 79, 139, 143, 149, 283, 289, 303], "branch": [0, 56, 143, 189, 199, 320], "befor": [0, 4, 17, 22, 23, 27, 28, 29, 36, 56, 62, 64, 76, 77, 81, 137, 143, 150, 189, 191, 192, 194, 196, 199, 201, 203, 204, 207, 218, 220, 221, 223, 225, 226, 227, 233, 234, 235, 241, 242, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 284, 291, 296, 298, 301, 302, 304], "backtrack": 0, "influenc": [0, 27, 154], "relationship": [0, 41, 49, 56, 59, 62, 66, 69, 71, 138, 139, 149, 301, 302], "high": [0, 6, 9, 44, 45, 49, 56, 67, 68, 69, 71, 72, 73, 74, 145, 223, 254, 296, 298, 302], "score": [0, 56, 71], "contribut": [0, 4, 47, 301], "low": [0, 6, 7, 31, 49, 61, 66, 67, 71, 72, 73, 281, 302], "A": [0, 6, 7, 9, 10, 24, 27, 28, 36, 44, 50, 52, 55, 56, 59, 61, 66, 68, 69, 70, 71, 74, 76, 77, 78, 79, 86, 87, 89, 90, 91, 94, 97, 99, 108, 109, 113, 114, 123, 141, 142, 143, 146, 148, 151, 152, 153, 154, 156, 157, 158, 160, 161, 163, 165, 167, 168, 169, 171, 172, 173, 174, 177, 182, 183, 184, 187, 188, 189, 191, 192, 194, 198, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 224, 228, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 255, 257, 266, 277, 281, 282, 283, 284, 286, 287, 289, 291, 296, 300, 301, 302, 303, 304], "mean": [0, 2, 20, 28, 29, 35, 36, 48, 49, 51, 64, 76, 78, 84, 125, 139, 142, 143, 153, 154, 194, 211, 218, 228, 237, 238, 239, 289, 292, 295, 296, 298, 301, 302, 304], "themselv": [0, 49, 56, 59, 283], "eigenvector_centr": [0, 33, 77, 154, 290, 312], "toler": [0, 77, 154, 208], "max_round": [0, 77, 312], "doubl": [0, 9, 14, 16, 17, 18, 32, 40, 55, 74, 79, 138, 148, 259, 283, 304, 312, 320, 322], "error": [0, 2, 35, 36, 37, 41, 47, 49, 52, 76, 77, 143, 147, 151, 154, 188, 289, 302], "check": [0, 6, 12, 17, 27, 28, 29, 32, 33, 34, 36, 37, 41, 48, 49, 56, 62, 64, 69, 70, 77, 147, 151, 154, 247, 248, 289, 296, 301, 302, 310, 315, 316], "converg": [0, 6, 9, 14, 17, 24, 71, 74, 77, 154], "maximum": [0, 48, 54, 56, 69, 77, 140, 154, 208, 224, 239, 240, 241, 242, 247, 288], "number": [0, 8, 9, 19, 20, 24, 29, 32, 44, 48, 50, 52, 53, 54, 56, 59, 63, 64, 67, 69, 71, 74, 76, 77, 79, 139, 140, 141, 142, 143, 146, 150, 154, 164, 169, 171, 180, 181, 182, 187, 188, 190, 192, 195, 199, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 262, 267, 272, 279, 281, 282, 284, 286, 287, 288, 289, 296, 298, 301, 302, 303, 310, 316, 320], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 54, 55, 59, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 77, 79, 137, 140, 149, 153, 154, 156, 157, 158, 159, 160, 165, 176, 177, 178, 179, 183, 184, 194, 195, 196, 198, 201, 203, 204, 207, 208, 236, 237, 238, 239, 240, 246, 249, 251, 283, 289, 312, 316, 321], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 28, 29, 32, 35, 36, 37, 44, 47, 49, 52, 55, 56, 57, 59, 61, 62, 64, 65, 67, 69, 71, 77, 78, 129, 132, 133, 137, 138, 139, 141, 144, 146, 148, 149, 150, 151, 154, 208, 236, 237, 238, 239, 289, 296, 300, 304, 306, 310, 312, 313, 314, 316, 317, 320, 321, 322], "rate": [0, 66, 72, 77, 236, 238, 239], "two": [0, 2, 6, 9, 16, 17, 18, 19, 28, 36, 41, 44, 48, 49, 51, 55, 56, 59, 60, 67, 69, 70, 71, 73, 74, 137, 138, 139, 140, 141, 143, 145, 147, 149, 151, 154, 160, 183, 190, 191, 193, 195, 196, 200, 217, 228, 229, 236, 237, 238, 239, 240, 244, 246, 249, 250, 255, 256, 264, 282, 283, 288, 289, 300, 301, 302, 316], "hub": [0, 28, 77, 78, 154, 207, 295], "author": [0, 27, 65, 67, 77, 154, 208, 296, 316], "estim": [0, 49, 56, 69, 70, 149, 154], "within": [0, 29, 35, 51, 54, 56, 60, 66, 67, 68, 69, 71, 143, 152, 154, 208, 211, 212, 232, 238, 239, 296, 301, 310, 316, 320], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 41, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 78, 81, 85, 87, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 192, 206, 208, 218, 220, 246, 267, 289, 292, 295, 296, 301, 302, 304, 306, 316, 322], "need": [0, 2, 4, 6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 39, 41, 44, 45, 48, 49, 55, 56, 58, 59, 60, 61, 64, 66, 67, 68, 70, 71, 73, 76, 77, 81, 137, 138, 139, 141, 143, 146, 147, 148, 150, 151, 223, 236, 241, 247, 267, 283, 289, 292, 298, 301, 302, 304, 305, 306, 312], "rel": [0, 27, 49, 50, 59, 71, 139, 143, 154, 302], "immedi": [0, 6, 49, 72, 77, 79, 143, 154, 292, 296, 302], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 28, 29, 31, 33, 35, 36, 41, 44, 48, 49, 55, 56, 58, 61, 64, 66, 67, 68, 69, 71, 73, 74, 76, 77, 79, 81, 137, 138, 139, 141, 144, 145, 146, 149, 151, 152, 154, 189, 208, 233, 235, 236, 240, 259, 264, 269, 281, 283, 287, 289, 292, 295, 296, 298, 300, 301, 302, 305, 306, 312], "under": [0, 9, 10, 14, 17, 24, 37, 56, 61, 66, 77, 81, 143, 145, 146, 154, 301], "consider": [0, 55, 154, 211], "katz_centr": [0, 33, 77, 154, 290, 312], "alpha": [0, 56, 77, 154, 228, 229, 240, 281], "beta": [0, 77, 154, 229, 240], "attenu": [0, 154], "factor": [0, 50, 56, 77, 154, 189, 199, 221, 223, 301], "neighborhood": [0, 6, 66, 68, 71, 77, 143, 147, 154, 232], "maxim": [0, 6, 154, 242, 288], "subgraph": [0, 6, 9, 17, 32, 56, 58, 67, 68, 69, 77, 99, 107, 137, 143, 145, 151, 152, 154, 165, 168, 190, 201, 232, 289, 316, 320], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 31, 36, 37, 41, 44, 48, 49, 53, 54, 56, 59, 62, 63, 66, 67, 69, 71, 73, 74, 76, 79, 81, 137, 138, 141, 143, 146, 147, 148, 149, 151, 154, 156, 157, 158, 165, 168, 169, 184, 194, 195, 196, 198, 201, 216, 241, 242, 246, 247, 289, 292, 293, 296, 301, 302, 310, 314, 320], "found": [0, 4, 9, 16, 17, 18, 35, 41, 48, 55, 56, 59, 60, 68, 74, 129, 150, 208, 250, 251, 287, 289, 300, 301, 302, 306], "recurs": [0, 6, 143, 191], "prune": 0, "less": [0, 2, 6, 17, 27, 45, 48, 77, 143, 150, 154, 206, 217, 228, 230, 302], "kkore": [0, 33], "order": [0, 6, 33, 49, 58, 68, 70, 71, 77, 78, 138, 143, 149, 154, 156, 157, 163, 187, 188, 191, 196, 203, 216, 217, 220, 252, 253, 256, 281, 282, 289, 295, 298, 302, 320], "That": [0, 27, 77, 148, 206, 249, 292, 304], "kshell": [0, 33], "fast": [0, 9, 20, 49, 77, 147], "where": [0, 2, 6, 12, 14, 18, 24, 36, 39, 41, 51, 58, 59, 66, 67, 70, 71, 73, 77, 123, 138, 139, 141, 143, 147, 154, 164, 171, 189, 218, 222, 224, 233, 236, 237, 238, 239, 267, 289, 296, 300, 301, 302, 316, 320], "assign": [0, 7, 9, 15, 18, 20, 35, 48, 51, 60, 67, 69, 71, 76, 77, 79, 154, 208, 216, 218, 220, 222, 236, 239, 244, 289, 292, 295, 298, 301, 302, 322], "unlabel": 0, "dure": [0, 6, 9, 24, 41, 52, 54, 56, 68, 69, 71, 76, 138, 143, 208, 296, 298, 302, 303, 304, 305], "wai": [0, 1, 4, 6, 10, 14, 20, 28, 35, 36, 41, 44, 48, 49, 55, 58, 68, 70, 71, 141, 143, 145, 147, 154, 208, 274, 281, 283, 289, 296, 300, 301, 303], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 27, 33, 36, 44, 47, 54, 55, 59, 66, 68, 69, 70, 71, 73, 77, 79, 85, 87, 131, 134, 136, 138, 141, 143, 147, 148, 151, 154, 173, 174, 178, 220, 229, 243, 287, 289, 296, 298, 300], "variant": [0, 30, 71, 74], "follow": [0, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 36, 41, 48, 50, 51, 52, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 81, 85, 137, 138, 139, 140, 141, 143, 146, 147, 149, 151, 153, 188, 208, 218, 222, 228, 231, 241, 242, 248, 251, 272, 285, 289, 296, 298, 300, 301, 302, 303, 305, 306, 310], "networkx": [0, 3, 7, 8, 12, 20, 33, 44, 58, 72, 75, 76, 77, 113, 154, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 171, 172, 173, 174, 178, 179, 183, 184, 188, 189, 191, 192, 194, 195, 196, 199, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 229, 232, 233, 234, 235, 240, 241, 242, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 282, 284, 289, 291, 292, 294, 318, 323], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 14, 15, 16, 18, 20, 23, 27, 30, 39, 41, 44, 45, 48, 49, 50, 54, 56, 58, 61, 62, 66, 67, 68, 70, 71, 74, 75, 76, 77, 79, 129, 136, 137, 138, 139, 141, 143, 146, 149, 150, 151, 152, 153, 154, 168, 192, 208, 222, 223, 228, 232, 240, 243, 244, 245, 250, 251, 269, 284, 287, 289, 292, 296, 300, 301, 302, 303, 306, 314, 315, 319], "sampling_path": [0, 33], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 54, 56, 59, 61, 71, 128, 281, 302, 304], "rank": [0, 6, 32, 66, 76, 77, 78, 281, 295], "vote": [0, 77, 79], "scheme": [0, 6, 9, 48], "With": [0, 4, 12, 19, 24, 33, 35, 39, 50, 51, 54, 56, 58, 63, 64, 66, 67, 68, 227, 300], "top": [0, 9, 12, 22, 33, 54, 55, 56, 73, 141, 263, 302, 320], "highest": [0, 56, 223], "elect": 0, "num_of_nod": [0, 77], "select": [0, 9, 15, 35, 49, 51, 59, 62, 66, 69, 71, 78, 86, 92, 93, 104, 105, 110, 118, 119, 137, 143, 151, 208, 217, 240, 252, 286, 289, 295, 296, 300, 301, 320], "influenti": 0, "extract": [0, 54, 66, 67, 68, 77, 85, 152, 296, 298, 302], "In": [1, 2, 4, 6, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 31, 33, 36, 41, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 154, 211, 240, 243, 246, 247, 249, 289, 292, 295, 298, 301, 302, 304, 306], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 31, 33, 44, 49, 50, 52, 54, 55, 56, 57, 58, 59, 62, 68, 74, 96, 114, 138, 139, 140, 141, 151, 283, 289, 302, 306], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 31, 33, 35, 39, 41, 50, 52, 56, 66, 67, 71, 72, 74, 75, 137, 151, 225, 226, 227, 298, 306], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 41, 44, 45, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 95, 137, 139, 143, 144, 145, 149, 154, 185, 186, 208, 236, 237, 238, 239, 286, 289, 291, 296, 298, 300, 301, 302, 303, 306, 312], "run": [1, 2, 4, 6, 8, 9, 12, 19, 20, 24, 27, 28, 29, 30, 31, 37, 41, 48, 50, 54, 57, 60, 63, 64, 66, 67, 68, 71, 73, 75, 76, 77, 78, 114, 125, 143, 147, 148, 149, 151, 152, 241, 242, 292, 293, 296, 301, 302, 303, 304, 305, 306, 310, 312, 314, 319], "your": [1, 2, 4, 7, 8, 12, 14, 20, 23, 24, 27, 28, 29, 30, 31, 35, 37, 39, 41, 50, 52, 55, 59, 60, 61, 63, 64, 67, 73, 75, 77, 81, 139, 144, 148, 149, 198, 218, 289, 296, 298, 301, 312, 320], "own": [1, 4, 6, 8, 12, 15, 24, 33, 35, 36, 51, 57, 58, 69, 75, 81, 128, 141, 144, 149, 208, 218, 296, 301, 302, 306], "design": [1, 4, 6, 7, 12, 15, 18, 27, 44, 47, 52, 55, 56, 61, 62, 63, 64, 68, 71, 72, 73, 76, 137, 139, 145, 154, 289, 302], "extens": [1, 4, 6, 27, 35, 49, 62, 66, 138], "henc": [1, 2, 10, 31, 163, 286, 289, 302], "you": [1, 2, 4, 7, 8, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 36, 39, 41, 45, 48, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 67, 72, 73, 75, 77, 81, 131, 136, 138, 139, 142, 143, 144, 147, 148, 151, 154, 167, 198, 208, 218, 220, 232, 237, 238, 239, 289, 296, 298, 301, 302, 304, 310, 312, 322], "flash": [1, 3, 8, 12, 66], "java": [1, 4, 8, 12, 14, 33, 47, 50, 58, 68, 69, 73, 77, 81, 85, 301, 312], "c": [1, 6, 8, 12, 14, 17, 18, 30, 33, 54, 56, 58, 59, 66, 68, 69, 76, 77, 78, 81, 84, 96, 110, 139, 143, 147, 149, 154, 187, 188, 198, 218, 229, 242, 243, 246, 247, 281, 283, 285, 286, 289, 301, 304, 310, 312, 314, 320], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 28, 29, 31, 32, 33, 41, 44, 47, 48, 52, 56, 59, 61, 64, 66, 67, 69, 70, 72, 73, 76, 77, 84, 137, 140, 144, 147, 149, 152, 153, 289, 291, 292, 300, 301, 310, 312, 313, 315, 316, 318, 319, 320, 322], "alreadi": [2, 8, 20, 23, 24, 27, 28, 29, 35, 36, 39, 44, 50, 56, 62, 67, 137, 287, 289, 322], "deploi": [2, 15, 32, 41, 47, 49, 50, 52, 55, 58, 61, 66, 68, 73, 139, 296, 298, 303], "local": [2, 4, 6, 10, 14, 22, 24, 27, 29, 33, 36, 41, 47, 48, 55, 56, 63, 66, 67, 71, 76, 77, 81, 113, 138, 139, 147, 148, 149, 151, 296, 303, 319, 320], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 29, 31, 35, 36, 37, 41, 48, 50, 52, 55, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 77, 137, 149, 296, 301], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 28, 29, 35, 39, 41, 49, 56, 58, 59, 67, 68, 71, 81, 98, 138, 141, 142, 143, 147, 149, 151, 154, 217, 238, 269, 287, 289, 293, 295, 301, 302, 303, 304], "advantag": [2, 49, 58, 72, 73, 305], "3": [2, 6, 9, 10, 14, 17, 19, 20, 22, 23, 27, 29, 30, 31, 33, 39, 41, 44, 48, 49, 50, 51, 52, 54, 55, 56, 59, 62, 67, 71, 74, 77, 78, 140, 141, 142, 143, 146, 151, 152, 154, 156, 157, 158, 160, 165, 169, 173, 174, 190, 192, 195, 198, 204, 208, 209, 210, 212, 213, 214, 216, 220, 223, 224, 228, 229, 233, 235, 246, 247, 249, 251, 254, 257, 262, 266, 267, 270, 273, 276, 278, 281, 282, 283, 284, 289, 291, 292, 301, 302, 304, 313, 316, 319, 320], "gie": [2, 31, 32, 45, 47, 52, 55, 56, 58, 66, 70, 73, 74, 75, 106, 107, 313, 314, 323], "gle": [2, 31, 47, 58, 61, 62, 63, 66, 71, 73, 75, 313, 314, 321], "address": [2, 9, 14, 17, 23, 30, 41, 51, 66, 71, 302, 320], "differ": [2, 6, 9, 10, 12, 15, 17, 18, 20, 23, 27, 29, 33, 34, 35, 36, 39, 44, 49, 54, 56, 58, 59, 62, 66, 67, 68, 69, 70, 71, 73, 74, 77, 96, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 208, 212, 213, 214, 236, 239, 246, 266, 281, 289, 294, 296, 298, 300, 301, 303, 304, 305, 306], "complex": [2, 4, 6, 12, 22, 33, 36, 44, 49, 50, 51, 52, 53, 54, 55, 58, 59, 66, 68, 69, 70, 71, 72, 73, 77, 140, 154, 218, 222, 237, 238, 239, 301], "relat": [2, 4, 23, 24, 27, 32, 37, 41, 47, 49, 54, 55, 59, 62, 65, 66, 67, 68, 70, 71, 76, 139, 143, 149, 245, 281, 286, 301, 302], "show": [2, 14, 19, 20, 27, 28, 37, 41, 49, 50, 56, 58, 63, 64, 67, 69, 70, 71, 140, 141, 149, 292, 296, 298, 301], "kubernet": [2, 28, 41, 44, 47, 48, 58, 63, 67, 72, 296, 302, 313, 315, 316, 318, 322, 323], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 28, 33, 41, 44, 47, 50, 55, 56, 58, 61, 63, 66, 67, 68, 69, 70, 71, 72, 77, 139, 149, 154, 211, 290, 296, 302, 303, 310, 312, 319], "howev": [2, 6, 9, 11, 15, 20, 24, 29, 36, 41, 44, 48, 49, 52, 55, 56, 59, 66, 71, 73, 138, 139, 140, 145, 154, 218, 289, 301, 302], "scenario": [2, 4, 6, 8, 12, 39, 45, 49, 54, 55, 56, 59, 62, 66, 70, 71, 73, 138, 139, 141], "quit": [2, 208], "common": [2, 6, 12, 15, 49, 56, 59, 62, 66, 68, 69, 70, 71, 73, 137, 138, 145, 146, 160, 281, 283, 289, 301, 310], "intend": [2, 35, 281, 295], "analysi": [2, 7, 8, 11, 49, 55, 56, 58, 71, 72, 74, 75, 77, 242], "offlin": [2, 47, 58, 59, 68, 71, 72, 298], "everi": [2, 6, 23, 56, 62, 71, 76, 143, 154, 156, 157, 158, 173, 174, 192, 206, 269, 276, 289, 295, 301], "dai": [2, 20, 56, 289, 292], "export": [2, 4, 23, 28, 30, 32, 41, 50, 60, 300, 315], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 28, 29, 33, 36, 51, 54, 66, 68, 73, 81, 94, 138, 140, 141, 142, 143, 164, 201, 215, 222, 228, 229, 236, 237, 238, 239, 240, 289, 292, 296, 301, 304, 320], "real": [2, 6, 9, 12, 33, 44, 48, 54, 55, 58, 66, 67, 69, 71, 281, 302], "time": [2, 6, 9, 12, 14, 17, 19, 20, 23, 27, 28, 32, 33, 36, 41, 49, 54, 55, 56, 58, 62, 67, 70, 71, 74, 77, 138, 139, 143, 154, 187, 188, 224, 225, 226, 227, 237, 238, 239, 241, 242, 251, 254, 289, 301, 302, 304, 316, 320], "queri": [2, 7, 9, 14, 19, 22, 28, 33, 41, 44, 48, 50, 52, 53, 54, 55, 57, 58, 59, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 86, 92, 93, 102, 106, 107, 110, 114, 118, 119, 123, 133, 137, 139, 141, 143, 145, 149, 151, 153, 173, 174, 294, 296, 301, 304, 306, 310, 316], "sampl": [2, 28, 29, 30, 32, 47, 48, 58, 59, 66, 67, 73, 81, 138, 139, 140, 142, 145, 147, 150, 153, 228, 248, 281, 302, 321], "case": [2, 4, 6, 8, 10, 14, 15, 18, 27, 36, 39, 41, 44, 45, 48, 49, 51, 52, 56, 62, 70, 74, 79, 138, 139, 143, 145, 147, 150, 154, 208, 216, 222, 246, 257, 273, 295, 296, 301, 302, 306], "unnecessari": [2, 6, 9, 56, 301], "capabl": [2, 6, 11, 16, 20, 54, 66, 68, 73, 289], "independ": [2, 6, 66, 73, 138, 152, 165, 168, 216, 243, 289], "document": [2, 10, 27, 28, 32, 34, 35, 37, 41, 50, 54, 58, 60, 71, 77, 137, 138, 144, 296, 297, 302], "walk": [2, 4, 31, 48, 52, 56, 66, 67, 70, 143, 190, 201], "process": [2, 3, 4, 6, 9, 11, 12, 14, 15, 16, 19, 22, 23, 24, 27, 28, 29, 31, 33, 34, 36, 44, 47, 48, 50, 52, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 76, 87, 138, 139, 141, 143, 147, 149, 218, 220, 223, 251, 257, 289, 296, 298, 300, 301, 304, 306], "standalon": [2, 23, 27, 31, 41, 47, 50, 56, 66, 303, 322], "self": [2, 48, 56, 123, 137, 140, 143, 154, 164, 177, 216, 218, 220, 222, 228, 236, 237, 238, 239, 240, 289, 290, 292, 296, 302, 317, 321, 322], "manag": [2, 4, 10, 12, 14, 16, 27, 28, 29, 41, 44, 48, 56, 58, 62, 63, 64, 66, 68, 69, 71, 72, 73, 74, 76, 296, 302, 303, 312], "k8": [2, 4, 7, 17, 22, 37, 39, 41, 44, 47, 48, 55, 58, 61, 63, 73, 75, 296, 302, 312, 313, 314, 316, 319, 322], "7": [2, 10, 20, 23, 27, 29, 30, 31, 41, 52, 56, 74, 138, 144, 149, 156, 157, 169, 192, 254, 260, 262, 266, 267, 270, 272, 284, 289, 304, 315, 319, 320], "To": [2, 6, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 31, 33, 35, 36, 41, 44, 48, 49, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 71, 73, 74, 77, 81, 137, 138, 139, 141, 143, 144, 145, 147, 149, 154, 167, 218, 220, 225, 227, 236, 239, 279, 283, 289, 291, 295, 296, 298, 300, 301, 302, 305, 306, 310], "get": [2, 4, 6, 12, 16, 17, 18, 19, 20, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 47, 48, 49, 50, 54, 56, 59, 62, 70, 72, 75, 77, 78, 79, 97, 131, 133, 137, 140, 141, 142, 143, 146, 151, 152, 153, 154, 187, 208, 279, 289, 295, 296, 298, 301, 302, 306, 310, 312, 315, 316], "instal": [2, 4, 15, 16, 19, 23, 32, 34, 39, 41, 48, 50, 67, 77, 81, 147, 289, 292, 296, 313, 314, 315, 316, 319], "client": [2, 17, 22, 23, 28, 32, 39, 40, 49, 55, 58, 64, 76, 77, 149, 296, 298, 300, 301, 302, 303, 312, 314, 319], "prepar": [2, 4, 32, 35, 48, 52, 59, 60, 61, 62, 64, 65, 67, 71, 75, 301, 316, 319], "continu": [2, 6, 15, 16, 20, 27, 48, 49, 55, 56, 58, 59, 66, 67, 71, 74, 137, 208, 246, 249, 301, 302, 303], "incas": [2, 48], "doesn": [2, 28, 31, 36, 39, 48, 56, 81, 143, 151, 218, 220, 222, 289, 295, 304], "t": [2, 6, 8, 17, 23, 28, 29, 31, 32, 35, 36, 39, 40, 41, 48, 54, 55, 56, 68, 74, 76, 77, 79, 81, 87, 137, 142, 143, 149, 151, 153, 154, 167, 183, 218, 220, 222, 242, 246, 247, 281, 283, 286, 289, 295, 302, 304, 321], "could": [2, 4, 6, 9, 15, 22, 27, 28, 30, 31, 35, 37, 39, 45, 48, 50, 54, 58, 60, 75, 77, 132, 139, 141, 142, 151, 217, 300, 301, 302, 303], "creat": [2, 9, 10, 12, 16, 17, 19, 23, 27, 28, 29, 30, 33, 41, 48, 50, 52, 54, 55, 56, 66, 67, 71, 76, 77, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 107, 108, 109, 113, 116, 117, 123, 129, 130, 132, 133, 141, 143, 146, 148, 151, 152, 167, 189, 191, 192, 194, 195, 196, 198, 199, 201, 203, 204, 206, 207, 208, 210, 211, 213, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 237, 238, 239, 241, 242, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 283, 284, 289, 291, 292, 293, 296, 302, 303, 304, 305, 310, 312, 315], "distinct": [2, 54, 66, 194, 256, 282, 301], "method": [2, 15, 16, 17, 18, 20, 22, 23, 28, 56, 62, 64, 69, 71, 76, 77, 79, 100, 113, 128, 137, 141, 145, 146, 151, 152, 154, 217, 225, 227, 236, 238, 289, 292, 294, 296, 301, 302, 306, 312], "entir": [2, 9, 33, 49, 56, 67, 71, 143, 154, 289], "discret": [2, 59, 71, 137, 208, 221, 223, 229, 233, 244], "util": [2, 4, 6, 9, 15, 31, 35, 39, 56, 58, 60, 65, 66, 67, 68, 69, 72, 76, 77, 79, 153, 254, 300, 301, 302, 305], "either": [2, 29, 33, 41, 51, 55, 56, 62, 77, 139, 143, 151, 152, 192, 195, 208, 235, 246, 279, 289, 303], "aforement": [2, 69, 71, 138, 143, 302], "per": [2, 48, 301], "prefer": [2, 27, 35, 301], "session": [2, 7, 8, 16, 17, 22, 27, 28, 32, 41, 44, 52, 53, 55, 56, 58, 61, 63, 67, 75, 77, 78, 96, 129, 130, 131, 132, 133, 134, 136, 151, 152, 289, 293, 294, 302, 304, 310, 312, 313, 314, 316, 317, 320, 322], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 56, 62, 65, 67, 71, 76, 77, 78, 79, 84, 137, 138, 151, 152, 153, 154, 198, 267, 289, 293, 296, 301, 302, 303, 312, 321], "option": [2, 4, 6, 15, 27, 28, 30, 31, 39, 48, 50, 51, 54, 55, 56, 58, 60, 68, 70, 73, 77, 78, 81, 84, 106, 107, 113, 114, 115, 125, 131, 136, 138, 141, 143, 151, 152, 154, 156, 157, 158, 173, 174, 183, 189, 191, 192, 194, 196, 198, 199, 201, 203, 204, 207, 211, 212, 213, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 281, 284, 287, 289, 291, 292, 295, 296, 302, 303], "control": [2, 6, 27, 66, 68, 76, 154, 289, 301], "subset": [2, 6, 20, 51, 54, 65, 67, 195, 206, 295, 296], "upon": [2, 9, 14, 73, 151, 302, 303], "launch": [2, 8, 9, 17, 22, 28, 35, 39, 41, 44, 48, 53, 61, 63, 64, 67, 75, 129, 148, 293, 296, 302, 303, 316], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 28, 34, 36, 39, 41, 44, 45, 48, 49, 51, 54, 56, 58, 59, 62, 64, 66, 67, 69, 70, 71, 77, 79, 85, 137, 138, 139, 140, 143, 145, 147, 149, 154, 166, 187, 190, 192, 195, 218, 220, 222, 223, 228, 231, 232, 236, 237, 238, 239, 240, 251, 254, 283, 289, 293, 295, 296, 302, 304, 305, 310], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 30, 39, 44, 47, 48, 51, 52, 54, 55, 56, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 77, 78, 84, 85, 129, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 154, 156, 157, 158, 160, 165, 167, 168, 173, 174, 177, 182, 183, 188, 190, 192, 194, 195, 198, 201, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 224, 225, 227, 229, 232, 236, 237, 238, 239, 240, 246, 249, 254, 279, 281, 282, 283, 284, 287, 289, 291, 292, 293, 295, 296, 300, 301, 302, 303, 304, 310, 312, 316, 321], "set_opt": [2, 7, 15, 17, 19, 28, 37, 41, 52, 61, 64, 65, 67, 296, 310, 315], "show_log": [2, 7, 15, 17, 19, 28, 37, 41, 52, 61, 64, 65, 67, 131, 136, 296, 310, 315], "true": [2, 6, 7, 9, 15, 16, 17, 18, 19, 20, 28, 29, 37, 41, 48, 52, 54, 55, 56, 61, 62, 64, 65, 67, 76, 77, 79, 81, 125, 129, 134, 137, 138, 139, 143, 146, 149, 151, 154, 161, 170, 171, 172, 173, 174, 183, 185, 186, 192, 194, 212, 216, 218, 222, 228, 232, 235, 247, 287, 289, 291, 292, 296, 302, 303, 310, 312, 315, 320, 321, 322], "sess": [2, 16, 17, 22, 27, 28, 29, 32, 44, 45, 64, 65, 77, 78, 125, 129, 151, 152, 296, 304, 310, 312, 313, 314, 316, 317, 320, 322], "enabled_engin": [2, 131, 136, 296], "g": [2, 4, 6, 7, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 31, 32, 33, 35, 39, 41, 44, 45, 47, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 85, 132, 133, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 188, 189, 191, 192, 194, 195, 198, 199, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 282, 286, 287, 289, 291, 292, 295, 296, 298, 300, 301, 302, 303, 305, 306, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322], "custom": [2, 3, 4, 7, 8, 22, 28, 34, 35, 49, 58, 62, 66, 69, 71, 72, 137, 138, 141, 143, 145, 146, 147, 236, 238, 239, 286, 306], "command": [2, 4, 7, 16, 23, 27, 28, 30, 31, 34, 35, 39, 41, 47, 50, 60, 61, 76, 138, 302, 303, 310], "line": [2, 4, 6, 7, 17, 35, 37, 39, 47, 49, 60, 61, 68, 73, 137, 138, 289, 291, 302, 303, 310, 321], "releas": [2, 27, 30, 31, 34, 41, 55, 64, 74, 246, 249, 295, 296, 302, 315, 319], "replac": [2, 17, 19, 22, 23, 28, 49, 50, 54, 68, 74, 140, 141, 142, 151, 289, 296], "my": [2, 18, 28, 289, 292, 296, 302], "illustr": [2, 4, 28, 56, 59, 65, 69, 71, 140, 266], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 28, 29, 32, 44, 48, 49, 56, 62, 64, 66, 67, 137, 143, 283, 298, 304], "connect": [2, 6, 15, 17, 19, 20, 27, 36, 39, 41, 48, 49, 56, 58, 62, 64, 66, 67, 68, 69, 71, 77, 78, 79, 138, 139, 141, 143, 146, 152, 154, 158, 175, 190, 192, 194, 196, 200, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 217, 222, 223, 228, 229, 231, 236, 238, 239, 240, 241, 242, 243, 245, 254, 264, 265, 267, 269, 271, 288, 289, 296, 303, 304, 312, 320], "servic": [2, 27, 28, 37, 55, 58, 64, 66, 69, 71, 76, 296, 302, 303], "see": [2, 4, 19, 20, 27, 28, 29, 35, 36, 37, 41, 48, 52, 55, 56, 58, 72, 77, 78, 81, 129, 132, 133, 138, 139, 141, 146, 149, 151, 187, 197, 202, 208, 211, 212, 213, 214, 216, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 243, 244, 245, 246, 249, 254, 281, 284, 286, 289, 291, 295, 296, 300, 301, 302, 305], "detail": [2, 4, 6, 7, 9, 12, 14, 17, 20, 27, 28, 29, 32, 33, 37, 41, 43, 48, 52, 56, 58, 61, 62, 69, 71, 73, 76, 77, 78, 129, 131, 132, 133, 136, 138, 139, 141, 142, 145, 146, 147, 149, 246, 289, 296, 300, 302, 305, 306], "addr": [2, 28, 79, 296], "ip": [2, 28, 48, 50, 55, 296, 302, 320], "port": [2, 23, 28, 37, 41, 48, 50, 55, 76, 296, 302, 320, 322], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 28, 29, 30, 31, 35, 36, 37, 41, 44, 45, 48, 49, 51, 52, 54, 56, 59, 61, 64, 66, 67, 70, 71, 72, 73, 87, 138, 143, 145, 146, 147, 148, 151, 188, 211, 218, 220, 228, 289, 292, 295, 296, 301, 302, 304, 306], "would": [2, 4, 20, 28, 30, 35, 36, 39, 41, 50, 56, 66, 76, 77, 143, 149, 292, 295, 296, 302], "previou": [2, 9, 15, 19, 27, 28, 30, 32, 39, 56, 67, 77, 86, 137, 141, 143, 227, 302], "wcc_result": 2, "wcc": [2, 74, 77, 312, 317], "print": [2, 7, 16, 20, 28, 29, 32, 41, 44, 48, 52, 55, 56, 61, 62, 64, 65, 67, 77, 78, 140, 142, 143, 146, 149, 151, 152, 154, 167, 216, 284, 289, 292, 302, 310, 317, 320, 322], "to_datafram": [2, 7, 15, 44, 67, 78, 151, 295, 312], "id": [2, 4, 7, 9, 15, 17, 18, 29, 32, 40, 41, 44, 45, 48, 49, 50, 59, 62, 67, 70, 71, 74, 76, 77, 78, 79, 107, 113, 115, 137, 138, 139, 140, 141, 142, 143, 146, 147, 149, 150, 151, 153, 246, 247, 286, 289, 292, 295, 296, 302, 303, 310, 312, 313, 315, 316, 320, 321, 322], "r": [2, 6, 7, 15, 16, 17, 22, 30, 32, 34, 44, 48, 67, 68, 71, 77, 78, 189, 199, 206, 212, 216, 228, 236, 245, 277, 282, 295, 296, 302, 312, 316, 317], "tip": [2, 274], "encount": [2, 36, 41, 69, 87], "fail": [2, 36, 41, 49, 54, 71, 154, 289, 302], "project": [2, 4, 7, 15, 17, 23, 32, 36, 49, 67, 68, 70, 76, 77, 78, 112, 144, 151, 296, 302, 312, 316, 317, 320], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 29, 31, 32, 41, 47, 49, 51, 52, 54, 56, 61, 66, 67, 70, 77, 78, 112, 137, 139, 152, 154, 218, 220, 223, 224, 246, 247, 248, 249, 251, 263, 281, 289, 295, 302, 312, 315, 316, 320], "empti": [2, 19, 28, 39, 40, 54, 56, 77, 79, 171, 195, 198, 228, 229, 267, 283, 289, 292, 302], "load": [2, 4, 7, 10, 12, 15, 16, 17, 18, 19, 20, 22, 23, 28, 32, 41, 44, 48, 49, 50, 52, 55, 61, 67, 68, 69, 71, 74, 75, 76, 77, 85, 87, 89, 120, 137, 139, 148, 149, 151, 296, 301], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 32, 41, 44, 52, 56, 61, 64, 65, 67, 71, 74, 77, 78, 137, 143, 149, 296, 312, 314, 316, 320, 322], "load_modern_graph": [2, 7, 29, 32, 52, 67, 77, 152], "modern": [2, 6, 7, 32, 48, 50, 52, 56, 58, 67, 68, 69, 298, 302, 303], "current": [2, 7, 11, 12, 16, 17, 22, 27, 28, 31, 36, 44, 48, 49, 51, 54, 55, 56, 58, 62, 64, 67, 69, 70, 72, 77, 79, 130, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 151, 281, 284, 289, 296, 301, 302, 312, 319], "e": [2, 4, 6, 9, 10, 12, 14, 17, 18, 19, 20, 22, 23, 31, 33, 40, 44, 50, 51, 56, 57, 58, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 77, 78, 87, 139, 140, 141, 142, 143, 146, 149, 151, 152, 153, 154, 190, 208, 218, 220, 222, 223, 225, 226, 227, 230, 235, 236, 243, 244, 245, 246, 249, 251, 267, 272, 278, 280, 289, 291, 292, 295, 296, 298, 300, 301, 303, 305, 306, 312, 316, 319, 320, 322], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 29, 30, 32, 48, 49, 50, 58, 59, 62, 67, 69, 70, 73, 77, 85, 138, 139, 141, 143, 148, 149, 151, 154, 157, 190, 196, 200, 201, 203, 220, 283, 289, 291, 293, 295, 296, 300, 302, 304, 312, 313, 316, 317, 320], "store": [2, 10, 12, 16, 17, 33, 41, 45, 47, 48, 54, 55, 56, 58, 66, 68, 69, 72, 73, 78, 79, 92, 93, 110, 118, 119, 139, 145, 151, 152, 208, 213, 236, 237, 238, 239, 240, 289, 291, 296, 298, 300, 301, 303, 310, 312, 315], "pod": [2, 27, 28, 29, 37, 39, 41, 44, 48, 64, 296, 302, 310, 313, 315, 316, 322], "elimin": [2, 6, 14, 139], "extran": 2, "resourc": [2, 27, 28, 32, 37, 41, 44, 55, 64, 66, 73, 77, 85, 208, 241, 296, 302, 305, 315], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 15, 17, 20, 30, 31, 34, 36, 41, 44, 45, 49, 51, 52, 54, 56, 59, 62, 64, 66, 67, 71, 73, 77, 81, 95, 137, 138, 139, 141, 142, 146, 147, 148, 149, 150, 187, 235, 236, 240, 289, 296, 301, 302, 305, 319], "equival": [2, 20, 41, 51, 54, 56, 143, 208, 245, 289], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 33, 41, 52, 54, 55, 56, 59, 66, 68, 71, 73, 76, 143, 147, 154, 187, 188, 195, 198, 218, 220, 225, 236, 237, 238, 239, 240, 248, 284, 287, 288, 289, 290, 291, 294, 300, 301, 306, 312], "when": [2, 4, 6, 9, 10, 20, 23, 24, 27, 28, 30, 36, 41, 44, 45, 48, 49, 54, 55, 56, 59, 62, 64, 66, 68, 69, 71, 73, 74, 77, 78, 79, 87, 123, 129, 138, 139, 140, 141, 142, 143, 146, 147, 148, 150, 151, 153, 154, 198, 208, 228, 236, 237, 238, 239, 245, 289, 291, 292, 296, 298, 300, 301, 302, 304, 310], "close": [2, 6, 27, 28, 29, 32, 55, 62, 64, 66, 77, 139, 149, 152, 291, 296, 302, 316], "free": [2, 9, 36, 41, 62, 73, 229, 236, 246, 249, 251, 282, 288, 296], "delet": [2, 9, 27, 28, 29, 32, 41, 108, 148, 296, 298, 302, 315], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 33, 36, 48, 49, 52, 55, 56, 58, 66, 68, 69, 70, 71, 78, 110, 138, 150, 153, 289, 291, 301], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 29, 33, 37, 39, 49, 51, 56, 58, 59, 66, 67, 68, 69, 71, 72, 98, 151, 254, 301, 306], "algorithm": [3, 4, 7, 8, 12, 14, 20, 24, 29, 41, 44, 45, 49, 57, 59, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 81, 139, 142, 143, 145, 151, 199, 208, 211, 212, 220, 221, 222, 223, 224, 228, 229, 230, 231, 236, 241, 242, 245, 246, 248, 249, 272, 281, 286, 289, 290, 292, 294, 295, 305], "deriv": [3, 12, 33, 67, 70, 76, 78, 151, 154, 298], "grape": [3, 4, 15, 16, 22, 23, 33, 47, 57, 66, 72, 76, 85, 298, 301, 303, 304, 305, 306, 312, 318], "system": [3, 6, 8, 9, 12, 24, 29, 30, 32, 33, 35, 41, 44, 48, 49, 51, 52, 55, 56, 57, 58, 61, 66, 68, 69, 71, 72, 74, 138, 139, 144, 147, 286, 288, 298, 300, 301, 302, 304, 306, 312, 320], "sigmod": [3, 12, 14, 24, 33, 66, 312, 318], "2017": [3, 12, 14, 33, 66, 246, 247, 312], "further": [3, 6, 10, 14, 20, 27, 29, 33, 44, 50, 51, 54, 55, 56, 67, 68, 78, 139, 151, 152, 167, 298, 301], "enhanc": [3, 4, 9], "introduc": [3, 6, 10, 19, 20, 24, 47, 49, 54, 55, 56, 57, 59, 66, 68, 70, 73, 137, 140, 141, 143, 145, 154, 266, 288, 301, 306], "lot": [3, 36, 44, 52, 56, 57, 306], "new": [3, 4, 6, 9, 12, 14, 17, 20, 23, 29, 32, 33, 36, 49, 52, 56, 60, 66, 67, 68, 76, 79, 86, 87, 130, 148, 151, 152, 154, 161, 167, 208, 220, 229, 231, 251, 280, 287, 289, 296, 298, 300, 301, 302, 304, 316], "featur": [3, 6, 9, 12, 23, 31, 33, 57, 59, 61, 64, 65, 66, 67, 70, 71, 72, 73, 76, 81, 137, 138, 145, 149, 151, 289, 296, 301, 306, 316, 321], "type": [3, 4, 6, 9, 12, 15, 16, 18, 19, 20, 27, 28, 29, 32, 33, 35, 36, 37, 44, 45, 48, 49, 50, 51, 54, 55, 56, 59, 62, 64, 65, 66, 67, 69, 70, 71, 74, 76, 77, 78, 84, 85, 87, 88, 92, 93, 96, 97, 100, 101, 104, 105, 107, 108, 109, 110, 112, 113, 115, 118, 119, 123, 129, 132, 133, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 159, 160, 163, 165, 168, 169, 171, 173, 174, 177, 178, 179, 182, 183, 184, 187, 188, 189, 191, 192, 194, 195, 196, 198, 199, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 296, 298, 300, 301, 302, 304, 313, 316, 321], "storag": [3, 9, 41, 49, 50, 51, 56, 68, 71, 73, 115, 139, 151, 300, 302, 303], "languag": [3, 12, 16, 34, 44, 49, 52, 54, 55, 56, 58, 59, 62, 66, 67, 68, 69, 70, 73, 81, 106, 152, 301, 302, 306], "pattern": [3, 6, 12, 23, 49, 50, 51, 54, 58, 62, 66, 69, 73, 77, 142, 147, 302], "better": [3, 8, 12, 20, 24, 28, 33, 48, 49, 56, 57, 71, 73, 296, 302, 306], "integr": [3, 4, 9, 12, 23, 33, 49, 57, 66, 68, 72, 73, 282, 301, 302, 304, 306], "big": [3, 6, 12, 36, 57, 68, 306, 319], "overview": [3, 23, 33, 56, 67, 298], "architectur": [3, 9, 52, 66, 71, 77], "kei": [3, 4, 20, 27, 48, 54, 55, 56, 68, 71, 72, 77, 78, 79, 112, 113, 114, 123, 131, 140, 143, 149, 151, 154, 183, 232, 236, 237, 238, 239, 287, 289, 291, 292, 295, 301, 302, 312, 322], "concept": [3, 68, 71, 137, 138], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 33, 57, 58, 66, 68, 69, 306], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 33, 55, 59, 68, 76, 306], "compat": [3, 7, 12, 15, 19, 20, 23, 33, 41, 44, 58, 59, 61, 62, 64, 65, 67, 71, 72, 75, 77, 145, 295, 298, 300, 316], "tune": [3, 44, 45, 66], "guid": [4, 7, 9, 16, 27, 28, 31, 36, 39, 47, 48, 52, 54, 55, 61, 64, 65, 67, 81, 316], "code": [4, 6, 8, 14, 15, 16, 18, 28, 30, 31, 33, 35, 47, 49, 50, 56, 60, 66, 67, 68, 73, 74, 76, 77, 79, 84, 137, 138, 139, 140, 143, 144, 149, 208, 250, 293, 301, 302, 304], "organ": [4, 54, 56, 58, 59, 71, 75, 137, 139, 141, 145, 146, 225, 227, 266], "identifi": [4, 9, 24, 51, 54, 55, 56, 66, 67, 69, 77, 128, 216, 283, 286, 289, 296, 302, 322], "simplic": [4, 9], "suggest": [4, 49, 56, 68, 208], "prebuilt": [4, 39, 50], "docker": [4, 27, 31, 32, 35, 37, 39, 41, 50, 58, 302, 313, 316, 318, 319], "imag": [4, 28, 35, 37, 41, 50, 58, 60, 74, 140, 296], "necessari": [4, 6, 23, 27, 36, 39, 45, 50, 55, 88, 96, 101, 138, 139, 141, 143, 151, 301, 302, 310], "depend": [4, 17, 22, 27, 29, 34, 35, 39, 41, 50, 56, 60, 61, 68, 71, 77, 143, 211, 216, 302, 312], "shm": [4, 31, 39, 50, 60, 314], "size": [4, 6, 10, 16, 17, 23, 24, 31, 39, 40, 41, 45, 50, 55, 59, 60, 62, 71, 74, 79, 138, 140, 141, 143, 148, 150, 194, 195, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 220, 231, 240, 244, 246, 289, 296, 301, 302, 303, 314], "4096m": [4, 31, 39, 50, 60], "registri": [4, 27, 31, 39, 50, 60, 144, 296, 302, 314], "cn": [4, 23, 27, 28, 30, 31, 39, 50, 60, 144, 296, 302, 313, 314, 322], "hongkong": [4, 27, 31, 39, 50, 60, 296, 302, 314], "aliyunc": [4, 23, 27, 28, 30, 31, 39, 50, 60, 144, 296, 302, 313, 314, 322], "com": [4, 7, 17, 19, 22, 23, 27, 28, 29, 30, 31, 34, 39, 50, 52, 60, 61, 68, 69, 74, 77, 81, 144, 147, 154, 241, 250, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 269, 274, 296, 301, 302, 312, 313, 314, 315, 322], "latest": [4, 14, 31, 36, 39, 50, 60, 61, 296, 301, 302, 314, 319], "altern": [4, 217, 236, 240, 289, 301, 302], "manual": [4, 9, 27, 32, 41, 66, 73, 151, 302], "all": [4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 23, 24, 27, 28, 29, 34, 36, 41, 48, 49, 51, 52, 54, 55, 56, 60, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 79, 102, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 154, 158, 159, 161, 162, 166, 168, 183, 184, 188, 189, 192, 194, 195, 199, 208, 217, 226, 232, 246, 247, 249, 251, 275, 283, 284, 287, 289, 296, 300, 301, 302, 305, 310], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 29, 32, 33, 36, 39, 41, 50, 51, 52, 62, 64, 67, 137, 138, 139, 141, 142, 143, 144, 147, 149, 300, 302, 306, 316], "environ": [4, 11, 19, 20, 23, 24, 27, 28, 32, 36, 41, 44, 47, 52, 58, 64, 67, 68, 75, 77, 81, 144, 148, 154, 296, 301, 302, 303, 310, 315, 319], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 28, 31, 32, 33, 44, 51, 54, 59, 68, 69, 71, 77, 78, 79, 89, 137, 138, 139, 140, 147, 148, 149, 154, 251, 262, 281, 289, 293, 295, 296, 298, 301, 302, 303, 310, 312], "clone": [4, 22, 28, 29, 30, 31, 35, 36, 50, 81, 144, 302, 314], "repositori": [4, 17, 28, 35, 36, 48, 81, 296, 302], "enter": [4, 49, 55], "analatical_engin": 4, "directori": [4, 22, 27, 29, 30, 31, 32, 35, 41, 55, 58, 76, 80, 82, 137, 148, 296, 300, 310, 313, 315, 316], "git": [4, 22, 28, 29, 30, 31, 34, 36, 50, 81, 147, 301, 314], "http": [4, 7, 19, 22, 23, 27, 28, 29, 30, 31, 34, 41, 50, 52, 55, 61, 64, 65, 67, 68, 69, 77, 81, 144, 147, 154, 208, 212, 213, 214, 228, 231, 238, 239, 241, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 273, 274, 275, 276, 281, 296, 301, 302, 312, 313, 314, 315, 316, 320, 322], "github": [4, 22, 28, 29, 30, 31, 34, 50, 68, 69, 77, 81, 144, 147, 239, 296, 301, 302, 312, 314, 322], "alibaba": [4, 17, 22, 23, 28, 30, 31, 50, 58, 66, 68, 71, 72, 81, 144, 147, 302, 312, 314, 322], "cd": [4, 22, 28, 30, 31, 34, 50, 55, 81, 144, 147, 149, 302, 310, 312, 314, 320], "sinc": [4, 6, 23, 24, 28, 29, 49, 56, 60, 64, 66, 74, 87, 139, 143, 151, 187, 188, 218, 220, 267, 284, 291, 295, 301, 302], "inherit": [4, 6, 9, 16, 49, 68, 76, 137, 147], "libgrap": [4, 16, 30, 33, 68, 81], "lite": [4, 16, 30, 33, 68, 81], "note": [4, 14, 20, 27, 28, 49, 56, 59, 64, 65, 67, 68, 69, 77, 78, 79, 87, 128, 130, 139, 143, 151, 154, 163, 164, 167, 171, 184, 185, 186, 187, 188, 189, 195, 196, 201, 204, 206, 208, 209, 210, 211, 213, 215, 217, 218, 220, 221, 222, 223, 224, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 266, 281, 282, 283, 284, 286, 289, 291, 292, 295, 296, 300, 302, 316, 322], "core": [4, 6, 12, 33, 41, 49, 52, 66, 67, 68, 77, 81, 149, 154, 296, 316], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 44, 49, 55, 56, 65, 67, 68, 69, 70, 71, 77, 138, 139, 140, 151, 199, 218, 266, 281, 283, 289, 290, 300, 301, 302, 305], "partition": [4, 40, 147], "worker": [4, 9, 14, 23, 33, 50, 62, 64, 139, 142, 149, 151, 296], "between": [4, 6, 9, 10, 12, 18, 19, 41, 47, 49, 56, 59, 69, 71, 76, 77, 138, 139, 141, 143, 149, 154, 211, 212, 213, 216, 222, 228, 229, 231, 235, 236, 237, 238, 240, 243, 245, 246, 247, 249, 254, 284, 286, 289, 301, 302], "heavili": 4, "reus": [4, 29, 59, 62, 68, 77, 149, 151, 296, 298], "want": [4, 6, 7, 18, 20, 22, 27, 28, 29, 31, 32, 51, 52, 56, 61, 72, 81, 87, 131, 136, 147, 151, 198, 232, 289, 295, 296, 298, 302], "fulli": [4, 59, 62, 77, 87, 231, 301], "analytci": 4, "recomman": 4, "locat": [4, 23, 27, 35, 48, 50, 56, 60, 70, 80, 82, 139, 140, 151, 302, 303], "analytical_engin": [4, 15, 30, 35, 81, 312], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 35, 36, 39, 41, 44, 48, 49, 52, 56, 58, 60, 66, 67, 71, 72, 73, 75, 76, 77, 138, 143, 147, 149, 151, 208, 218, 220, 228, 289, 295, 296, 298, 301, 302, 303, 322], "therebi": [4, 51], "fledg": [4, 12, 66], "coordin": [4, 15, 27, 28, 34, 39, 52, 64, 76, 102, 151, 201, 296, 302, 310, 313, 314, 316], "while": [4, 6, 12, 19, 20, 28, 33, 44, 48, 51, 54, 55, 56, 59, 66, 68, 69, 70, 72, 73, 138, 143, 149, 185, 186, 246, 249, 251, 283, 289, 298, 301, 302, 310], "": [4, 6, 9, 14, 15, 17, 18, 19, 20, 23, 24, 27, 28, 32, 34, 36, 39, 41, 48, 50, 54, 55, 56, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 77, 87, 104, 105, 123, 137, 139, 141, 143, 146, 148, 150, 151, 154, 190, 201, 208, 211, 213, 216, 220, 223, 225, 226, 227, 243, 251, 252, 253, 276, 279, 281, 289, 295, 296, 298, 300, 301, 302, 303, 320, 321], "onli": [4, 6, 9, 12, 14, 15, 17, 18, 20, 22, 23, 27, 28, 29, 33, 35, 44, 48, 49, 51, 52, 54, 56, 58, 59, 61, 62, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 137, 138, 139, 141, 142, 143, 144, 151, 154, 173, 174, 183, 209, 210, 235, 236, 240, 248, 261, 282, 283, 289, 295, 296, 301, 302, 303, 306], "ship": 4, "6": [4, 10, 17, 18, 22, 30, 44, 52, 54, 55, 56, 67, 74, 77, 138, 143, 149, 154, 173, 192, 221, 222, 223, 240, 254, 256, 262, 263, 266, 269, 273, 274, 282, 284, 289, 302, 304, 312, 315, 316, 320], "ldbc": [4, 33, 48, 50, 51, 52, 53, 58, 69, 73, 74, 317, 322], "graphalyt": [4, 73], "benchmark": [4, 33, 51, 56, 58, 69, 71, 73, 208], "flatten": 4, "thu": [4, 6, 12, 16, 20, 27, 33, 35, 41, 44, 56, 64, 71, 77, 142, 184, 192, 289, 301], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 28, 39, 44, 48, 49, 50, 52, 54, 56, 58, 67, 68, 70, 71, 76, 77, 78, 106, 107, 133, 143, 147, 151, 152, 154, 249, 293, 296, 298, 302, 304, 310, 312, 316, 320], "written": [4, 12, 20, 56, 66, 68, 106, 152, 267, 298, 301, 304, 312], "giraph": [4, 7, 8, 12, 17, 23, 24, 57, 73, 306], "graphx": [4, 7, 8, 12, 17, 24, 57, 73, 306], "app": [4, 15, 16, 17, 18, 32, 78, 79, 81, 86, 89, 114, 120, 123, 138, 151, 294, 295, 301, 312], "librari": [4, 6, 12, 15, 16, 30, 31, 32, 49, 50, 66, 76, 77, 81, 302], "specif": [4, 6, 9, 12, 14, 15, 16, 20, 24, 32, 33, 36, 37, 39, 41, 44, 48, 49, 51, 52, 56, 58, 65, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 79, 141, 142, 143, 146, 149, 151, 208, 236, 240, 289, 295, 298, 300, 301], "serv": [4, 27, 41, 58, 67, 68, 71, 139, 302], "layer": [4, 6, 49, 59, 62, 68, 71, 73, 137, 138, 141, 145, 149, 321], "cuda": [4, 74], "suit": [4, 35, 44, 50, 59, 71], "gpu": [4, 68, 144], "acceler": [4, 27, 301], "fragment": [4, 10, 12, 14, 16, 17, 18, 40, 49, 69, 71, 79, 113, 151, 152, 298, 303, 306, 312], "extend": [4, 9, 17, 23, 51, 54, 55, 56, 73, 78, 138, 146, 147, 235, 301, 312], "loader": [4, 22, 50, 76, 87, 98, 294, 303, 317, 318], "mutabl": [4, 68], "io": [4, 27, 32, 39, 68, 69, 77, 148, 151, 239, 296, 302, 305], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 33, 44, 58, 66, 68, 70, 76, 79, 139, 218, 220, 257, 289, 292, 302, 312], "sub": [4, 12, 14, 18, 56, 58, 78, 141, 143, 301, 306], "helper": 4, "thread": [4, 6, 30, 48, 50, 59, 74, 150], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 33, 35, 36, 37, 41, 49, 56, 62, 71, 76, 79, 150, 301, 312], "buffer": [4, 148], "sync": [4, 79, 148, 301], "serial": [4, 54, 55, 76, 151, 296, 301, 320], "vertex_map": [4, 129, 151], "some": [4, 6, 10, 12, 17, 20, 23, 28, 30, 33, 35, 36, 48, 49, 51, 52, 54, 55, 59, 66, 69, 71, 77, 137, 138, 139, 145, 147, 149, 150, 151, 152, 199, 208, 218, 220, 223, 242, 283, 288, 289, 301, 302, 303], "map": [4, 6, 51, 54, 55, 56, 69, 76, 138, 147, 151, 281, 296, 302, 303, 317, 320], "intern": [4, 51, 69, 189, 312, 314], "frame": [4, 71], "wrap": [4, 68, 76, 81], "becaus": [4, 36, 49, 55, 56, 71, 137, 140, 154, 284, 301, 302], "reli": [4, 9, 19, 144, 296, 301], "templat": [4, 9, 15, 40, 76, 301], "inadequ": 4, "usual": [4, 9, 19, 27, 37, 41, 44, 49, 54, 56, 59, 62, 63, 64, 71, 143, 147, 150, 217, 240, 283, 289, 301, 303, 304], "multipl": [4, 6, 12, 14, 17, 28, 29, 39, 48, 49, 54, 55, 58, 59, 66, 67, 68, 69, 71, 72, 73, 77, 78, 79, 138, 139, 143, 154, 251, 289, 295, 300, 301, 304, 310], "label": [4, 6, 7, 15, 20, 32, 40, 48, 51, 55, 61, 65, 66, 67, 69, 71, 76, 77, 78, 79, 87, 137, 140, 143, 149, 151, 154, 189, 193, 200, 204, 205, 207, 217, 218, 220, 221, 222, 223, 224, 266, 267, 289, 291, 292, 295, 296, 300, 302, 303, 316, 317, 320, 321], "cannot": [4, 27, 41, 54, 56, 59, 71, 73, 76, 77, 139, 151, 208, 247, 248, 296, 302, 304, 315], "determin": [4, 36, 49, 54, 56, 59, 62, 69, 70, 76, 77, 139, 143, 234, 237, 238, 239, 296], "reason": [4, 41, 51, 54, 59, 138, 139, 269], "jit": 4, "technologi": [4, 47, 49, 72], "compil": [4, 15, 30, 31, 33, 41, 49, 50, 55, 66, 77, 89, 301, 302, 304, 310], "associ": [4, 6, 9, 28, 54, 71, 223, 235, 281, 283, 289, 296, 301, 302], "runtim": [4, 6, 17, 23, 30, 41, 49, 66, 68, 69, 70, 76, 77, 81, 301, 314, 315], "These": [4, 9, 15, 20, 24, 48, 59, 66, 67, 69, 70, 71, 72, 143, 149, 301], "wrapper": [4, 55, 58, 70, 76, 89, 95, 151, 152, 301], "facilit": [4, 20, 50, 58, 59, 62, 71, 138, 301, 302], "task": [4, 6, 7, 14, 33, 39, 49, 52, 56, 58, 59, 61, 63, 64, 65, 66, 68, 69, 71, 138, 149, 301], "pregel": [4, 8, 12, 17, 22, 33, 58, 66, 69, 294, 306, 316, 318], "api": [4, 8, 15, 16, 18, 22, 24, 29, 33, 44, 47, 58, 66, 72, 75, 81, 87, 137, 139, 141, 142, 143, 147, 153, 289, 301, 303, 312, 323], "jar": [4, 8, 22, 23, 34, 77, 302, 312], "read": [4, 8, 20, 24, 36, 44, 52, 53, 63, 66, 68, 137, 138, 143, 148, 149, 151, 187, 188, 287, 289, 290, 294, 296, 298, 300, 302, 320], "about": [4, 7, 12, 14, 17, 33, 36, 37, 48, 50, 52, 56, 60, 61, 66, 71, 72, 76, 77, 143, 147, 148, 295, 296, 300, 305, 312], "cmake": [4, 30, 31, 35, 41, 144], "script": [4, 31, 73, 74, 106, 107, 137, 138, 149, 152, 313, 319], "configur": [4, 15, 16, 17, 23, 27, 30, 34, 36, 37, 41, 50, 54, 55, 56, 64, 66, 76, 77, 88, 89, 95, 96, 101, 128, 148, 149, 151, 208, 218, 220, 296, 298, 303], "figur": [4, 6, 9, 12, 24, 27, 33, 49, 56, 59, 62, 67, 69, 70, 71, 139, 141, 272, 298], "abov": [4, 6, 7, 9, 14, 15, 16, 19, 22, 27, 29, 31, 32, 44, 48, 51, 52, 56, 57, 61, 69, 70, 137, 138, 139, 143, 147, 192, 208, 228, 251, 285, 295, 302, 304, 306, 310], "well": [4, 6, 8, 9, 12, 18, 20, 27, 28, 33, 49, 55, 58, 59, 67, 68, 69, 71, 75, 143, 151, 159, 192, 240, 289, 298, 302, 305, 306, 310], "thei": [4, 6, 20, 24, 27, 30, 44, 49, 56, 58, 64, 66, 69, 71, 73, 137, 138, 146, 151, 195, 203, 208, 236, 238, 239, 282, 283, 289, 295, 296, 298, 301, 302], "work": [4, 8, 11, 14, 18, 20, 31, 33, 35, 36, 39, 44, 48, 49, 52, 54, 58, 62, 66, 67, 68, 69, 71, 76, 78, 141, 143, 151, 288, 289, 295, 304], "partit": [4, 6, 9, 10, 12, 14, 15, 18, 24, 48, 49, 55, 62, 66, 69, 71, 77, 142, 147, 206, 211, 212, 213, 216, 247, 306], "object": [4, 15, 50, 52, 54, 55, 56, 59, 62, 66, 67, 69, 71, 74, 76, 88, 101, 115, 129, 138, 140, 141, 142, 143, 146, 149, 152, 153, 167, 187, 188, 246, 286, 289, 291, 292, 294, 295, 300, 302, 312, 322], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 54, 55, 56, 62, 71, 74, 79, 141, 142, 143, 146, 147, 292, 305, 320], "respons": [4, 9, 12, 16, 27, 33, 35, 36, 41, 49, 66, 76, 147, 150, 296, 298], "state": [4, 6, 9, 10, 12, 24, 27, 33, 49, 58, 69, 70, 72, 74, 148, 151, 208, 211, 212, 213, 214, 216, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 243, 244, 245, 249, 281, 284, 286], "synchron": [4, 6, 10, 12, 14, 15, 66, 301], "explicitli": [4, 76, 139, 208, 296, 302], "implicitli": [4, 87], "main": [4, 6, 33, 36, 49, 51, 55, 56, 73, 137, 146, 149, 154, 296, 302, 321, 322], "logic": [4, 6, 9, 14, 16, 17, 49, 54, 56, 58, 68, 74, 140, 300, 301, 302, 310, 312], "access": [4, 6, 12, 14, 27, 28, 29, 30, 37, 41, 48, 50, 55, 56, 59, 62, 66, 68, 69, 70, 71, 138, 139, 140, 141, 142, 143, 148, 149, 151, 289, 292, 296, 298, 300, 301, 302, 303, 310, 322], "send": [4, 6, 10, 18, 24, 50, 69, 79, 301, 312], "receiv": [4, 6, 9, 14, 16, 17, 24, 36, 66, 69, 71, 79, 143, 147, 298, 312], "messagemanag": [4, 17, 312], "call": [4, 6, 12, 16, 17, 19, 24, 41, 51, 54, 55, 56, 62, 76, 79, 137, 139, 143, 146, 147, 151, 152, 184, 198, 199, 229, 240, 269, 281, 289, 292, 296, 300, 301, 302], "encourag": [4, 6, 15, 24, 36], "fork": 4, "repo": [4, 28, 50, 68, 302, 313, 314], "much": [4, 6, 19, 22, 41, 49, 52, 54, 56, 139, 143, 301], "easier": [4, 31, 35, 36, 54, 68, 69, 143, 296], "begin": [4, 15, 16, 29, 40, 44, 53, 56, 67, 78, 79, 228, 295, 301], "small": [4, 9, 11, 20, 44, 56, 69, 70, 73, 154, 209, 210, 236, 279, 290, 296, 302], "chang": [4, 9, 11, 12, 14, 20, 23, 32, 33, 35, 56, 66, 70, 71, 73, 74, 77, 94, 128, 138, 151, 154, 167, 289, 296, 302], "revis": [4, 14, 74], "ad": [4, 6, 9, 15, 17, 19, 28, 36, 58, 59, 71, 73, 74, 85, 86, 139, 151, 156, 157, 167, 225, 226, 227, 229, 283, 289, 298, 320, 322], "gradual": 4, "avoid": [4, 51, 55, 301], "larg": [4, 6, 7, 9, 11, 12, 14, 18, 20, 23, 27, 33, 36, 41, 44, 45, 48, 49, 52, 55, 56, 58, 59, 62, 63, 64, 66, 68, 72, 73, 77, 123, 138, 139, 141, 143, 145, 149, 150, 163, 187, 188, 208, 243, 301, 312], "singl": [4, 6, 7, 11, 14, 15, 20, 24, 27, 35, 39, 41, 48, 51, 54, 56, 60, 61, 63, 64, 66, 67, 69, 77, 78, 137, 151, 162, 169, 191, 195, 200, 210, 215, 232, 238, 283, 285, 289, 296, 300, 304], "commit": [4, 74, 298, 302], "cmakelist": 4, "txt": [4, 30, 34, 312], "artifact": [4, 17, 23, 28, 35, 50, 60], "grape_engin": [4, 113, 310], "togeth": [4, 9, 10, 20, 39, 49, 52, 56, 64, 66, 74, 143, 147, 190], "share": [4, 6, 30, 36, 56, 60, 66, 68, 69, 296, 301, 303, 314], "bunch": [4, 39, 73, 76], "binari": [4, 15, 27, 30, 71], "choos": [4, 6, 12, 22, 33, 39, 49, 54, 56, 58, 59, 66, 71, 137, 138, 228, 229, 267], "prefix": [4, 30, 35, 36, 41, 50, 60, 151, 283, 301, 320], "usr": [4, 302], "look": [4, 15, 18, 20, 27, 48, 52, 56, 81, 150, 295, 298, 302, 303], "file": [4, 15, 17, 22, 23, 28, 34, 36, 41, 47, 48, 50, 76, 77, 85, 110, 137, 138, 144, 149, 151, 187, 188, 239, 289, 291, 296, 298, 302, 303, 310, 312, 322], "investig": [4, 6], "ensur": [4, 6, 9, 34, 35, 36, 49, 51, 73, 296], "correct": [4, 6, 14, 37, 49, 143, 151, 154, 301], "unit": [4, 49, 56, 70, 147, 237, 238, 239, 302], "easili": [4, 12, 20, 22, 23, 24, 27, 28, 29, 33, 41, 48, 52, 56, 58, 66, 67, 68, 70, 71, 73, 143, 145, 301], "graphscope_hom": [4, 23, 314], "pwd": [4, 29, 149], "download": [4, 7, 17, 19, 22, 23, 27, 28, 29, 31, 34, 35, 52, 55, 60, 61, 74, 144, 149, 314], "tmp": [4, 18, 19, 41, 48, 50, 110, 115, 149, 296, 302, 310, 312, 315], "gstest": [4, 19, 22, 23, 29, 312, 314], "against": [4, 14, 36, 50, 77, 271], "compar": [4, 19, 49, 51, 54, 56, 69, 74, 76, 77, 140, 208, 295], "ground": [4, 71], "truth": [4, 71], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 31, 33, 41, 47, 48, 49, 52, 54, 55, 58, 59, 62, 63, 64, 66, 68, 69, 71, 72, 73, 77, 81, 137, 140, 142, 146, 148, 149, 153, 208, 211, 218, 220, 229, 236, 237, 238, 239, 240, 248, 302, 303], "broad": [6, 68], "spectrum": [6, 68, 154, 281], "central": [6, 15, 44, 58, 59, 67, 68, 71, 72, 77, 143, 154, 266], "match": [6, 15, 49, 50, 66, 68, 77, 188, 208, 216, 218, 220, 247, 283, 320], "mine": [6, 15, 66, 68, 69], "philosophi": [6, 24, 68], "step": [6, 9, 14, 15, 27, 28, 29, 30, 31, 32, 35, 36, 47, 48, 49, 50, 52, 55, 58, 59, 66, 67, 68, 70, 79, 137, 138, 139, 141, 143, 146, 149, 208, 216, 228, 281, 302, 310, 322], "stronger": [6, 68], "flexibl": [6, 12, 23, 56, 58, 66, 67, 68, 296, 300], "flow": [6, 68, 69, 137, 279], "oper": [6, 9, 12, 15, 29, 30, 35, 41, 44, 45, 47, 49, 51, 52, 54, 58, 59, 62, 66, 68, 69, 70, 71, 72, 77, 79, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 108, 109, 110, 112, 113, 116, 117, 118, 119, 138, 139, 140, 141, 142, 143, 145, 146, 148, 150, 151, 171, 250, 251, 289, 292, 294, 296, 298, 301, 302], "arbitrari": [6, 54, 56, 68, 141, 216, 220, 236, 237, 238, 239, 289, 292, 302, 320], "beyond": [6, 24, 68, 72, 249], "make": [6, 9, 14, 15, 16, 23, 27, 28, 29, 30, 31, 34, 35, 36, 39, 47, 48, 49, 50, 55, 56, 58, 60, 68, 69, 71, 74, 143, 144, 147, 149, 151, 167, 219, 283, 289, 296, 301, 302, 313, 314], "divers": [6, 10, 12, 33, 47, 49, 68, 69, 138, 298], "easi": [6, 7, 12, 44, 48, 49, 52, 55, 56, 58, 61, 62, 66, 68, 72, 138, 143, 147], "write": [6, 8, 9, 12, 15, 17, 22, 24, 33, 36, 41, 44, 55, 56, 58, 66, 67, 68, 69, 75, 79, 81, 137, 143, 151, 152, 291, 292, 298, 301, 302, 306, 312, 316], "few": [6, 28, 41, 48, 68, 301], "satisfactori": [6, 68, 71], "major": [6, 12, 14, 69, 76], "recent": [6, 141, 302], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 41, 49, 55, 59, 62, 66, 68, 69, 70, 71, 72, 73, 77, 78, 129, 141, 143, 145, 147, 151, 152, 293, 296, 298, 300, 312, 317, 322], "focu": [6, 39, 66, 70, 73, 147], "hand": [6, 29, 32, 49, 51, 54, 269], "point": [6, 14, 22, 36, 49, 54, 62, 69, 137, 192, 217, 246, 249, 289, 302, 303, 304], "breadth": [6, 77, 154], "first": [6, 14, 15, 16, 17, 19, 20, 24, 28, 34, 36, 41, 44, 49, 50, 52, 54, 56, 59, 63, 64, 67, 68, 70, 71, 77, 78, 137, 138, 143, 145, 147, 151, 154, 158, 188, 204, 207, 216, 229, 232, 243, 244, 245, 246, 247, 250, 283, 288, 289, 292, 295, 296, 298, 301, 302, 303, 304], "search": [6, 36, 47, 59, 66, 69, 71, 73, 77, 154, 318], "pagerank": [6, 8, 9, 17, 22, 32, 33, 44, 66, 69, 72, 74, 77, 78, 154, 292, 295, 312], "shortest": [6, 7, 19, 24, 49, 67, 69, 77, 154, 304], "leav": [6, 56, 151, 189, 199], "varieti": [6, 12, 33, 44, 66, 73], "suffer": [6, 44], "effici": [6, 9, 12, 16, 18, 23, 33, 41, 44, 47, 51, 55, 56, 58, 59, 62, 66, 67, 68, 69, 70, 71, 72, 73, 81, 141, 143, 145, 222, 243, 300, 301, 303, 305], "limit": [6, 9, 22, 41, 51, 55, 59, 69, 70, 71, 73, 74, 296, 315, 320], "known": [6, 8, 9, 24, 56, 69, 77, 171, 189, 192, 241, 242, 259, 283, 304], "phase": [6, 16, 23, 24, 138, 143], "propag": [6, 7, 9, 14, 35, 66, 67, 69, 71, 77, 143, 161, 251], "short": [6, 68, 73, 74, 169, 301, 302], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 29, 54, 56, 71, 148, 208, 231, 302, 320], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 28, 31, 33, 58, 59, 66, 69, 71, 73, 144, 147, 289, 296, 298, 302, 312, 313], "Such": [6, 70, 73, 110, 115, 248, 257], "abstract": [6, 44, 58, 62, 65, 66, 67, 68, 137, 138, 145, 147, 148, 303], "bring": [6, 39], "product": [6, 12, 31, 41, 62, 66, 70, 73, 79, 138, 139, 143, 320], "sacrific": 6, "almost": [6, 22, 56, 224, 301], "infeas": 6, "kind": [6, 9, 12, 15, 27, 32, 33, 41, 56, 67, 68, 73, 76, 78, 141, 143, 147, 148, 286, 295, 300, 302, 304, 305, 313, 315, 319], "At": [6, 12, 14, 15, 20, 33, 36, 49, 55, 56, 138, 148, 302, 304], "advanc": [6, 7, 15, 49, 61, 62, 68, 235], "pose": 6, "challeng": [6, 9, 43, 66, 301], "repres": [6, 9, 12, 15, 44, 49, 51, 56, 59, 61, 62, 65, 66, 67, 68, 69, 71, 74, 76, 77, 78, 85, 114, 138, 139, 140, 141, 143, 147, 149, 151, 195, 228, 236, 237, 238, 239, 240, 248, 255, 258, 262, 270, 279, 281, 283, 284, 289, 293, 296, 301, 302], "non": [6, 9, 27, 54, 73, 76, 79, 140, 178, 179, 199, 218, 220, 223, 247, 251, 258, 276, 289, 290], "ones": [6, 9, 72, 77, 145], "distil": 6, "critic": [6, 59, 77], "context": [6, 15, 17, 18, 20, 27, 30, 51, 68, 70, 77, 79, 84, 85, 86, 92, 93, 110, 115, 118, 119, 121, 130, 134, 147, 151, 152, 154, 279, 294, 296, 301, 312], "fall": 6, "meet": [6, 15, 18, 36, 44, 49, 52, 62, 66, 71, 141, 142, 208, 237, 238, 239, 304, 306], "therefor": [6, 12, 15, 44, 49, 51, 52, 54, 56, 59, 67, 137, 138, 143, 235, 301, 310], "fulfil": [6, 15, 18, 68], "ligra": 6, "By": [6, 17, 20, 29, 35, 41, 44, 51, 54, 55, 56, 61, 69, 71, 72, 138, 139, 154, 289, 298, 301, 310], "must": [6, 24, 27, 29, 36, 41, 48, 54, 56, 66, 76, 78, 87, 138, 139, 141, 142, 143, 151, 153, 154, 167, 206, 208, 216, 219, 229, 231, 233, 236, 238, 240, 248, 251, 287, 289, 291, 295, 301, 302], "race": 6, "schedul": [6, 23, 35, 66, 68, 296], "do": [6, 15, 16, 18, 20, 28, 29, 30, 32, 34, 39, 41, 45, 48, 49, 50, 51, 52, 55, 56, 76, 77, 78, 95, 113, 139, 151, 208, 220, 232, 236, 246, 249, 267, 283, 289, 292, 295, 296, 301, 306], "so": [6, 12, 36, 39, 41, 48, 49, 52, 55, 56, 59, 62, 64, 66, 68, 77, 81, 137, 143, 145, 164, 199, 204, 217, 218, 219, 222, 237, 238, 239, 250, 283, 289, 301, 302, 316], "middlewar": 6, "flashwar": 6, "hide": [6, 44], "automat": [6, 9, 12, 14, 33, 48, 49, 55, 58, 66, 69, 70, 71, 73, 78, 149, 151, 289, 302, 304, 305, 322], "adapt": [6, 22, 49, 71, 73, 74, 304, 305], "70": [6, 15, 320], "40": [6, 15, 74, 139, 140, 142, 216, 282], "commonli": [6, 54, 58, 62], "now": [6, 7, 20, 23, 27, 48, 50, 55, 56, 61, 77, 147, 220, 302, 304, 317], "succinct": [6, 55], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 33, 41, 44, 47, 49, 52, 55, 56, 57, 59, 62, 66, 69, 70, 71, 72, 73, 76, 81, 139, 140, 141, 143, 144, 145, 146, 289, 296, 306], "help": [6, 9, 12, 16, 17, 31, 36, 37, 54, 56, 69, 147, 151, 301, 303, 313], "evalu": [6, 14, 15, 16, 18, 36, 58, 67, 68, 71, 74, 76, 77, 78, 89, 114, 123, 125, 129, 132, 133, 151, 152, 296, 306, 320], "demonstr": [6, 16, 48, 49, 58, 63, 65, 66, 67, 69, 71, 73, 78, 137, 149, 151, 296, 301], "up": [6, 20, 23, 36, 54, 56, 58, 60, 62, 72, 79, 147, 150, 188, 192, 216, 283, 301, 302, 319], "92": [6, 154], "bulk": [6, 15], "bsp": [6, 15], "paradigm": [6, 15, 58, 62, 66, 137, 143], "primari": [6, 15, 51, 55, 66, 73, 302], "constitut": [6, 65], "superstep": [6, 16, 17, 24, 79], "vertexsubset": [6, 15], "indic": [6, 24, 37, 48, 56, 68, 69, 70, 74, 85, 138, 140, 143, 151, 195, 198, 208, 211, 212, 213, 214, 216, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 236, 237, 238, 239, 240, 243, 244, 245, 249, 279, 281, 284, 286, 291, 301], "maintain": [6, 10, 14, 34, 35, 51, 54, 66, 69, 70, 302], "onc": [6, 12, 15, 17, 20, 24, 27, 28, 29, 33, 35, 49, 50, 59, 77, 79, 139, 140, 143, 149, 151, 152, 154, 184, 289, 296, 302], "describ": [6, 27, 35, 36, 37, 41, 48, 50, 56, 59, 60, 66, 70, 71, 78, 138, 141, 143, 148, 149, 188, 192, 208, 209, 210, 213, 218, 220, 221, 246, 247, 260, 267, 269, 283, 285, 286, 300, 301, 302, 310, 315], "vsize": [6, 15], "size_t": [6, 40, 76, 79, 148, 298, 301], "vertexmap": [6, 15, 40], "condit": [6, 9, 14, 24, 27, 37, 49, 56, 62, 68, 74, 208, 237, 238, 239, 247, 248, 301], "f": [6, 20, 32, 48, 50, 61, 67, 143, 154, 241, 242, 288, 302, 310, 316], "output": [6, 14, 17, 24, 27, 28, 29, 33, 37, 44, 50, 51, 54, 56, 59, 61, 62, 65, 66, 67, 71, 74, 76, 107, 115, 123, 137, 143, 145, 149, 151, 152, 236, 238, 240, 281, 293, 295, 302, 312, 313, 316, 321], "form": [6, 20, 49, 51, 54, 56, 59, 62, 70, 71, 77, 137, 139, 140, 143, 190, 210, 240, 255, 257, 260, 263, 267, 289, 295], "special": [6, 20, 56, 66, 138, 257, 273, 283, 306], "m": [6, 7, 9, 18, 20, 23, 27, 29, 30, 31, 34, 48, 49, 52, 56, 61, 67, 77, 78, 154, 164, 195, 199, 201, 212, 218, 220, 222, 224, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 268, 277, 281, 282, 286, 289, 312], "omit": [6, 78, 162, 303, 322], "filter": [6, 15, 23, 45, 49, 55, 70, 77, 78, 281, 295, 301, 320], "semant": [6, 49, 62, 142, 301], "unchang": 6, "edgemap": [6, 15], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 28, 32, 35, 36, 37, 40, 41, 48, 50, 52, 56, 59, 60, 62, 67, 69, 70, 71, 73, 76, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 142, 143, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 293, 295, 296, 298, 300, 301, 302, 304, 312, 313, 314, 320, 322], "satisfi": [6, 9, 24, 52, 56, 70, 73, 77, 81, 148, 154, 206, 236, 240, 247, 248, 306], "h": [6, 9, 15, 16, 20, 35, 39, 59, 60, 74, 85, 154, 165, 168, 189, 216, 220, 236, 281, 288, 289, 301, 313, 318], "conduct": [6, 15, 56, 74, 143], "allow": [6, 11, 12, 20, 22, 24, 27, 29, 35, 44, 45, 48, 49, 51, 54, 55, 56, 57, 58, 62, 66, 67, 69, 70, 71, 72, 73, 138, 143, 213, 218, 220, 223, 228, 231, 236, 281, 289, 298, 301, 306], "dynam": [6, 12, 33, 49, 58, 66, 68, 69, 71, 77, 88, 101, 209, 210, 292, 298, 302], "even": [6, 8, 20, 49, 56, 68, 69, 145, 151, 154, 218, 228, 246, 248, 249, 289, 301], "virtual": [6, 9, 23, 52, 67, 76, 147, 148], "gener": [6, 9, 14, 17, 27, 33, 39, 44, 49, 55, 56, 59, 62, 66, 67, 68, 69, 71, 77, 86, 137, 138, 139, 143, 149, 151, 153, 154, 289, 290, 294, 296, 298, 300, 301, 302, 303, 304, 310], "index": [6, 12, 30, 40, 47, 55, 59, 62, 71, 76, 77, 78, 139, 140, 148, 151, 153, 154, 163, 187, 188, 218, 220, 221, 222, 224, 301, 318, 322], "pre": [6, 27, 28, 31, 41, 49, 56, 61, 65, 67, 70, 296, 315], "conveni": [6, 28, 41, 48, 56, 59, 68, 143, 287, 289], "revers": [6, 20, 56, 94, 97, 153, 154, 232, 240, 289], "exchang": [6, 14], "chosen": [6, 218, 225, 226, 227, 228, 229, 240, 244, 284], "temporari": 6, "sequenti": [6, 12, 14, 18, 33, 35, 66, 187, 188, 224, 301, 306, 312], "pull": [6, 12, 14, 27, 28, 31, 33, 37, 41, 48, 69, 144, 147, 296, 302, 314], "mode": [6, 15, 27, 31, 35, 41, 55, 63, 76, 77, 78, 129, 133, 137, 141, 147, 149, 151, 152, 291, 296, 306, 310, 322], "push": [6, 12, 33, 36, 49, 69, 147], "anoth": [6, 9, 10, 20, 35, 49, 54, 56, 66, 67, 71, 79, 218, 251, 289, 301, 304, 305], "final": [6, 9, 14, 17, 19, 24, 49, 56, 59, 64, 66, 70, 76, 137, 143, 145, 231, 251, 289, 303], "reduc": [6, 9, 14, 15, 17, 49, 55, 62, 138, 141, 237, 238, 239, 289, 302], "commut": 6, "alwai": [6, 56, 64, 78, 185, 186, 225, 227, 246, 249, 283, 301], "default": [6, 15, 20, 23, 28, 29, 31, 35, 39, 41, 44, 48, 50, 51, 54, 56, 61, 64, 74, 76, 77, 78, 79, 96, 102, 107, 129, 130, 134, 138, 139, 143, 150, 151, 153, 154, 156, 157, 158, 161, 183, 185, 186, 189, 191, 192, 194, 196, 198, 199, 201, 203, 204, 207, 208, 211, 212, 213, 214, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 281, 282, 284, 286, 287, 289, 291, 292, 296, 298, 302, 310, 322], "ctrue": 6, "doe": [6, 11, 12, 20, 33, 36, 45, 54, 62, 68, 70, 73, 140, 143, 148, 154, 173, 174, 216, 218, 220, 235, 246, 289, 291, 296, 301], "sometim": [6, 27, 56, 199, 259], "similarli": [6, 19, 20, 56, 69, 154, 192, 218, 220, 236, 239, 246, 289, 310], "suppli": [6, 41, 55, 238], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 48, 56, 77, 141, 143, 146, 149, 154, 164, 209, 210, 218, 220, 221, 223, 224, 225, 227, 232, 236, 237, 238, 239, 240, 243, 280, 289, 291, 296], "auxiliari": [6, 15, 16, 56], "union": [6, 151, 217, 317], "minu": [6, 192], "intersect": [6, 70, 290], "add": [6, 15, 19, 20, 23, 28, 32, 36, 41, 56, 67, 76, 79, 86, 87, 96, 138, 149, 151, 156, 157, 158, 208, 215, 228, 246, 249, 251, 267, 289, 292, 296, 301, 302, 313, 316, 317, 322], "getv": [6, 49], "besid": [6, 10, 148, 149], "combin": [6, 14, 18, 33, 47, 49, 56, 58, 66, 67, 137, 138, 139, 143, 289, 296, 305, 312], "primit": [6, 68], "natur": [6, 12, 24, 44, 55, 56], "multi": [6, 30, 47, 51, 56, 58, 59, 62, 66, 68, 70, 71, 72, 73, 77, 141, 143, 145, 298, 302], "tradit": [6, 49, 51, 71, 266], "awkward": 6, "supplement": 6, "perspect": [6, 24, 68], "whole": [6, 9, 12, 24, 33, 48, 49, 56, 59, 66, 68, 70, 71, 145, 302, 305], "pick": [6, 56, 74, 231, 246, 249], "transfer": [6, 44, 47, 58, 70, 72, 320], "intuit": [6, 49, 51, 58, 296], "sever": [6, 9, 15, 17, 20, 23, 29, 32, 35, 36, 47, 49, 56, 58, 59, 62, 66, 69, 71, 72, 74, 78, 137, 143, 145, 147, 148, 154, 195, 289, 295, 296, 301, 302], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 33, 49, 52, 56, 61, 62, 69, 71, 74, 138, 139, 140, 143, 149], "input": [6, 9, 12, 15, 17, 22, 24, 44, 59, 61, 62, 65, 66, 67, 70, 71, 77, 96, 100, 123, 137, 138, 139, 140, 141, 143, 146, 149, 152, 154, 222, 236, 238, 240, 246, 247, 281, 289, 292, 293, 296, 301, 302, 316, 321], "second": [6, 27, 44, 56, 59, 70, 73, 74, 78, 145, 234, 235, 243, 244, 245, 246, 250, 288, 289, 296, 302, 303], "fundament": [6, 9, 49, 68], "modul": [6, 8, 9, 15, 19, 20, 23, 47, 49, 54, 58, 66, 67, 68, 70, 71, 150, 288, 318], "produc": [6, 37, 39, 49, 74, 77, 86, 137, 149, 151, 152, 154, 208, 222, 224, 232, 293, 302], "abil": [6, 12, 33, 51, 56, 62, 66], "activ": [6, 9, 23, 24, 52, 64, 67, 71, 149, 296], "dens": [6, 59, 69, 71, 140, 149], "spars": [6, 59, 71, 137, 140, 216, 289, 292], "dispatch": [6, 33, 66, 76], "kernel": [6, 225], "auto": [6, 14, 16, 33, 40, 56, 79, 298, 301, 303], "switch": [6, 12, 23, 33, 55, 69, 246, 249, 301], "prove": [6, 24, 281], "world": [6, 9, 44, 54, 56, 66, 67, 69, 76, 154, 209, 210, 236], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 16, 20, 23, 36, 45, 54, 56, 68, 139, 140, 141, 147, 148, 151, 215, 222, 227, 235, 236, 240, 246, 289, 295, 298, 301], "co": [6, 23, 44, 67, 138, 316], "lead": [6, 17, 24, 41, 56, 71, 218, 220], "master": [6, 19, 22, 23, 24, 30, 312], "broadcast": [6, 76, 301], "mirror": [6, 7, 10, 24, 27, 31, 52, 60, 61], "On": [6, 27, 29, 36, 49, 51, 54, 77, 223, 286, 301], "contrari": 6, "total": [6, 8, 12, 33, 44, 48, 49, 50, 55, 56, 79, 164, 208, 231, 248, 254, 289, 296, 303, 316], "4": [6, 9, 10, 17, 19, 20, 22, 27, 30, 41, 49, 50, 51, 54, 55, 56, 67, 74, 85, 137, 139, 140, 142, 143, 144, 154, 160, 165, 167, 168, 173, 174, 192, 194, 195, 204, 212, 215, 217, 224, 233, 235, 240, 249, 256, 259, 260, 266, 267, 273, 275, 282, 283, 284, 289, 291, 292, 296, 301, 302, 303, 304, 305, 312, 315, 316, 320], "redund": 6, "programm": [6, 17, 66, 81], "scope": [6, 23, 68, 151], "disabl": [6, 30, 50, 74, 296], "develop": [6, 8, 9, 11, 12, 14, 24, 28, 33, 36, 44, 49, 50, 55, 56, 57, 58, 59, 60, 66, 69, 70, 71, 73, 81, 141, 143, 144, 145, 147, 208, 301], "katz": [6, 77, 154], "eigenvector": [6, 77, 154, 281], "harmon": 6, "coeffici": [6, 19, 77, 154], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 28, 36, 41, 52, 55, 61, 66, 68, 73, 74, 77, 144, 151, 209, 210, 225, 227, 240, 246, 267, 289, 298, 300, 301, 302, 312, 315], "color": [6, 19, 20, 56, 289], "biconnect": 6, "bridg": [6, 47, 68], "seven": [6, 149, 188], "strongli": [6, 35, 52, 56, 143, 228, 296], "cut": [6, 12, 24, 274], "k": [6, 20, 40, 50, 56, 59, 66, 67, 68, 70, 77, 78, 141, 154, 191, 199, 209, 210, 211, 212, 214, 216, 217, 218, 225, 228, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 254, 289, 295, 301, 316, 320], "decomposit": [6, 67, 154], "degeneraci": 6, "onion": 6, "minim": [6, 11, 69, 149, 240, 241, 262, 288], "domin": [6, 154, 301], "cycl": [6, 68, 70, 73, 76, 156, 192, 193, 196, 207, 229, 233, 254, 256, 272, 276], "triangl": [6, 32, 56, 67, 70, 77, 154, 251, 255, 259, 263, 275, 290, 312, 316], "acycl": [6, 68, 283], "cyclic": [6, 66, 68, 70, 196], "diamond": [6, 259], "rectangl": 6, "tail": [6, 54, 56, 68, 310], "approxim": [6, 208, 281], "densest": 6, "articlerank": 6, "hyperlink": [6, 77, 154], "induc": [6, 51, 54, 77, 99, 165, 168, 184, 232, 289], "topic": [6, 7, 52, 61, 67, 77], "person": [6, 7, 29, 32, 48, 51, 52, 54, 56, 67, 151, 269, 278, 289, 292, 295, 301, 302, 303, 317, 322], "standard": [6, 34, 47, 49, 52, 56, 68, 152, 222, 237, 238, 239, 301], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 56, 204, 207, 232], "four": [6, 9, 12, 20, 65, 67, 68, 76, 137, 140, 149, 236, 240, 301], "random": [6, 30, 62, 64, 66, 74, 141, 142, 143, 146, 149, 190, 201, 208, 211, 212, 213, 214, 216, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 249, 281, 284, 286, 288, 296], "give": [7, 12, 30, 33, 52, 56, 61, 74, 143, 151, 216, 236, 256, 288, 289], "quick": [7, 52, 61, 302], "ll": [7, 20, 28, 61], "python3": [7, 23, 27, 29, 30, 31, 34, 41, 52, 61, 67, 312, 314, 315], "pip": [7, 27, 29, 30, 31, 41, 48, 52, 61, 67, 147, 302, 315, 319], "upgrad": [7, 23, 31, 52, 61, 319], "occur": [7, 9, 14, 31, 41, 54, 61, 302], "veri": [7, 31, 44, 45, 49, 52, 56, 58, 61, 67, 71, 139, 141, 312], "speed": [7, 31, 56, 60, 61, 68, 150, 216, 289], "try": [7, 17, 23, 31, 35, 39, 41, 44, 52, 55, 60, 61, 64, 65, 67, 75, 77, 167, 208, 292, 296, 316], "site": [7, 31, 52, 61], "aliyun": [7, 27, 31, 52, 60, 61, 74, 296, 313], "pypi": [7, 27, 31, 41, 52, 61, 315], "trust": [7, 27, 31, 52, 61], "host": [7, 15, 17, 22, 23, 27, 31, 44, 50, 52, 55, 61, 74, 76, 77, 78, 292, 296, 302, 312, 320, 322], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 28, 29, 35, 41, 48, 52, 61, 67, 147, 236, 238, 289, 292, 302, 314], "everyth": [7, 61, 67, 301], "job": [7, 23, 44, 49, 61, 66, 67, 68, 72, 76, 113, 138, 296, 302], "modern_graph": [7, 29, 32, 48, 52, 67, 303], "gremlin": [7, 28, 32, 41, 44, 47, 48, 49, 50, 52, 53, 59, 62, 66, 67, 68, 72, 73, 75, 102, 106, 107, 143, 152, 296, 302, 310, 315, 316, 318, 323], "apach": [7, 17, 22, 23, 30, 47, 57, 58, 66, 67, 70, 300, 302, 306, 312, 314, 318], "tinkerpop": [7, 44, 47, 48, 50, 52, 58, 67, 68, 152, 302, 318], "org": [7, 17, 23, 41, 55, 61, 64, 65, 67, 69, 77, 154, 212, 213, 214, 228, 231, 238, 251, 255, 256, 257, 258, 260, 261, 262, 268, 269, 270, 271, 273, 274, 275, 276, 281, 302, 312, 315, 316, 320], "doc": [7, 16, 17, 29, 55, 67, 68, 76, 80, 82, 151, 238], "tutori": [7, 8, 12, 14, 24, 48, 50, 52, 53, 58, 63, 67, 69, 71, 149, 238, 306], "trigger": [7, 14, 15, 18, 36, 62, 67, 87, 304], "ret": [7, 18, 55, 67, 312, 317], "selector": [7, 15, 32, 37, 67, 76, 78, 86, 92, 93, 104, 105, 110, 118, 119, 151, 294, 296, 312, 317], "homogen": [7, 59, 67, 71, 139], "pg": [7, 67, 77, 296, 301], "none": [7, 9, 20, 27, 30, 64, 67, 77, 78, 85, 92, 93, 96, 99, 104, 105, 106, 107, 108, 110, 113, 115, 118, 119, 123, 129, 132, 136, 137, 138, 143, 151, 152, 153, 154, 162, 166, 168, 169, 173, 174, 183, 184, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 281, 283, 284, 286, 289, 291, 292, 293, 296, 301, 302, 317, 321, 322], "know": [7, 8, 29, 32, 48, 53, 54, 56, 63, 67, 70, 138, 139, 147, 151, 302, 303, 317, 320, 322], "src": [7, 15, 16, 17, 18, 29, 33, 40, 44, 51, 55, 61, 62, 65, 67, 77, 78, 85, 137, 139, 151, 295, 298, 301, 302, 304, 312, 316, 321, 322], "our": [7, 12, 17, 31, 33, 35, 36, 39, 44, 49, 55, 60, 67, 69, 71, 73, 74, 75, 144, 145, 154, 302, 304, 312], "learn": [7, 27, 31, 35, 36, 39, 44, 49, 52, 58, 62, 63, 64, 68, 69, 72, 75, 132, 138, 141, 142, 143, 144, 147, 149, 294, 296, 316, 318], "technic": [7, 61, 145, 283, 289], "disaggreg": [7, 35], "deploy": [7, 28, 29, 32, 41, 44, 50, 56, 66, 72, 139, 149, 296, 302], "scale": [7, 11, 12, 20, 23, 27, 33, 36, 44, 48, 50, 55, 56, 58, 59, 66, 67, 68, 69, 71, 72, 73, 139, 141, 143, 145, 150, 218, 229, 236, 288, 301], "usag": [7, 17, 30, 31, 35, 36, 47, 52, 54, 56, 60, 61, 62, 78, 140, 141, 142, 146, 151, 208, 289, 296, 302, 303], "section": [8, 27, 28, 53, 56, 59, 63, 66, 143, 144, 151, 188, 301, 302], "assum": [8, 23, 27, 29, 48, 53, 56, 63, 67, 138, 151, 187, 248, 287, 289, 296, 301, 316], "getting_start": [8, 53, 63], "most": [8, 9, 15, 22, 32, 41, 45, 49, 52, 54, 56, 59, 67, 69, 71, 73, 74, 78, 137, 139, 143, 145, 147, 151, 209, 210, 234, 237, 238, 239, 302], "suffici": [8, 17, 41, 66, 138], "louvain": [8, 69, 77, 312], "social": [8, 44, 50, 56, 66, 69, 71, 74, 216, 266, 281, 290], "scientist": [8, 58, 73], "familiar": [8, 14, 16, 28, 49], "manipul": [8, 11, 19, 20, 54, 56, 58, 73, 75, 76, 289], "invok": [8, 9, 12, 14, 15, 17, 24, 33, 76, 141, 142, 146, 296, 312], "pydata": [8, 72], "eco": 8, "still": [8, 24, 27, 33, 44, 56, 69, 167, 296, 301, 302], "directli": [8, 12, 20, 24, 29, 31, 33, 35, 36, 37, 44, 51, 56, 57, 59, 62, 71, 76, 138, 141, 143, 144, 145, 146, 281, 289, 292, 296, 302, 306], "migrat": [8, 49, 61, 64, 65, 67, 68, 73, 298, 316], "transpar": [8, 66], "don": [8, 17, 23, 29, 32, 35, 36, 41, 48, 56, 87, 183, 289, 302], "autom": [9, 28, 68], "abl": [9, 24, 27, 48, 68, 142, 246, 301, 302], "batch": [9, 12, 19, 50, 55, 59, 62, 68, 71, 137, 140, 142, 143, 145, 147, 149, 153, 302, 321], "counterpart": [9, 58, 68], "redesign": [9, 68], "underli": [9, 44, 49, 56, 68, 145, 301], "equip": [9, 57, 58, 68, 74, 306], "polici": [9, 41, 68, 76, 296], "memori": [9, 12, 23, 24, 27, 33, 41, 44, 47, 55, 58, 60, 63, 64, 66, 68, 69, 71, 72, 73, 74, 137, 138, 139, 145, 149, 151, 289, 296, 302, 305, 314, 315], "todai": 9, "static": [9, 16, 30, 55, 76, 302, 304], "recomput": 9, "costli": 9, "consum": [9, 41, 71, 145, 148], "especi": [9, 45], "trillion": 9, "commerc": [9, 66, 69], "constantli": 9, "issu": [9, 17, 36, 41, 44, 55, 68, 69, 73, 212, 213, 214, 278, 315], "involv": [9, 36, 39, 44, 49, 56, 59, 62, 66, 69, 70, 71, 72, 73], "adjust": [9, 12, 41], "old": [9, 12, 14, 33, 296], "typic": [9, 24, 44, 51, 54, 56, 66, 69, 70, 73, 138, 143, 218, 289, 295, 301], "often": [9, 36, 44, 48, 55, 66, 69, 70, 71, 73, 139, 140, 143, 289, 302, 310], "overlap": [9, 296], "intervent": 9, "burden": [9, 15, 139], "expert": 9, "light": 9, "overal": [9, 71], "verifi": [9, 27, 37, 44, 48, 50, 74, 143], "characterist": [9, 51, 62, 66, 71, 137, 142], "deduc": [9, 151, 322], "appropri": [9, 27, 39, 49, 59, 66, 71, 137], "record": [9, 48, 56, 148, 298, 302], "part": [9, 36, 44, 49, 54, 59, 62, 68, 143, 144, 147, 149, 272, 289, 301, 302], "intermedi": [9, 12, 17, 49, 56, 58, 66, 68], "deliv": [9, 320], "There": [9, 10, 12, 33, 36, 41, 48, 49, 56, 67, 69, 70, 71, 77, 139, 142, 143, 145, 289, 295, 296, 301, 302], "reshap": [9, 149], "eas": [9, 12, 33, 71, 73, 74], "achiev": [9, 12, 20, 24, 27, 33, 56, 66, 69, 74, 298], "decid": [9, 139, 236], "round": [9, 14, 17, 24, 77, 79, 206, 216], "due": [9, 41, 66, 73, 143], "among": [9, 49, 56, 66, 73, 76, 148, 154, 283, 302], "fetch": [9, 15, 17, 102, 296, 302, 312], "suffic": 9, "replai": [9, 62, 68, 298], "affect": [9, 35, 36, 289], "area": [9, 15, 240, 286], "readili": 9, "obtain": [9, 14, 17, 28, 29, 49, 50, 55, 58, 59, 62, 65, 67, 71, 138, 142, 143, 145, 264, 267, 283, 289, 296, 302], "simpli": [9, 17, 20, 48, 56, 67, 143, 211, 215, 289], "coincid": 9, "idea": [9, 36, 59, 71, 81, 145], "invalid": [9, 151, 296], "miss": [9, 141, 151, 199, 296], "comparison": [9, 19, 54, 56, 58, 73, 74], "those": [9, 28, 48, 50, 51, 56, 75, 141, 151, 154, 165, 194, 196, 198, 289, 291, 295], "although": [9, 12, 14, 22, 33, 44, 67, 81, 188, 301, 302], "solut": [9, 30, 41, 70, 71, 73, 154, 315], "enough": [9, 62, 138, 141, 208, 296, 300], "caus": [9, 14, 22, 31, 36, 41, 55, 61, 71, 139, 145, 151, 188], "overwhelm": 9, "overhead": [9, 73, 138, 139], "mf": 9, "delta": [9, 12, 32, 77, 151], "php": 9, "mp": 9, "cc": [9, 301, 317], "sswp": 9, "mv": 9, "track": 9, "gcn": [9, 58, 62, 67, 71, 75, 137, 141, 145, 149, 316, 318, 321, 323], "commnet": 9, "me": 9, "keep": [9, 56, 62, 79, 143, 151, 246, 249, 302], "graphsag": [9, 58, 62, 71, 75, 137, 141, 143, 145, 149, 318, 321, 323], "gin": [9, 71], "vldb": [9, 312, 318], "paper": [9, 14, 24, 59, 61, 64, 65, 66, 67, 68, 74, 149, 154, 286, 296, 312, 316], "publish": [9, 14, 24, 28, 66, 67], "2021": [9, 68], "denot": [9, 54, 56, 142, 217, 302], "w": [9, 55, 77, 154, 216, 222, 236, 239, 241, 246, 249, 251, 279, 289, 291, 302, 320], "respect": [9, 16, 47, 49, 54, 66, 67, 70, 71, 77, 96, 115, 123, 140, 143, 154, 195, 208, 255, 289, 295, 301, 302], "initi": [9, 16, 18, 19, 50, 56, 69, 71, 76, 138, 139, 149, 151, 153, 154, 228, 230, 231, 289, 292, 302, 306, 312], "init_v": 9, "init_m": 9, "aggreg": [9, 49, 71, 79, 137, 143, 145, 149, 301, 320], "vector": [9, 40, 59, 65, 67, 71, 76, 79, 137, 145, 147, 154, 236, 240], "element": [9, 54, 56, 69, 76, 138, 141, 143, 151, 154, 184, 216, 261, 283, 295, 296, 301], "specifi": [9, 16, 20, 23, 24, 29, 35, 45, 48, 51, 54, 58, 62, 67, 69, 77, 79, 85, 92, 93, 104, 105, 110, 114, 118, 119, 131, 136, 137, 138, 140, 143, 146, 151, 153, 154, 165, 173, 174, 195, 208, 218, 220, 221, 224, 225, 232, 236, 237, 238, 239, 240, 246, 249, 251, 254, 267, 286, 289, 291, 295, 296, 302, 303], "addition": [9, 12, 14, 35, 59, 65, 66, 68, 73, 145, 154, 301, 310], "correspond": [9, 10, 15, 17, 18, 39, 49, 51, 54, 56, 58, 62, 70, 73, 77, 113, 137, 138, 139, 140, 142, 143, 147, 151, 154, 187, 188, 218, 220, 221, 222, 223, 224, 236, 282, 283, 285, 289, 291, 292, 298, 302, 310], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 40, 76, 298, 301, 302, 303, 312], "m1": [9, 41, 52, 190, 315, 319], "m2": [9, 190], "below": [9, 10, 12, 20, 33, 34, 35, 36, 62, 66, 67, 69, 70, 71, 74, 138, 141, 143, 146, 149, 188, 218, 220, 254, 289, 296, 302], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 67, 74, 76, 147, 302, 312, 316], "dbl_max": 9, "backend": [9, 27, 28, 58, 61, 66, 71, 151, 289, 296, 303, 316], "seamless": [9, 44, 72, 302], "block": [9, 41, 49, 140, 216, 302], "spawn": 9, "adopt": [9, 73, 141, 302], "csc": [9, 300], "csr": [9, 40, 151, 300, 303], "sent": [9, 10, 14, 16, 24, 55], "mainten": [9, 301], "preserv": [9, 78, 151, 251, 281], "effect": [9, 35, 36, 44, 54, 55, 62, 66, 71, 141, 220, 289, 302], "readi": [9, 29, 31, 36, 41, 44, 50, 55, 66, 139, 141, 296, 302, 310], "accept": [9, 154, 236, 240, 302, 303], "insert": [9, 14, 49, 108, 302], "newli": [9, 39], "particular": [9, 36, 54, 77, 140, 143, 218], "incid": [9, 20, 51, 54, 56, 165, 166, 208, 230, 279, 289], "encod": [9, 55, 77, 138, 143, 149, 151, 153, 291, 302, 321], "dummi": 9, "furthermor": [9, 55, 56, 58, 66, 73], "proprieti": 9, "deduct": 9, "techniqu": [9, 33, 52, 62, 68, 69, 143], "cancel": 9, "compens": 9, "whose": [9, 24, 56, 141, 143, 154, 159, 179, 261, 265, 281, 283, 284, 300, 301], "proce": [9, 208, 302], "inner": [10, 16, 40, 56, 79, 151, 301], "outer": [10, 14, 40, 79, 204, 301], "cross": [10, 51, 81, 264], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 32, 41, 48, 51, 56, 64, 66, 67, 69, 70, 74, 76, 77, 78, 85, 87, 89, 102, 106, 107, 114, 132, 140, 151, 189, 191, 192, 194, 196, 198, 199, 201, 203, 204, 207, 218, 220, 221, 223, 225, 226, 227, 229, 233, 234, 235, 241, 242, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 284, 291, 296, 301, 302, 310], "5": [10, 19, 20, 30, 41, 50, 54, 56, 61, 62, 64, 65, 67, 70, 74, 137, 140, 142, 143, 144, 146, 149, 154, 160, 165, 167, 173, 192, 195, 208, 212, 213, 214, 216, 217, 225, 227, 234, 235, 236, 237, 239, 240, 254, 255, 257, 258, 259, 260, 262, 263, 266, 268, 270, 272, 273, 279, 284, 289, 295, 296, 302, 304, 310, 315, 316, 320], "9": [10, 30, 48, 52, 56, 67, 138, 154, 192, 194, 240, 258, 266, 279, 284, 319], "12": [10, 20, 31, 41, 52, 56, 74, 77, 138, 139, 140, 142, 144, 156, 157, 158, 194, 256, 257, 261, 265, 269, 275, 313, 315, 320], "split": [10, 54, 56, 64, 65, 138, 139, 296, 302], "roughli": 10, "across": [10, 14, 33, 34, 35, 55, 66, 68, 69, 73, 301, 303], "divid": [10, 56, 59, 66, 77, 138, 141, 145, 146, 154, 300], "place": [10, 18, 19, 35, 48, 56, 147, 148, 151, 216, 236, 237, 238, 239, 240, 269, 287], "itself": [10, 20, 22, 36, 54, 56, 59, 66, 79, 137, 139, 295, 296, 301], "replic": [10, 50, 230], "resid": [10, 14], "j": [10, 30, 40, 77, 149, 154, 187, 188, 209, 210, 218, 220, 221, 223, 229, 240, 243, 244, 245, 267, 301], "outcom": 10, "outgo": [10, 16, 24, 54, 56, 70, 79, 143, 154, 289, 301], "incom": [10, 14, 16, 33, 54, 56, 76, 79, 154], "consid": [10, 15, 18, 27, 36, 56, 62, 69, 77, 78, 138, 139, 154, 218, 281, 298, 301], "vice": [10, 236], "versa": [10, 236], "compani": [10, 301], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 44, 45, 73, 138, 139, 143, 146, 301, 302], "regardless": [10, 68, 138, 234, 301], "friendli": [11, 12, 36, 47, 58, 69, 71, 72, 73], "research": [11, 62, 71, 279, 296], "particularli": [11, 71, 281], "field": [11, 27, 29, 32, 37, 48, 62, 64, 65, 67, 141, 145, 149, 151, 235, 296, 302, 313, 316], "scienc": [11, 243, 266], "solv": [11, 24, 36, 41, 43, 56, 69], "recast": [12, 14, 33], "ga": 12, "plug": [12, 33, 66], "minor": [12, 14, 33, 58, 66, 71, 74, 304], "cope": [12, 33], "life": [12, 31, 33, 48, 66], "extrem": [12, 27, 66, 145, 190, 201, 301], "fashion": [12, 20], "consist": [12, 20, 24, 29, 33, 34, 35, 49, 51, 54, 55, 56, 58, 59, 62, 68, 69, 71, 73, 74, 76, 77, 79, 140, 141, 143, 145, 191, 192, 193, 204, 207, 215, 261, 283, 298, 300, 301, 302, 303], "format": [12, 20, 22, 33, 34, 44, 47, 56, 59, 71, 72, 74, 77, 106, 107, 114, 137, 140, 143, 145, 148, 149, 151, 152, 289, 291, 296, 298, 314], "unifi": [12, 33, 44, 47, 49, 138, 298], "care": [12, 33, 56, 147, 148, 301], "foreign": [12, 301], "ecosystem": [12, 47, 57, 58, 70, 73, 306], "freedom": 12, "accord": [12, 19, 35, 41, 45, 48, 49, 54, 56, 59, 66, 70, 71, 76, 141, 143, 147, 208, 216, 228, 229, 298, 302], "demand": [12, 49, 69, 301, 302, 306], "sdk": [12, 18, 41, 48, 55, 57, 58, 69, 73, 81, 294, 302, 306, 312], "domain": [12, 66, 71, 236, 237, 238, 239, 240], "dedic": 12, "treat": [12, 14, 20, 33, 56, 151, 289, 291, 296], "immut": [12, 33, 47, 55, 68], "persist": [12, 15, 33, 41, 47, 48, 66, 68, 73, 300], "fortun": [12, 20, 44], "grin": [12, 47], "awar": [12, 36, 41, 48, 68], "introduct": [12, 33, 69, 142, 143, 146, 154, 199, 281, 301], "foundat": [12, 66], "visit": [12, 28, 56, 70, 138], "meanwhil": [12, 44, 58, 71, 301], "compress": [12, 67, 77, 138, 254], "pipelin": [12, 33, 58, 66, 69, 73, 305], "balanc": [12, 139, 189], "link": [12, 30, 36, 41, 43, 49, 51, 59, 71, 74, 77, 151, 154, 191, 212, 214, 215, 225, 226, 227, 286, 289, 296], "popular": [12, 22, 28, 44, 71, 137, 149, 302], "freeli": [12, 24], "background": [12, 43], "interoper": [12, 301], "panda": [12, 44, 76, 78, 92, 104, 151, 289, 318], "mar": [12, 27, 44, 54, 68, 296], "fastffi": [12, 81], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 31, 41, 48, 54, 55, 57, 58, 66, 68, 70, 73, 76, 190, 201, 208, 284, 287, 289, 296, 306, 312], "emploi": [12, 24, 33, 65, 68, 69], "captur": [12, 71], "20": [12, 27, 28, 31, 33, 48, 54, 56, 58, 74, 77, 78, 139, 140, 142, 151, 208, 236, 237, 258, 260, 289, 312, 313, 319, 320], "100": [12, 33, 56, 61, 64, 65, 67, 77, 149, 154, 211, 218, 222, 229, 238, 289, 296, 316, 320], "build": [12, 15, 30, 33, 34, 36, 41, 49, 55, 58, 59, 68, 76, 77, 87, 89, 139, 143, 145, 147, 148, 151, 237, 238, 239, 281, 296, 298, 314, 321], "been": [12, 17, 23, 24, 28, 32, 36, 41, 49, 50, 52, 54, 56, 57, 59, 66, 68, 69, 70, 71, 73, 77, 128, 141, 143, 151, 152, 154, 208, 231, 281, 293, 296, 306], "misc": 13, "express": [14, 15, 24, 49, 51, 55, 62, 68, 70, 78, 138, 140, 143, 240, 289, 320], "modifi": [14, 20, 24, 48, 55, 90, 91, 108, 109, 144, 167, 220, 287, 300, 301], "adher": [14, 34, 301], "think": [14, 24], "principl": [14, 147], "privileg": 14, "experienc": 14, "inform": [14, 15, 16, 19, 27, 28, 37, 41, 49, 50, 55, 65, 67, 69, 71, 72, 81, 95, 137, 138, 139, 140, 143, 145, 147, 151, 154, 169, 187, 228, 250, 251, 279, 289, 296, 298, 302], "hop": [14, 49, 51, 54, 56, 58, 59, 62, 66, 70, 71, 137, 141, 143, 145, 146, 147, 149], "slow": [14, 52], "consequ": [14, 66, 69], "piec": [14, 47, 148, 296], "destin": [14, 32, 48, 56, 59, 67, 76, 78, 94, 138, 139, 140, 142, 143, 149, 151, 153, 295, 300, 301, 302, 322], "abovement": 14, "peval": [14, 16, 17, 18, 33, 69, 76, 84, 306, 312], "incev": [14, 16, 17, 18, 33, 69, 76, 84, 306, 312], "assembl": [14, 33, 49, 68, 69, 76, 151], "unlik": [14, 17, 59, 62, 66, 289], "modif": [14, 22, 58, 66, 71, 151, 292], "convent": [14, 36, 41, 222, 248, 310], "taught": [14, 56], "colleg": 14, "textbook": 14, "answer": [14, 33, 36, 41, 66, 302], "collect": [14, 33, 54, 55, 56, 70, 71, 72, 149, 289], "partial": [14, 16, 18, 33, 54, 76, 78, 138, 231, 306], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 48, 62, 73, 138, 146, 154, 224, 289], "accur": 14, "long": [14, 17, 29, 32, 55, 56, 68, 73, 77, 143, 301, 302, 312, 320], "const": [14, 15, 16, 40, 76, 79, 147, 148, 301, 302, 303], "fragment_t": [14, 15, 16, 76], "frag": [14, 17, 18, 40, 84, 298, 303, 312], "context_t": [14, 15, 16, 76], "ctx": [14, 17, 22, 76, 312], "message_manager_t": [14, 16, 76], "vertex_t": [14, 16, 40, 76], "native_sourc": [14, 18, 312], "getinnervertex": [14, 76], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 40, 76, 298, 312], "get_neighbor": 14, "std": [14, 15, 40, 76, 298, 303], "min": [14, 18, 24, 79, 312, 320], "static_cast": [14, 16, 40, 298], "get_data": [14, 40], "isoutervertex": [14, 76], "put": [14, 16, 17, 22, 147, 296], "channel": [14, 16, 36], "syncstateonoutervertex": 14, "els": [14, 16, 18, 40, 56, 139, 149, 151, 247, 301, 302, 312], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 40, 76, 298, 312], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 56, 79, 301], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 312], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 40, 76], "dijkstra": [14, 18, 69, 154, 312], "checkout": [14, 36, 144], "seri": [15, 56, 71, 76, 143, 301], "strong": [15, 49, 69], "typenam": [15, 16, 40, 76], "frag_t": [15, 16, 76], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 36, 48, 55, 56, 70, 140, 143, 147, 149, 295, 304], "shared_ptr": [15, 40, 76, 298, 303], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 28, 35, 39, 56, 296, 312, 322], "global": [15, 24, 49, 51, 54, 56, 71, 129, 151, 281, 296, 303, 320], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 39, 48, 49, 56, 71, 251, 295], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "oid_t": [15, 16, 40, 76], "o_sourc": 15, "vid_t": [15, 16, 40, 76], "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 40, 64, 76, 77, 79, 84, 137, 139, 140, 144, 147, 149, 289, 292, 296, 298, 306, 312, 321, 322], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 197], "len": [15, 56, 64, 139, 154, 163, 194, 211, 213, 216, 218, 219, 223, 289], "ed": [15, 23, 222, 236, 243, 266, 272], "ctruee": 15, "rather": [15, 18, 56, 70, 72, 73, 154, 208, 250, 301], "py": [15, 137, 144, 149, 312, 313, 314, 321], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 29, 88, 292], "dynamic_properti": [15, 101, 292], "def": [15, 18, 23, 61, 64, 65, 67, 84, 137, 139, 140, 141, 142, 143, 146, 149, 195, 302, 312, 316, 317, 321, 322], "arg": [15, 64, 76, 77, 78, 79, 114, 140, 141, 142, 143, 146, 149, 153, 296, 302], "appasset": [15, 18, 84, 85, 89, 294, 312], "algo": [15, 16, 17, 22, 23, 77, 85], "flash_bf": 15, "vertex_data": [15, 16, 77, 85], "gscoordin": [15, 35], "builtin": [15, 19, 20, 290, 292, 294], "gs_conf": [15, 16, 85], "yaml": [15, 16, 28, 37, 48, 55, 77, 85, 300, 302, 320], "cpp_flash": 15, "class_nam": [15, 16, 85], "compatible_graph": [15, 16, 85], "immutableedgecutfrag": 15, "arrowprojectedfrag": [15, 16, 76, 85], "log": [15, 17, 37, 41, 47, 64, 65, 66, 68, 301, 303, 315], "p2p": [15, 17, 22, 23], "network": [15, 27, 41, 44, 47, 50, 56, 59, 63, 65, 66, 67, 69, 72, 73, 74, 75, 77, 137, 138, 139, 141, 143, 145, 149, 154, 209, 210, 216, 218, 222, 225, 226, 227, 230, 242, 266, 277, 278, 280, 281, 286, 290, 304, 315], "load_p2p_network": [15, 16, 17, 18, 44, 77, 78, 312], "attribut": [15, 19, 51, 62, 65, 67, 69, 71, 76, 77, 112, 123, 139, 140, 142, 145, 149, 150, 153, 154, 156, 157, 158, 173, 174, 183, 195, 208, 213, 232, 236, 237, 238, 239, 240, 243, 244, 245, 279, 281, 283, 286, 287, 289, 290, 292, 298], "convert": [15, 20, 23, 59, 77, 92, 93, 104, 105, 118, 119, 137, 138, 145, 149, 209, 210, 267, 284, 289, 291, 292, 298], "simple_graph": [15, 16], "dist": [15, 17, 77, 78, 144, 147, 236, 238, 240, 296, 312, 320], "codegen": [15, 49], "bit": [15, 52, 54, 56], "longer": [15, 64, 79, 296], "vineyard": [15, 16, 23, 30, 32, 40, 41, 47, 48, 55, 58, 63, 64, 66, 72, 73, 76, 78, 110, 115, 118, 119, 151, 152, 296, 301, 302, 310, 312, 315, 316, 317, 320, 322], "retriev": [15, 47, 51, 54, 67, 68, 78, 92, 93, 104, 105, 110, 114, 118, 119, 140, 141, 143, 149, 154, 295, 302, 303], "displai": [15, 55, 138], "vertex_rang": [15, 78, 92, 93, 104, 105, 110, 118, 119, 151, 295], "end": [15, 16, 40, 44, 54, 56, 62, 63, 64, 65, 66, 67, 70, 73, 78, 79, 143, 148, 154, 168, 177, 182, 183, 196, 208, 291, 295, 301, 306], "10": [15, 16, 17, 20, 27, 30, 41, 43, 44, 49, 51, 54, 56, 61, 62, 64, 65, 67, 74, 77, 138, 139, 140, 142, 143, 149, 151, 154, 156, 157, 158, 192, 198, 208, 211, 213, 222, 223, 224, 225, 227, 231, 236, 240, 244, 260, 266, 271, 284, 289, 296, 302, 310, 312, 315, 316, 320], "sort_valu": 15, "pip3": [16, 19, 23, 34, 36, 41, 313, 315, 319], "degre": [16, 19, 20, 40, 44, 56, 62, 77, 79, 140, 141, 146, 154, 163, 188, 189, 208, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 234, 246, 247, 248, 249, 283, 289, 290, 302], "vertexdatacontext": [16, 17, 76, 154, 312], "myappcontext": 16, "uint64_t": [16, 298], "explicit": [16, 76, 233, 289, 296], "parallelmessagemanag": [16, 17, 312], "param1": 16, "setvalu": [16, 17, 312], "vertex_array_t": [16, 76], "member": [16, 56, 76, 279], "variabl": [16, 28, 32, 39, 41, 50, 54, 84, 208, 296, 302, 303, 315], "And": [16, 18, 23, 28, 30, 35, 44, 49, 52, 54, 56, 74, 77, 78, 142, 147, 292, 295, 296], "zero": [16, 68, 77, 138, 143, 154, 171, 189, 198, 231, 283, 284, 303], "myapp": 16, "parallelappbas": [16, 17, 312], "parallelengin": [16, 17, 312], "install_parallel_work": 16, "constexpr": [16, 76], "messagestrategi": [16, 18, 76, 79, 312], "message_strategi": [16, 76], "ksynconoutervertex": [16, 18, 76, 79, 312], "loadstrategi": [16, 76], "load_strategi": [16, 76], "kbothoutin": [16, 76], "initchannel": 16, "noth": [16, 79, 95, 151, 153, 289], "forc": [16, 36], "forcecontinu": [16, 17, 312], "getincomingadjlist": [16, 40, 76], "basic": [16, 20, 52, 54, 70, 137, 140, 145, 147, 148, 149, 208, 218, 223, 295], "counter": [16, 56], "runnabl": [16, 17, 23], "content": [16, 44, 56, 65, 67, 154, 286, 300, 322], "my_app": [16, 18, 312], "cpp_pie": [16, 77, 85], "context_typ": [16, 76, 77, 85], "dynamicprojectedfrag": 16, "arrowfrag": [16, 76, 303], "codebas": [16, 34], "my_app_context": 16, "zip": [16, 55, 85, 236, 240, 289, 320], "jr": 16, "load_app": [16, 17, 18, 22, 312], "_project_to_simpl": [16, 17, 22], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 77, 78, 151, 295, 312], "practic": [16, 49, 55, 59, 62, 66, 71, 138, 139, 141, 302], "demo": [17, 22, 23, 52, 81, 296, 300, 302, 310, 312], "turn": [17, 41, 74, 81, 283, 310], "verbos": [17, 23, 37, 41, 310], "lauch": [17, 22, 312], "cluster_typ": [17, 22, 77, 78, 296, 312, 322], "add_lib": [17, 22, 296], "home": [17, 22, 23, 44, 76, 144, 145, 147, 148, 150, 151, 154, 198, 310, 312, 314, 322], "19": [17, 22, 23, 41, 56, 74, 139, 140, 142, 310, 315, 319], "shade": [17, 22, 23, 312], "java_pi": [17, 77], "threadnum": [17, 312], "info": [17, 41, 52, 56, 79, 151, 289, 292, 296, 300, 301, 302, 303, 310], "maven": [17, 23, 81, 302, 312], "groupid": [17, 23, 302, 312], "artifactid": [17, 23, 302, 312], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 302, 312], "spark": [17, 300], "drastic": 17, "great": [17, 23, 36, 302], "suppos": [17, 56, 151, 283, 301], "traversecontext": [17, 312], "overrid": [17, 76, 137, 147, 312], "ifrag": [17, 312], "parallelcontextbas": [17, 312], "adjlist": [17, 76, 79, 300, 312], "nbr": [17, 20, 40, 76, 79, 289, 312], "dst": [17, 18, 29, 44, 51, 62, 78, 137, 140, 151, 153, 295, 298, 301, 312, 321, 322], "largest": [17, 56, 154, 234, 312], "vertexarrai": [17, 76, 79, 312], "math": [17, 61, 65, 67, 154, 238, 239, 316, 318], "max": [17, 79, 150, 154, 312, 320], "pars": [17, 49, 77, 138, 298, 302], "maxiter": [17, 312], "jsonobject": [17, 312], "gsvertexarrai": [17, 312], "createfficontext": [17, 312], "arrai": [17, 40, 59, 71, 76, 77, 78, 140, 141, 143, 146, 149, 289, 292, 304, 312], "avail": [17, 23, 28, 29, 39, 44, 55, 62, 68, 74, 77, 131, 136, 149, 237, 238, 239, 289, 296, 298, 301, 302, 312], "containskei": [17, 312], "getinteg": [17, 312], "javadoc": [17, 34], "mvn": [17, 22, 81, 302], "proper": [17, 36], "javaapp": [17, 294, 312], "But": [17, 48, 56, 73, 81, 289, 295], "rememb": [17, 22, 23, 29, 32], "singel": 17, "full_jar_path": [17, 77, 312], "pack": [17, 23, 312], "java_app_class": [17, 77, 312], "fullli": [17, 312], "qualifi": [17, 77, 312], "b": [17, 18, 22, 36, 54, 56, 143, 198, 216, 229, 235, 236, 240, 245, 246, 247, 249, 277, 285, 289, 312, 320], "param": [17, 23, 28, 41, 77, 97, 98, 114, 129, 131, 132, 133, 136, 143, 149, 151, 296, 302, 312], "string": [17, 23, 32, 48, 55, 76, 77, 79, 84, 123, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 169, 173, 174, 183, 281, 283, 285, 289, 291, 298, 301, 302, 303, 312, 320, 322], "bother": 17, "click": [17, 35, 36, 62, 139, 140, 143, 313], "pure": [18, 76, 306], "just": [18, 19, 23, 27, 41, 44, 48, 54, 56, 73, 81, 147, 151, 289, 292, 296, 304], "udf": [18, 84, 295, 312], "decor": [18, 312], "vd_type": [18, 79, 84, 312], "md_type": [18, 79, 84, 312], "youralgorithm": [18, 312], "staticmethod": [18, 84, 312], "statu": [18, 27, 28, 29, 37, 41, 64, 147, 148, 154, 302, 306, 310], "cython": [18, 33, 41, 114, 294, 312], "sssp_pie": [18, 312], "v_label_num": [18, 303, 312], "vertex_label_num": [18, 79, 298, 303, 312], "v_label_id": [18, 79, 312], "init_valu": [18, 79, 312], "1000000000": [18, 77, 312], "pieaggregatetyp": [18, 79, 312], "kminaggreg": [18, 79, 312], "register_sync_buff": [18, 79, 312], "get_config": [18, 79, 296, 312], "declar": [18, 49, 54, 56, 58, 70, 73, 139, 312], "get_inner_nod": [18, 79, 312], "break": [18, 55, 149, 312], "set_node_valu": [18, 79, 312], "e_label_num": [18, 40, 303, 312], "edge_label_num": [18, 79, 298, 303, 312], "e_label_id": [18, 312], "get_outgoing_edg": [18, 79, 312], "third": [18, 66, 70, 151, 274, 275], "column": [18, 32, 40, 44, 45, 49, 51, 59, 67, 71, 76, 78, 79, 86, 138, 148, 151, 282, 298, 302, 303, 312, 316, 322], "get_int": [18, 79, 312], "get_node_valu": [18, 79, 312], "iv": [18, 312], "inner_nod": [18, 79, 312], "v_dist": [18, 312], "u_dist": [18, 40, 312], "classic": [18, 62, 142, 290], "yourpregelalgorithm": [18, 312], "sssp_pregel": [18, 312], "set_valu": [18, 79, 312], "src_id": [18, 40, 62, 138, 139, 140, 142, 143, 146, 149, 153, 312], "cur_dist": [18, 312], "new_dist": [18, 312], "outgoing_edg": [18, 79, 312], "vote_to_halt": [18, 79, 312], "sin": [18, 312], "m_pi": [18, 312], "translat": [18, 36, 66], "generate_eid": [18, 45, 48, 76, 129, 151, 303, 312, 322], "test": [18, 23, 28, 32, 41, 47, 48, 52, 56, 58, 61, 64, 65, 67, 71, 137, 147, 149, 153, 173, 174, 208, 289, 291, 296, 301, 302, 313, 314, 316, 321], "save": [18, 28, 48, 139, 154, 302], "futur": [18, 54, 56], "to_gar": [18, 312], "my_sssp_pregel": [18, 312], "gar": [18, 77, 85, 151, 296, 300, 312], "later": [18, 20, 31, 32, 52, 56, 70, 151, 296, 301, 302, 319], "construct": [19, 56, 59, 62, 66, 67, 68, 76, 129, 137, 138, 139, 140, 141, 151, 152, 156, 157, 197, 218, 220, 221, 223, 229, 233, 234, 235, 243, 246, 247, 248, 249, 251, 267, 271, 275, 281, 283, 296, 300, 303], "expand": [19, 49, 56, 141, 143, 290], "add_edges_from": [19, 20, 173, 289], "add_nod": [19, 20, 289, 292], "number_of_nod": [19, 20, 154, 198, 282, 289], "number_of_edg": [19, 20, 163, 198, 282, 289], "sort": [19, 20, 40, 49, 56, 154, 160, 188, 192, 195, 198, 223, 224, 282, 283, 289, 301], "connected_compon": [19, 154], "nx": [19, 20, 44, 88, 90, 91, 94, 97, 99, 101, 108, 109, 113, 116, 117, 151, 154, 289, 291, 292], "add_nodes_from": [19, 20, 289], "red": [19, 20, 36, 138, 289], "green": [19, 20, 35, 36], "add_edg": [19, 20, 44, 151, 167, 173, 174, 177, 182, 183, 289, 292, 316, 317, 322], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": 19, "dict": [19, 20, 27, 77, 78, 106, 107, 115, 136, 139, 140, 143, 151, 152, 236, 237, 238, 239, 246, 247, 267, 289, 295, 296, 302], "draw": [19, 56, 236, 239], "matplotlib": [19, 56], "with_label": 19, "font_weight": 19, "bold": [19, 74], "twitter": [19, 74], "wget": [19, 22, 23, 28, 34, 144, 320], "raw": [19, 22, 23, 48, 49, 59, 104, 105, 139, 145, 147, 148, 153], "githubusercont": [19, 22, 23], "p": [19, 20, 30, 35, 54, 56, 68, 77, 139, 149, 154, 212, 213, 214, 216, 225, 226, 227, 230, 231, 233, 235, 237, 238, 239, 240, 243, 245, 320], "netwrokx": 19, "o": [19, 22, 23, 27, 29, 32, 37, 76, 149, 154, 171, 222, 224, 229, 237, 238, 239, 241, 242, 243, 289, 302, 313, 316], "gs_nx": 19, "g1": [19, 151, 293, 304, 305], "read_edgelist": [19, 291], "expandvar": [19, 22], "nodetyp": [19, 291], "create_us": [19, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 218, 219, 220, 221, 223, 225, 226, 227, 229, 233, 234, 235, 241, 242, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 284, 291], "g2": [19, 151, 289, 293, 304, 305], "ret_g": 19, "ret_nx": 19, "lack": [20, 31, 72, 154], "hashabl": [20, 169, 184, 246, 289, 291], "float": [20, 55, 64, 74, 77, 137, 138, 139, 140, 148, 149, 150, 154, 208, 211, 212, 213, 214, 216, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 243, 244, 245, 281, 289, 291, 296, 304, 320, 321, 322], "tupl": [20, 56, 138, 139, 140, 149, 151, 154, 173, 174, 183, 195, 236, 240, 246, 285, 289, 291, 296], "though": [20, 208, 289, 302], "yield": [20, 143, 149, 236, 240, 289], "node_attribute_dict": 20, "discuss": [20, 41, 56, 154, 301, 315], "incorpor": 20, "path_graph": [20, 154, 165, 167, 168, 174, 289, 291], "grown": [20, 198, 231, 289], "unpack": [20, 55, 76, 289], "ebunch": [20, 289], "dictionari": [20, 77, 123, 154, 236, 237, 238, 239, 246, 247, 248, 249, 289, 291], "11": [20, 27, 29, 30, 31, 52, 56, 61, 74, 77, 138, 139, 140, 142, 156, 157, 158, 194, 289, 302, 310, 313, 319], "complaint": 20, "clear": [20, 36, 54, 56, 90, 91, 189, 191, 192, 194, 196, 198, 199, 201, 203, 204, 207, 218, 220, 221, 223, 225, 226, 227, 229, 233, 234, 235, 241, 242, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 284, 289, 291], "quietli": [20, 184, 289], "ignor": [20, 154, 165, 184, 289, 296], "spam": 20, "stage": [20, 41, 47, 59, 72, 73, 143, 301], "8": [20, 30, 31, 32, 34, 41, 56, 58, 61, 74, 77, 138, 192, 215, 234, 257, 266, 268, 274, 278, 284, 286, 289, 291, 302, 304, 315, 320], "seen": [20, 49, 66, 301], "report": [20, 41, 74, 113, 212, 213, 214, 289, 292], "adj": [20, 79, 154, 289], "view": [20, 24, 66, 97, 162, 166, 185, 186, 289, 292, 298, 310], "item": [20, 28, 66, 138, 139, 140, 143, 149, 154, 289, 302], "One": [20, 49, 66, 71, 72, 73, 77, 141, 143, 220, 229, 283, 302], "nbunch": [20, 162, 166, 168, 184, 289], "remove_nod": [20, 289], "remove_nodes_from": [20, 289], "remove_edg": [20, 289], "remove_edges_from": [20, 218, 220, 289], "instanti": [20, 77, 149, 304], "digraph": [20, 151, 156, 166, 168, 173, 174, 177, 182, 183, 194, 211, 212, 213, 216, 220, 221, 223, 225, 226, 227, 228, 232, 283, 284, 285, 287, 290, 291, 292], "edgelist": [20, 267, 291], "subscript": [20, 289], "notat": [20, 254, 256, 258, 260, 262, 268, 270, 289], "yellow": [20, 138], "blue": [20, 138, 289], "pair": [20, 51, 56, 76, 77, 79, 136, 149, 188, 193, 194, 200, 216, 234, 240, 289, 292, 295, 301, 303], "undirect": [20, 45, 71, 77, 97, 139, 143, 151, 154, 160, 164, 186, 209, 210, 216, 218, 225, 227, 230, 232, 233, 234, 236, 237, 238, 239, 240, 246, 251, 255, 256, 259, 262, 263, 265, 271, 284, 286, 289, 303], "twice": [20, 267, 289], "fg": [20, 303], "add_weighted_edges_from": [20, 173, 289], "125": [20, 138, 222, 233], "75": [20, 56, 61, 64, 65, 67, 74, 154, 212, 213, 214, 216, 296, 316], "375": 20, "eattr": [20, 289], "wt": 20, "attach": [20, 76, 138, 225, 228], "fridai": [20, 289, 292], "mondai": 20, "5pm": [20, 289], "2pm": [20, 289], "room": [20, 289], "714": [20, 289], "to_direct": [20, 151, 209, 210, 225, 227, 289], "representaion": 20, "dg": [20, 58, 71], "represent": [20, 49, 66, 68, 71, 151, 287, 289, 300], "dgv": 20, "as_view": [20, 185, 186, 289], "shallow": 20, "out_edg": [20, 166, 289], "in_degre": [20, 62, 64, 141, 143, 146, 149, 220, 246, 247, 289], "predecessor": [20, 159, 232, 283, 289], "successor": [20, 125, 159, 226, 227, 232, 289], "out_degre": [20, 220, 246, 247, 289], "feel": [20, 36, 41], "inconsist": [20, 74], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 36, 54, 62, 71, 77, 141, 146, 211, 212, 213, 214, 216, 218, 222, 225, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 243, 245], "to_undirect": [20, 151, 225, 227, 289], "theoret": 20, "load_ldbc": [20, 56, 320], "foo": [20, 289], "famou": [22, 23, 288], "hadoop": [22, 302], "cetric": 22, "aim": [22, 56, 65, 68, 69, 70, 71, 73], "stop": [22, 27, 29, 68, 72, 76, 154], "intergr": 22, "open": [22, 35, 36, 50, 55, 62, 70, 73, 149, 291, 301], "actual": [22, 23, 50, 51, 54, 56, 62, 80, 82, 142, 240, 289, 292, 300, 310], "vertexinputformat": 22, "edgeinputformat": 22, "load_from": [22, 29, 151, 296], "vformat": [22, 151], "p2pvertexinputformat": 22, "eformat": [22, 151], "p2pedgeinputformat": 22, "gs_test_dir": [22, 32], "graphscope_sess": [22, 151], "31": [22, 23, 44, 45, 139, 140, 142, 322], "v_prop": [22, 76, 112], "vdata": 22, "e_prop": [22, 76, 112], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 154], "toward": [22, 302], "offici": [22, 48, 50, 52, 70], "pl": 22, "snapshot": [22, 55, 73, 298, 302], "writabl": 22, "degrad": [22, 73], "procedur": [22, 28, 48, 49, 56, 87, 231], "except": [22, 41, 55, 61, 64, 65, 67, 72, 142, 149, 167, 184, 188, 199, 208, 218, 220, 269, 289, 296, 301, 316], "right": [22, 147, 190, 199, 201, 222, 287], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 31, 36, 44, 49, 58, 69, 71, 73, 74, 211], "proceed": [23, 27, 211, 229], "side": [23, 36, 49, 54, 55, 77, 96, 139, 192, 301], "venv": [23, 52, 67], "virtualenv": 23, "pyspark_venv": 23, "bin": [23, 30, 50, 52, 55, 56, 66, 67, 163, 302, 310, 314, 320], "pyspark_venv_g": 23, "tar": [23, 28, 30, 302], "gz": [23, 30, 291, 302], "upload": [23, 48], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 66, 151, 320], "oss": [23, 28, 30, 76, 144, 151, 302, 312, 313, 322], "beij": [23, 28, 30, 59, 71, 138, 302, 313], "fixm": 23, "yuansi": 23, "env": [23, 41, 52, 67, 144], "var": [23, 32, 149, 302, 310, 322], "gs_jar": 23, "l": [23, 28, 34, 62, 71, 141, 209, 210, 212, 213, 214, 221, 222, 223, 225, 226, 227, 230, 237, 238, 239, 240, 242, 246, 247, 248, 249, 278, 281, 289, 310], "lib": [23, 30, 50, 85, 302], "7077": 23, "master_url": 23, "conf": [23, 50, 55, 76, 302, 320], "executor": [23, 34, 48, 50, 66, 310], "driver": [23, 27, 55, 115, 151, 302, 320], "2g": 23, "10g": [23, 314], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": 23, "url": [23, 151, 152, 302, 320], "rdd": 23, "pom": [23, 302], "xml": [23, 76, 302], "classifi": [23, 59, 61, 65, 67, 71, 149, 312], "sure": [23, 27, 29, 39, 50, 56, 143, 147, 149, 296, 302], "conflict": [23, 52, 56, 61, 151, 279], "correctli": [23, 36, 41, 58, 154, 302], "resolv": [23, 41, 151, 303], "goal": [23, 49, 59, 68, 71, 301], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 40, 49, 195, 302], "config": [23, 27, 30, 48, 50, 55, 113, 123, 131, 136, 137, 150, 153, 293, 296, 298, 302, 303, 320, 321], "socket": [23, 50, 76, 303], "bound": [23, 54, 56, 70, 114, 208, 296, 301, 304], "vineyardsock": 23, "filepath": 23, "sock": [23, 50], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "observ": [23, 41], "argument": [23, 54, 56, 62, 154, 156, 157, 158, 187, 195, 225, 232, 236, 237, 238, 239, 240, 267, 289, 292, 295, 296, 302, 303, 312], "shell": [23, 34, 77], "grow": [24, 44, 58, 66, 208, 218, 225, 226, 227, 288, 301], "capac": [24, 32, 50, 289, 296], "indivis": 24, "succinctli": 24, "oppos": [24, 62], "orient": [24, 62, 73, 146, 302], "googl": [24, 34, 69, 314], "powergraph": [24, 73, 74], "wa": [24, 28, 29, 36, 54, 56, 68, 74, 143, 154, 208, 223, 236, 237, 238, 239, 288, 302], "2010": [24, 74, 77, 154, 214, 281, 286], "sequenc": [24, 54, 56, 77, 151, 188, 208, 218, 219, 220, 221, 222, 223, 224, 240, 246, 247, 250, 283, 284, 289, 290, 303], "conceptu": 24, "behavior": [24, 54, 56, 79, 296], "becom": [24, 44, 56, 62, 289, 301, 302], "inact": 24, "again": [24, 41, 304], "termin": [24, 35], "halt": [24, 70, 79, 228], "individu": [24, 48, 50, 65, 67], "messageiter": [24, 79], "mindist": 24, "issourc": 24, "vertex_id": [24, 44, 322], "inf": 24, "done": [24, 59, 62, 138, 149, 154, 251, 303], "getvalu": [24, 40], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 41, 302], "dramat": 24, "face": [24, 30, 49, 56, 69, 274, 275], "power": [24, 56, 58, 77, 154, 208, 218, 266, 289], "law": [24, 208, 218], "gather": [24, 296], "scatter": [24, 139], "accumul": [24, 62, 283], "workload": [27, 35, 44, 47, 49, 50, 52, 53, 56, 58, 66, 68, 74, 302, 304, 305], "grpc": [27, 30, 41, 76, 313, 315], "interact": [27, 28, 32, 35, 39, 44, 45, 48, 49, 50, 53, 55, 56, 58, 66, 68, 69, 72, 73, 75, 102, 106, 107, 133, 151, 230, 279, 294, 296, 316, 320], "linux": [27, 29, 30, 35, 48, 61, 74, 81, 319], "maco": [27, 29, 35, 41, 52, 313, 315, 316, 319], "skip": [27, 30, 34, 70, 81, 302], "recommend": [27, 29, 35, 36, 41, 48, 52, 56, 59, 66, 67, 71, 143], "minikub": [27, 29, 302], "instruct": [27, 28, 29, 32, 48, 50, 52, 55, 67, 70, 76, 89, 143], "platform": [27, 31, 36, 47, 48, 49, 61, 72, 73, 74, 81, 138, 280, 296], "desktop": [27, 302, 316], "server": [27, 28, 49, 50, 55, 58, 62, 66, 68, 70, 75, 142, 147, 148, 149, 301, 302, 314, 320], "kubectl": [27, 28, 29, 32, 37, 41, 48, 302, 310, 315], "kube": [27, 296], "apivers": [27, 32], "v1": [27, 32, 34, 41, 54, 56, 61, 64, 65, 67, 70, 137, 254, 267, 292, 315, 316, 321], "certif": 27, "ca": 27, "crt": 27, "last": [27, 29, 56, 143, 148, 151, 211, 283, 310], "16": [27, 30, 50, 56, 74, 137, 139, 140, 142, 144, 245, 268, 282, 321], "2023": [27, 310], "44": [27, 74, 139, 140, 142, 282], "05": [27, 216, 229], "cst": 27, "sig": [27, 312], "28": [27, 56, 59, 71, 74, 139, 140, 142, 286], "cluster_info": 27, "172": [27, 74], "21": [27, 30, 44, 56, 74, 77, 139, 140, 142, 262, 302], "67": [27, 74, 77], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 32, 37, 296], "profil": [27, 320], "encapsul": [27, 58, 59, 137, 143, 296], "entranc": [27, 143], "tag": [27, 39, 54, 56, 74, 216, 296, 302, 314], "intranet": 27, "internet": [27, 28, 30, 56, 69, 286, 288], "might": [27, 41, 154, 246, 289, 305], "k8s_image_registri": [27, 32, 296], "k8s_image_repositori": [27, 296], "k8s_image_tag": [27, 32, 296], "fit": [27, 44, 48, 63, 64, 81], "increas": [27, 37, 41, 44, 139, 187, 188, 196, 218, 220, 228, 246, 249, 251, 301], "cpu": [27, 41, 48, 144, 296, 305, 315], "num_work": [27, 32, 131, 136, 296, 320], "k8s_engine_cpu": [27, 131, 136, 296], "32": [27, 54, 74, 139, 140, 142, 150, 154], "k8s_engine_mem": [27, 41, 131, 136, 296, 315], "256gi": 27, "vineyard_shared_mem": [27, 41, 131, 136, 296, 315], "k8s_client_config": [27, 296], "disk": [27, 41, 48, 66, 302], "test_data": [27, 61, 65, 67, 313, 316], "testingdata": [27, 29, 32, 313, 316], "k8s_volum": [27, 29, 32, 131, 136, 296, 313, 316], "constructor": [27, 45, 189, 191, 192, 194, 196, 198, 199, 201, 203, 204, 207, 218, 220, 221, 223, 225, 226, 227, 229, 233, 234, 235, 241, 242, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 284, 291], "vm": [27, 29, 76], "copi": [27, 28, 29, 48, 66, 68, 73, 94, 154, 161, 165, 167, 168, 226, 232, 287, 289, 292, 300, 301, 302, 303, 304], "hostpath": [27, 29, 32, 48, 296, 313, 316], "expandus": [27, 313, 316], "mountpath": [27, 29, 32, 296, 313, 316], "expect": [27, 33, 36, 41, 81, 218, 220, 222, 292, 296], "monitor": [27, 28, 58], "wait": [27, 41, 296], "finish": [27, 40, 55, 64, 79, 139, 142], "remov": [27, 28, 54, 56, 77, 81, 144, 161, 167, 169, 215, 218, 220, 222, 264, 267, 283, 289, 302], "remain": [27, 54, 69, 138, 143, 223, 250], "statefulset": [27, 302], "svc": [27, 48], "left": [27, 35, 77, 151, 154, 190, 222], "ideal": [28, 36, 73], "deploy_graphscope_on_self_managed_k8": 28, "chart": [28, 41, 48, 50, 56, 302, 313, 315], "minut": [28, 41, 49], "succe": 28, "past": [28, 49, 304], "noteport": 28, "node_ip": [28, 302], "ojsonpath": 28, "hostip": 28, "node_port": 28, "spec": [28, 32, 76, 149], "nodeport": [28, 296, 302, 316], "echo": [28, 30], "listen": [28, 50, 76], "statement": [28, 143, 302], "ident": [28, 78, 94, 151, 185, 186, 190, 261, 281, 283, 289], "reconnect": [28, 296], "disconnect": [28, 154, 230, 231, 246, 249, 296], "sess2": 28, "comment": [28, 36, 44, 56, 138, 289, 291, 292, 317, 322], "homepag": 28, "remot": [28, 35, 55, 81, 152, 296, 320], "cater": [28, 66], "tgz": 28, "unzip": [28, 55, 320], "zxvf": 28, "simplifi": [29, 48, 66, 67, 68, 70, 72, 138, 143, 301], "etcd": [29, 41, 48, 296, 298, 313], "vineyard_replica": 29, "vineyard_etcd_replica": 29, "vineyardctl": [29, 296], "vineyard_deploy": 29, "create_namespac": 29, "restart": [29, 310], "ag": [29, 32, 49, 51, 54, 56, 59, 71, 137, 138, 151, 295, 310, 320, 321], "etcd0": 29, "73m": 29, "vineyardd": [29, 32, 50, 296], "5db59987f": 29, "vr2fg": 29, "mount": [29, 32, 41, 49, 148, 296, 313, 315, 316], "onto": 29, "stai": 29, "aliv": 29, "k8s_namespac": [29, 32, 131, 136, 296], "k8s_vineyard_deploy": [29, 32, 131, 136, 296], "reload": [29, 302], "vineyard_id": [29, 32, 151, 310], "new_sess": 29, "22731319746904674": 29, "softwar": [29, 32, 48, 54, 58, 66, 151, 303], "successfulli": [29, 50, 59, 64, 208, 302], "folder": [30, 301], "cento": [30, 31, 41, 52, 74, 315, 319], "82": [30, 74], "boost": [30, 58, 66, 76], "perl": 30, "v3": [30, 70, 74], "24": [30, 48, 56, 74, 139, 140, 142, 256, 274, 282], "openmpi": [30, 74], "gflag": 30, "glog": 30, "arrow": [30, 40, 76, 88, 101, 151, 292], "74": [30, 74, 280], "openssl": [30, 41, 315], "zlib": 30, "protobuf": 30, "49": [30, 56, 74, 139, 140, 142], "13": [30, 34, 56, 74, 138, 139, 140, 142, 194, 235], "libclang": 30, "curl": [30, 55], "lo": [30, 55], "czf": 30, "mkdir": [30, 41, 149, 315], "workdir": 30, "xzf": 30, "yum": 30, "scl": 30, "rh": [30, 40], "y": [30, 31, 56, 77, 235, 236, 240], "devtoolset": 30, "python38": 30, "opt": [30, 35, 49, 50, 60, 149], "bash": [30, 310, 314], "euxo": 30, "pipefail": 30, "dir": [30, 302], "ld_library_path": 30, "lib64": 30, "py2": 30, "py3": [30, 314], "manylinux2010_x86_64": 30, "whl": [30, 144, 147], "x86_64": 30, "sh": [30, 34, 55, 144, 302, 319, 320], "licens": [30, 314], "dbuild_shared_lib": 30, "ON": 30, "dcmake_prefix_path": 30, "dcmake_install_prefix": 30, "boost_1_74_0": 30, "bootstrap": 30, "filesystem": [30, 138], "program_opt": 30, "regex": 30, "chrono": 30, "atom": [30, 302], "date_tim": 30, "b2": 30, "openssl_1_1_1h": 30, "fpic": 30, "cpp": 30, "darrow_comput": 30, "darrow_with_utf8proc": 30, "off": [30, 49, 66, 274, 302], "darrow_csv": 30, "darrow_filesystem": 30, "darrow_ipc": 30, "darrow_build_benchmark": 30, "darrow_build_exampl": 30, "darrow_build_integr": 30, "darrow_build_util": 30, "darrow_build_test": 30, "darrow_enable_timing_test": 30, "darrow_fuzz": 30, "darrow_jemalloc": 30, "darrow_build_shar": 30, "darrow_build_stat": 30, "mpi": [30, 76], "cxx": 30, "dlopen": 30, "nproc": 30, "dgrpc_instal": 30, "dgrpc_build_test": 30, "dgrpc_build_csharp_ext": 30, "dgrpc_build_grpc_csharp_plugin": 30, "dgrpc_build_grpc_node_plugin": 30, "dgrpc_build_grpc_objective_c_plugin": 30, "dgrpc_build_grpc_php_plugin": 30, "dgrpc_build_grpc_python_plugin": 30, "dgrpc_build_grpc_ruby_plugin": 30, "dgrpc_backwards_compatibility_mod": 30, "dgrpc_protobuf_provid": 30, "dgrpc_zlib_provid": 30, "dgrpc_ssl_provid": 30, "dopenssl_root_dir": 30, "dcmake_cxx_flag": 30, "fpermiss": 30, "v6d": [30, 48, 296], "dbuild_vineyard_test": 30, "dbuild_vineyard_python_bind": 30, "j4": 30, "dnetworkx": 30, "denable_java_sdk": 30, "dbuild_test": 30, "ubuntu": [31, 41, 48, 52, 144, 313, 315, 319], "04": [31, 41, 48, 52, 56, 74, 144, 313, 315, 319], "intel": [31, 52, 313, 319], "appl": [31, 41, 52, 289, 313, 315, 319], "silicon": [31, 52, 313], "openjdk": 31, "wheel": [31, 41, 207, 273, 315, 318], "wish": [31, 36], "nightli": [31, 41, 315], "clean": [31, 44, 52, 67, 81, 147, 301], "tidi": 31, "quickli": [31, 35, 58, 67, 71, 73, 149, 296], "insid": [31, 37, 41, 54, 56, 77, 85, 138, 150, 151, 264, 295, 296, 320], "apt": [31, 144], "jdk": [31, 57, 306, 312], "ipython": 31, "tensorflow": [31, 58, 59, 61, 64, 65, 66, 67, 71, 72, 137, 138, 139, 142, 143, 145, 149, 316], "tool": [31, 34, 35, 44, 48, 55, 58, 60, 66, 236, 238, 298, 301, 302, 303, 319], "dep": [31, 34, 313, 314], "fly": [31, 67], "clang": [31, 34, 52, 314], "essenti": [31, 54, 58, 72], "arm": 31, "preliminari": 31, "yet": [31, 54, 78, 246, 249, 289, 295, 302], "calcul": [32, 49, 54, 56, 77, 79, 140, 154, 208, 240], "period": [32, 302], "restor": [32, 151, 296], "persistentvolum": [32, 302], "dump": [32, 77, 115, 151], "cat": [32, 302, 310], "eof": 32, "metadata": [32, 41, 76, 151, 289, 298, 302], "1gi": [32, 296], "accessmod": 32, "readwriteonc": 32, "storageclassnam": 32, "importantli": 32, "otherwis": [32, 56, 69, 77, 138, 142, 143, 144, 154, 171, 208, 228, 238, 287, 289, 296, 301, 302], "lost": [32, 296], "persistentvolumeclaim": [32, 296, 302], "matchlabel": 32, "request": [32, 41, 76, 106, 107, 139, 147, 150, 152, 183, 289, 296, 315], "extern": [32, 62, 66, 296, 302], "notic": [32, 48, 55, 56, 66, 143, 151, 282, 289, 296, 304], "greater": [32, 77, 139, 154, 208, 239, 296, 301], "ccc": 32, "sub_graph": [32, 51, 67, 316, 317], "haslabel": [32, 44, 51, 52, 56, 67, 320], "simple_g": [32, 67, 312, 316], "pr_result": 32, "tc_result": 32, "add_column": [32, 67, 76, 151, 312, 316, 317], "tc": [32, 67, 316], "997255889378630": 32, "997163552113975": 32, "store_graphs_to_pvc": 32, "graphid": [32, 296], "objectid": [32, 76, 151, 296, 301, 303], "pvc_name": [32, 296], "schema": [32, 49, 50, 51, 55, 56, 64, 65, 77, 138, 139, 148, 151, 289, 298, 300, 301, 302, 303, 317, 320, 322], "oid_typ": [32, 45, 76, 77, 107, 129, 151, 322], "vid_typ": [32, 76], "ulong": 32, "lang": [32, 34], "eid": [32, 40, 151, 302], "restore_graphs_from_pvc": 32, "anymor": 32, "nativ": [33, 49, 66, 72, 73], "behind": [33, 64, 301, 304, 310], "scene": [33, 49, 64, 146], "lower": [33, 49, 54, 56, 70, 208, 215, 228], "cost": [33, 49, 56, 66, 70, 154, 302], "ownership": 33, "cach": [33, 59, 69, 73, 289], "layout": [33, 69, 302], "were": [33, 36, 56, 74, 240, 302], "outperform": [33, 58, 69, 71, 72, 73], "art": [33, 58, 69, 72, 74], "voderank": 33, "average_degree_assort": 33, "degree_assort": 33, "guidelin": [34, 36], "promot": 34, "readabl": [34, 289], "qualiti": [34, 36, 71], "black": [34, 314], "enforc": 34, "rule": [34, 49, 56, 62, 69, 141, 147, 151, 188, 298], "cpplint": 34, "flake8": 34, "fmt": 34, "lint": [34, 36], "makefil": 34, "graphscope_clformat": 34, "graphscope_cpplint": 34, "dev": [34, 47, 313, 314], "pushd": 34, "isort": 34, "diff": 34, "popd": 34, "interactive_engin": [34, 35, 50, 55], "check_format": 34, "files_to_format": 34, "aosp": 34, "toolchain": [35, 60], "devcontain": 35, "json": [35, 48, 50, 296, 298, 302, 303], "setup": [35, 36, 41, 151, 296, 314], "visual": [35, 36, 66], "studio": 35, "collabor": [35, 66, 301], "stabl": [35, 77, 151, 298, 302, 319], "haven": [35, 56], "navig": [35, 301], "icon": 35, "bottom": [35, 199], "corner": 35, "window": [35, 56, 319], "reopen": 35, "marketplac": 35, "prompt": [35, 55], "shift": [35, 56, 154, 254], "ctrl": 35, "made": [35, 36, 48, 62, 74, 138, 141, 147, 154, 249, 301], "rebuild": 35, "subcommand": [35, 60], "assembli": [35, 50], "learning_engin": 35, "graphlearn": [35, 59, 61, 64, 65, 67, 137, 138, 139, 143, 144, 149, 150, 153, 296, 310, 316, 321], "compos": [35, 59, 62, 67, 69, 73], "alon": [35, 49, 51], "circul": [35, 192], "edit": [35, 36, 235, 272], "entrypoint": [35, 316], "plai": [35, 49, 57, 75, 148, 153, 306], "thank": [36, 44, 66], "interest": [36, 56, 58, 69, 302], "focus": [36, 56, 66, 72, 74, 143, 281, 302], "eager": [36, 77, 78, 129, 132, 133, 151, 152, 296], "contributor": [36, 282], "welcom": 36, "engag": [36, 66, 67], "good": 36, "particip": 36, "join": [36, 56, 139, 149, 190, 193, 201, 208, 217, 218, 231, 233, 236, 237, 238, 239, 240, 248, 249, 289, 301], "ask": [36, 47], "question": [36, 47, 56, 315], "ve": [36, 48, 55, 66], "hasn": [36, 56], "confirm": 36, "concis": [36, 51, 152], "descript": [36, 49, 62, 138, 141, 146, 147, 246, 254, 302], "relev": [36, 144, 183, 289, 300], "reproduc": [36, 289], "yourself": 36, "why": [36, 41, 56, 77], "saw": 36, "incomplet": 36, "inaccur": 36, "knowledg": [36, 44, 59, 71, 145], "gain": 36, "submiss": 36, "fact": [36, 49, 246, 249], "page": [36, 47, 68, 77, 80, 82, 199, 214, 278, 318], "button": 36, "tbf": [36, 46, 74, 297, 308, 311], "isn": [36, 55, 142], "someon": 36, "approach": [36, 51, 58, 59, 66, 68, 71, 142, 218, 231, 286, 301], "spend": 36, "_": [36, 77, 151, 154, 289, 292, 312, 315, 317, 322], "secret": [36, 296, 313, 322], "accident": 36, "hook": 36, "titl": [36, 56, 65, 67], "grammar": 36, "spell": 36, "500": [36, 208], "word": [36, 56, 65, 67, 70, 71, 149, 151, 289], "42": [36, 56, 74, 139, 140, 142, 212, 214, 224, 282], "ticket": 36, "chines": 36, "everyon": 36, "beginn": 36, "patch": 36, "rest": [36, 289, 302], "attain": 36, "feedback": [36, 44], "discourag": 36, "rebas": 36, "workflow": [36, 44, 66, 71, 72, 76], "upstream": [36, 143], "leas": 36, "ping": [36, 312], "await": 36, "unfamiliar": 36, "acronym": 36, "glossari": [36, 47, 282], "ci": 36, "approv": 36, "extra": [36, 41, 48, 50, 154, 250, 315], "date": [36, 56, 301, 302], "todo": [36, 67, 147], "dongz": 36, "potenti": [36, 59, 66, 301], "concern": [36, 66, 73, 301], "reach": [36, 41, 51, 56, 70, 143, 148, 151, 154, 231, 246, 249, 301], "action": 36, "realiti": [36, 143], "uncommon": 36, "infrastructur": 36, "vital": 36, "inspect": [36, 296], "failur": [36, 73], "event": [37, 208], "involvedobject": 37, "warn": [37, 289], "pinpoint": 37, "log_level": [37, 131, 136, 296], "exec": [37, 302, 310], "diagnost": 37, "forward": [37, 59, 61, 62, 64, 65, 67, 71, 143, 316], "browser": [37, 56], "explain": [37, 56, 138, 296, 301, 320], "compris": [39, 55, 65, 66, 142], "busi": [39, 45, 49, 52, 56, 59, 66, 67, 73], "e2": [39, 268], "coupl": [39, 68, 73, 269, 298], "sai": 39, "\u6807\u7b7e": 40, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 40, "\u5c5e\u6027": [40, 320, 322], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 40, "\u539f\u59cbid": 40, "oid": [40, 76, 78, 79], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 40, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 40, "\u5b50\u56feid": 40, "fid": [40, 76, 79, 113, 298], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 40, "\u5206\u533a\u5668": 40, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 40, "\u7684\u6620\u5c04": 40, "\u5b50\u56fe": 40, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 40, "\u5b58\u50a8\u4e86\u9876\u70b9": 40, "\u8fb9": [40, 312], "\u9876\u70b9\u6570\u636e": 40, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 40, "\u5185\u90e8\u70b9": 40, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 40, "\u5916\u90e8\u70b9": 40, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 40, "\u672c\u5730id": 40, "lid": [40, 76, 113], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 40, "\u5168\u5c40id": 40, "gid": [40, 76, 113], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 40, "\u88abfragment\u5171\u8bc6": 40, "\u7528\u4e8e\u5b58\u50a8gid": 40, "oid\u7684\u6620\u5c04\u5173\u7cfb": 40, "\u7684\u8282\u70b9": 40, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 40, "gid\u7f16\u7801": 40, "offset": [40, 76, 140, 148, 192], "\u5176\u4e2d": [40, 312, 317], "\u548c": [40, 143, 312, 314, 315, 316, 317, 319, 320, 321, 322], "\u5171\u540c\u7ec4\u6210": 40, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 40, "\u7684\u9876\u70b9": 40, "\u5e8f\u53f7": 40, "lid\u7f16\u7801": 40, "\u586b\u5145": 40, "\u603b\u662f": 40, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 40, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 40, "\u5206\u4e3ahashpartitioner\u548csegmentedpartiton": 40, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 40, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 40, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 40, "\u8fb9\u6587\u4ef6": 40, "\u5f97\u5230\u591a\u4e2avertex": 40, "\u548cedg": 40, "etabl": 40, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 40, "\u5206\u7ec4": 40, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 40, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 40, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 40, "\u8fb9\u8868": 40, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 40, "partial_v_t": 40, "partial_e_t": 40, "num": [40, 50, 54, 55, 56, 150, 301], "table\u5305\u542boid": 40, "table\u5305\u62ecsrc\u548cdst\u7684oid": 40, "\u8bbf\u95eevtable\u7684oid\u5217": 40, "\u6839\u636eoid\u67e5\u8be2partit": 40, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 40, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 40, "gather\u64cd\u4f5c": 40, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 40, "\u6839\u636efrag\u6570\u91cf": 40, "label\u6570\u91cf\u548c\u5168\u90e8oid": 40, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 40, "fid_t": [40, 76], "fnum_": 40, "label_id_t": [40, 76], "label_num_": 40, "hashmapbuild": 40, "oid_arrays_": 40, "cur_gid": 40, "id_parser_": 40, "generateid": 40, "\u8d77\u59cbgid": 40, "int64_t": [40, 48, 76, 77, 151, 304, 322], "vnum": 40, "length": [40, 44, 54, 56, 70, 77, 141, 154, 193, 195, 200, 222, 243, 247, 253, 275, 284, 289, 322], "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 40, "\u751f\u6210gid": 40, "emplac": 40, "getview": 40, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 40, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 40, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 40, "\u6839\u636epartitioner\u83b7\u53d6fid": 40, "\u6839\u636efid": 40, "id\u548coid\u67e5\u8be2gid": 40, "\u751f\u6210gid\u6570\u7ec4": 40, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 40, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 40, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 40, "\u5bf9etable\u6267\u884cshuffl": 40, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 40, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 40, "\u5904\u7406\u9876\u70b9": 40, "\u521d\u59cb\u5316id": 40, "parser": [40, 49], "\u521d\u59cb\u5316ivnum": 40, "ovnum\u548ctvnum\u6570\u7ec4": 40, "\u6309\u7167vertex": 40, "label\u5206\u7ec4": 40, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 40, "\u5411vertex": 40, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 40, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 40, "\u5c06vertex": 40, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 40, "vid_parser_": 40, "vertex_label_num_": 40, "vertex_tables_": 40, "resiz": 40, "ivnums_": 40, "ovnums_": 40, "tvnums_": 40, "combinechunk": 40, "default_memory_pool": 40, "vm_ptr_": 40, "getinnervertexs": [40, 76], "fid_": 40, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 40, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 40, "\u901a\u8fc7src": 40, "gid\u5217\u548cdst": 40, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 40, "\u5e76\u6309\u7167vertex": 40, "edge_t": [40, 138, 149], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 40, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 40, "collect_outer_vertic": 40, "dynamic_pointer_cast": [40, 303], "converttoarrowtyp": [40, 76], "arraytyp": [40, 76], "chunk": [40, 123], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 40, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 40, "\u5916\u90e8\u70b9\u7684lid\u7531label": 40, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 40, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 40, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 40, "ovg2l_maps_": 40, "ovgid_lists_": 40, "cur_list": 40, "collected_ovgids_": 40, "\u6392\u5e8fgid": 40, "cur_map": 40, "buildertyp": 40, "vec_build": 40, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 40, "\u5176\u4e2dfid\u4e3a0": 40, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 40, "cur_id": 40, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 40, "append": [40, 56, 64, 65, 67, 79, 137, 148, 149, 220, 283, 316, 321], "cur_list_length": 40, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 40, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 40, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 40, "\u5220\u9664edg": 40, "table\u7684src\u5217\u548cdst\u5217": 40, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 40, "generate_local_id_list": 40, "gid_list": 40, "lid_list": 40, "vec": 40, "getfid": 40, "\u751f\u6210\u5185\u90e8\u70b9lid": 40, "getlabelid": 40, "getoffset": 40, "\u67e5\u8be2g2l": 40, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 40, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 40, "edge_src_": 40, "edge_dst_": 40, "table\u7684src\u5217\u548cgid\u5217": 40, "\u53ea\u4fdd\u7559\u5c5e\u6027": 40, "tmp_table0": 40, "removecolumn": 40, "edge_tables_": 40, "\u6784\u5efacsr": 40, "\u5bf9\u4e8e\u6709\u5411\u56fe": 40, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 40, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 40, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 40, "\u6784\u5efarow": 40, "offset\u6570\u7ec4": 40, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 40, "\u4f7f\u7528row": 40, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 40, "\u586b\u5145dst": 40, "lid\u548ceid\u5230nbr": 40, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 40, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 40, "generate_directed_csr": 40, "vid_array_t": [40, 76], "src_list": 40, "dst_list": 40, "fixedsizebinaryarrai": 40, "int64arrai": 40, "edge_offset": 40, "actual_edge_num": 40, "v_label": [40, 76, 298], "edge_num": [40, 113, 316, 320], "src_list_ptr": 40, "raw_valu": 40, "dst_list_ptr": 40, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 40, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 40, "tvnum": 40, "offset_vec": 40, "degree_vec": 40, "int64build": 40, "podarraybuild": 40, "nbr_unit_t": [40, 76], "edge_build": 40, "v_offset": 40, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 40, "ptr": 40, "mutablepoint": 40, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 40, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 40, "vid": [40, 76, 151], "eid_t": [40, 76], "\u66f4\u65b0offset": 40, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 40, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 40, "offsets_ptr": 40, "lh": 40, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 40, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 40, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 40, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 40, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 40, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 40, "lid\u548ceid": 40, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 40, "\u5c01\u88c5": 40, "seal": [40, 58, 71], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 40, "ovgid\u548cg2l_map\u540e": 40, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 40, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 40, "\u4e5f\u5c31\u662f\u8bf4": [40, 313], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 40, "\u5f53\u524dfragment": 40, "fragment\u603b\u6570": 40, "directed_": 40, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 40, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 40, "edge_label_num_": 40, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 40, "propertygraphschema": 40, "schema_": 40, "shcema": 40, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 40, "\u9876\u70b9\u5c5e\u6027\u8868": 40, "\u4e0d\u5305\u542bid\u5217": 40, "\u5916\u90e8\u70b9gid": 40, "hashmap": 40, "gid\u5230lid\u6620\u5c04": 40, "\u8fb9\u5c5e\u6027": 40, "ie_lists_": 40, "oe_lists_": 40, "csr\u7ed3\u6784\u7684column": 40, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 40, "ie_offsets_lists_": 40, "oe_offsets_lists_": 40, "csr\u7ed3\u6784\u7684row": 40, "vertex_map_t": [40, 76], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 40, "edge_tables_columns_": 40, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 40, "flatten_edge_tables_columns_": 40, "\u540c\u4e0a": 40, "vertex_tables_columns_": 40, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 40, "ie_ptr_lists_": 40, "oe_ptr_lists_": 40, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 40, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 40, "\u4e5f\u5c31\u662fcolumn": 40, "index\u7684\u8d77\u59cb\u5730\u5740": 40, "ie_offsets_ptr_lists_": 40, "oe_offsets_ptr_lists_": 40, "\u51fa\u8fb9\u7684row": 40, "offset\u8d77\u59cb\u5730\u5740": 40, "offset\u7684\u8d77\u59cb\u5730\u5740": 40, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 40, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 40, "\u76ee\u7684\u9876\u70b9fid": 40, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 40, "idst_": 40, "odst_": 40, "iodst_": 40, "idoffset_": 40, "odoffset_": 40, "iodoffset_": 40, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 40, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 40, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 40, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 40, "id\u548c\u9876\u70b9\u5e8f\u53f7": 40, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 40, "ivnum": 40, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 40, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 40, "vertex_range_t": [40, 76], "label_id": [40, 78, 79, 113], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 40, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 40, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 40, "\u5c5e\u6027id": 40, "\u5217\u53f7": 40, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 40, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 40, "\u884c\u53f7": 40, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 40, "getdata": [40, 76], "prop_id_t": [40, 76], "prop_id": 40, "property_graph_util": [40, 76], "valuegett": 40, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 40, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 40, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 40, "adj_list_t": [40, 76], "e_label": [40, 76], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 40, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 40, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 40, "offset_arrai": 40, "\u8bbf\u95eerow": 40, "oe": 40, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 40, "\u751f\u6210adjlist\u5bf9\u8c61": 40, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 40, "\u7ed3\u675f\u5730\u5740": 40, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 40, "\u548c\u51fa\u8fb9\u540c\u7406": 40, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 40, "ie": 40, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 40, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 40, "\u5bf9\u5e94\u5230\u884c\u53f7": 40, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 40, "\u4f8b\u5982": [40, 312, 316, 320, 322], "\u83b7\u53d6edg": 40, "struct": [40, 76, 212, 245], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 40, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 40, "edata_arrays_": 40, "nbr_": 40, "post": [41, 56, 143, 208, 322], "what": [41, 48, 56, 70, 148, 235, 289, 295, 301], "mininum": 41, "8g": 41, "18": [41, 52, 56, 74, 139, 140, 142, 154, 212, 261, 266, 270, 272, 275, 281, 312, 315, 319], "15": [41, 56, 64, 65, 74, 139, 140, 142, 143, 249, 271, 282, 289, 296, 315], "depoly": 41, "enssenti": 41, "No": [41, 54, 289], "debug": [41, 138, 143, 296, 302, 310], "silent": [41, 289, 310], "helm": [41, 47, 48, 302, 313, 315], "did": [41, 149], "role": [41, 49, 57, 68, 139, 148, 154, 240, 278, 286, 302, 306, 310, 315], "rolebind": [41, 315], "uninstal": [41, 48, 315], "recycl": 41, "alloc": [41, 60, 64], "databas": [41, 49, 56, 66, 68, 72, 74, 302, 312], "seem": [41, 56], "stuck": 41, "consumpt": 41, "poor": [41, 145], "acquir": [41, 55], "mostli": [41, 50, 114], "visibl": [41, 79], "engnin": 41, "volum": [41, 48, 55, 212, 213, 214, 224, 233, 278, 296, 301], "cloud": [41, 72, 73, 302], "k8s_vineyard_mem": [41, 131, 136, 296, 315], "blob": [41, 312], "shape": [41, 61, 62, 65, 67, 76, 78, 140, 141, 142, 143, 146, 149, 153, 211, 316], "forth": 41, "smaller": [41, 56, 74, 152, 154, 210, 211, 215], "Its": [41, 68, 268, 301], "shared_mem": [41, 315], "grpcio": [41, 315], "grpc_python_build_system_openssl": [41, 315], "scipi": [41, 236, 237, 238, 239, 289, 292, 315], "anaconda": [41, 315], "workaround": 41, "openbla": 41, "tri": [41, 44, 64, 70, 218, 224], "pkgconfig": 41, "cmake_prefix_path": 41, "brew": 41, "permiss": [41, 85, 315], "deni": [41, 85, 315], "pv": [41, 48, 296, 302, 315], "nf": [41, 148, 315], "appear": [41, 49, 56, 77, 194, 196, 198, 201, 203, 230, 231, 289, 315], "kafka": [41, 298, 315], "zookeep": [41, 315], "crashloopbackoff": [41, 315], "bitnami": [41, 315], "755": 41, "1001": [41, 302], "brutal": 41, "chmod": [41, 55, 315], "777": [41, 74, 315], "eleg": [41, 44], "grant": [41, 286], "timeout": [41, 50], "rais": [41, 49, 77, 85, 87, 123, 131, 136, 143, 151, 152, 154, 160, 169, 173, 174, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 228, 230, 233, 234, 235, 246, 249, 281, 284, 285, 289, 292, 296], "timeout_second": [41, 131, 136, 296, 315], "600": [41, 74, 296, 315], "enterpris": 41, "proxi": [41, 315], "properli": [41, 51], "wrong": 41, "resolut": [41, 302], "occup": 41, "hostnam": [41, 315], "no_proxi": [41, 315], "suffix": 41, "flush": 41, "stream": [41, 54, 55, 56, 59, 143, 148, 151], "forcibli": 41, "contact": 41, "slack": [41, 315], "dingtalk": [41, 315], "happi": 41, "90": [43, 74], "brief": 43, "traffic": 44, "web": [44, 77, 154, 222, 236, 241, 282], "ever": [44, 62], "amount": [44, 55, 60, 71, 141, 143, 145], "insight": [44, 69, 71], "hidden": [44, 68, 69, 71, 137, 321], "attract": 44, "attent": [44, 71, 143], "compuatit": 44, "difficult": [44, 138, 148, 302], "obstacl": 44, "attempt": [44, 48, 69, 70, 73, 289], "curv": [44, 69], "hard": [44, 54, 63, 64, 250, 301], "complic": [44, 49, 56, 78], "sql": [44, 49, 56], "deep": [44, 62, 66, 137, 142, 143, 145, 165, 168, 277, 289], "gnn": [44, 47, 59, 61, 62, 65, 66, 67, 72, 73, 137, 141, 142, 143, 145, 146, 296, 318, 321], "train": [44, 59, 61, 62, 63, 66, 67, 72, 73, 75, 139, 142, 143, 145, 146, 149, 153, 296, 316, 321], "seamlessli": [44, 48, 52, 55, 58, 66, 72, 73], "fist": 44, "establish": [44, 302], "interpret": [44, 66, 154], "mount_dataset": 44, "ran": [44, 64], "p2p_network": 44, "embed": [44, 59, 65, 67, 71, 138, 145], "inter": [44, 150, 208, 211], "wherea": [44, 208, 301], "numpi": [44, 56, 59, 76, 78, 93, 105, 115, 140, 141, 143, 144, 145, 146, 149, 151, 153, 154, 281, 289, 292, 318], "datafram": [44, 78, 92, 104, 115, 118, 151, 289, 312, 322], "head": [44, 54, 56], "csv": [44, 48, 151, 289, 292, 300, 302, 303, 316, 317, 322], "creationd": [44, 56, 317, 322], "locationip": [44, 322], "browserus": [44, 56, 322], "618475290625": 44, "2011": [44, 56, 222], "08": [44, 74, 154], "17t14": 44, "26": [44, 56, 74, 139, 140, 142, 238], "59": [44, 74], "961": 44, "0000": [44, 56], "210": [44, 74, 285], "17": [44, 56, 74, 139, 140, 142, 312], "48": [44, 74, 139, 140, 142, 241, 242, 288], "chrome": [44, 56], "ye": [44, 289], "618475290626": 44, "17t11": 44, "570": 44, "comment_replyof_com": 44, "274877907301": 44, "274877907299": 44, "274877907302": 44, "pd": [44, 322], "df_v": [44, 312, 322], "read_csv": [44, 322], "sep": [44, 322], "df_e": [44, 322], "add_vertic": [44, 151, 289, 292, 293, 316, 317, 322], "direction": 45, "retain_oid": [45, 48, 76, 129, 151, 303, 322], "int32_t": [45, 151, 322], "exce": [45, 247, 248], "infer": [45, 48, 71, 72], "benefit": [45, 55, 69, 301], "super": [45, 77, 139, 143], "precis": [45, 71, 281], "deal": [45, 69, 141], "graphcomput": [47, 320], "gl": [47, 62, 72, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150], "neural": [47, 59, 66, 67, 72, 73, 75, 137, 138, 141, 143, 145, 149], "posit": [47, 56, 71, 72, 77, 137, 143, 154, 199, 218, 220, 221, 223, 224, 228, 236, 237, 238, 239, 240, 284, 287, 301, 304], "frequent": [47, 66, 69, 302], "depoli": 47, "faq": 47, "groot": [47, 55, 66, 73], "graphar": 47, "gart": 47, "gap": 47, "oltp": [47, 66, 68], "style": [47, 58, 66, 294], "flex": 47, "too": [48, 56, 73, 139, 208, 289], "wonder": 48, "throughout": [48, 49, 54], "smoothli": 48, "easiest": 48, "websit": [48, 69, 208], "untar": 48, "cp": [48, 50, 286, 301], "tree": [48, 68, 189, 191, 199, 219, 225, 227, 237, 238, 239, 252, 253, 290, 296, 302, 322], "claim": [48, 271, 301, 302], "pvc": [48, 296, 302], "your_release_nam": 48, "frontend": [48, 50, 52, 55, 302, 310], "grep": 48, "awk": 48, "gremlinport": 48, "consol": [48, 50, 58, 70, 152, 302, 318], "subsequ": [48, 49, 50, 55, 77, 138, 139], "pertain": 48, "littl": [48, 54, 56], "v6d_modern_load": [48, 50], "data_path": [48, 303], "store_data_path": [48, 50], "header_row": [48, 151, 303], "delimit": [48, 151, 291, 303, 317], "src_label": [48, 151, 292, 296, 302, 303, 316, 317], "dst_label": [48, 151, 292, 296, 302, 303, 316, 317], "thing": [48, 143], "key1": 48, "value1": [48, 322], "key2": 48, "value2": 48, "header": [48, 151, 301, 302], "token": [48, 54, 296], "row": [48, 59, 71, 138, 151, 282, 302], "column_typ": 48, "filed1": 48, "filed2": 48, "unexpect": 48, "troubl": 48, "correspondingli": [48, 62, 246, 249], "v6d_ldbc_loader": 48, "physic": [48, 49, 66, 77, 154, 212, 213, 214, 236, 300], "scalabl": [48, 55, 69, 70, 71, 72, 73, 286], "replicacount": [48, 302], "replica": 48, "hdf": [48, 115, 148, 151, 302, 312, 322], "8182": [48, 50, 55, 302], "pegasusworkernum": 48, "obvious": 48, "x": [48, 55, 56, 74, 77, 137, 143, 149, 154, 192, 225, 233, 235, 236, 240, 264, 321], "pegasustimeout": 48, "durat": [48, 54], "000": [48, 56, 74], "inher": 49, "massiv": [49, 70], "cypher": [49, 66, 68, 72, 73], "manufactur": 49, "upcom": 49, "gql": [49, 66, 73], "entri": [49, 54, 56, 62, 64, 153, 154, 201, 218, 220, 221, 246, 248, 249, 267], "sticki": 49, "peopl": [49, 56, 289, 302], "shelv": 49, "intellig": [49, 52, 56, 66, 73, 246, 249], "throughput": [49, 66, 72, 73, 302], "hybrid": [49, 301, 302], "dedupl": 49, "higher": [49, 72, 154, 164, 228, 302], "latenc": [49, 55, 66, 72, 73], "hope": [49, 56, 302], "trade": [49, 66, 302], "inevit": 49, "realist": [49, 281], "valid": [49, 64, 65, 71, 84, 137, 184, 208, 230, 236, 285, 296, 298], "lengthi": 49, "ir": [49, 50, 66, 68], "verif": [49, 66], "repeatedli": [49, 69], "account": [49, 70, 287, 320], "80": [49, 74, 268], "decoupl": [49, 66, 73], "upper": [49, 54, 56, 59, 70, 208, 301], "briefli": [49, 71], "submit": [49, 55, 56, 67, 138, 139, 152, 298, 302, 316], "regist": [49, 76, 79, 110, 296], "plan": [49, 66, 68, 69, 70, 81, 302, 310], "algebra": [49, 278], "edgeexpans": 49, "pathexpans": 49, "legal": 49, "predic": [49, 56], "arithmet": [49, 54, 56], "aspect": [49, 56, 73], "firstli": [49, 51, 56, 73], "rbo": 49, "down": [49, 206], "slice": [49, 78, 151, 295], "cbo": 49, "statist": [49, 56, 140], "glogu": 49, "shuffl": [49, 54, 143, 149, 153], "align": [49, 62, 137, 140, 141, 240, 301], "transform": [49, 56, 76, 88, 101, 281, 289, 290, 294, 300], "mainli": [49, 56, 73, 145], "uniqu": [49, 51, 55, 66, 67, 68, 77, 127, 128, 138, 142, 147, 148, 151, 154, 256, 262, 295, 302, 303], "plu": [49, 56, 192, 264], "unaccept": 49, "come": [49, 56, 58, 67, 68, 71, 72, 74, 140, 255, 292], "kubenet": 50, "end2end": 50, "sf": [50, 56], "outlin": 50, "depth": [50, 67, 137, 149, 154, 321], "v6d_object_id": 50, "unsur": 50, "assist": [50, 69], "vineyard_ipc_socket": [50, 303], "meta": [50, 59, 76, 140, 141, 151, 300, 302], "gie_test_hom": 50, "graph_nam": 50, "rpc": [50, 76, 150, 296, 302], "1234": 50, "127": [50, 74, 302], "11234": 50, "pegasu": [50, 66], "gaia_executor": 50, "log4r": [50, 302], "yml": [50, 300, 302], "240000": 50, "1024": 50, "localhost": [50, 55, 296, 322], "authent": [50, 72, 302], "usernam": [50, 302], "password": [50, 302], "auth": [50, 154, 302], "djna": 50, "kill": [50, 296], "pkill": 50, "entiti": [51, 56, 65, 67, 71, 138], "council": [51, 74], "birthdai": [51, 322], "differenti": 51, "123456": [51, 59, 71, 302], "hasid": 51, "expos": [51, 57, 141, 152, 296, 306], "secondli": [51, 73], "triplet": 51, "path_expand": 51, "desir": [51, 151, 208, 230, 250, 252, 253], "concret": [51, 77, 78, 151], "endv": [51, 56, 70, 320], "repeat": [51, 70, 71, 143, 149, 223, 228, 231, 251, 254, 320], "path_opt": [51, 54, 56, 70, 320], "pathexpand": 51, "expr": [51, 54, 55, 56, 320], "marko": [51, 54, 56], "27": [51, 54, 56, 74, 139, 140, 142, 270], "OR": [51, 79, 289], "hasstep": 51, "shortcom": [51, 56], "groupcount": [51, 320], "BY": 51, "age_cnt": 51, "age_sum": 51, "AS": [51, 286, 290], "significantli": [51, 69, 72], "scan": [51, 301], "propertyidvalu": 51, "tabl": [51, 56, 59, 74, 137, 139, 151, 296, 298, 300, 301, 303], "larger": [51, 56, 65, 236], "inE": [51, 143, 320], "gcc": [52, 74, 319], "64": [52, 55, 62, 142, 143, 220, 320], "chip": [52, 319], "fairli": 52, "straightforward": 52, "hereaft": [52, 56, 67], "q1": [52, 56, 67], "q2": [52, 56, 67], "someth": [52, 289], "453": 52, "xxx": [52, 147, 296, 312], "pppp": 52, "op_executor": 52, "455": 52, "entr": 52, "ee": 52, "syntact": [52, 55, 70], "sugar": [52, 55, 70], "conquer": 53, "retain": [54, 230, 303], "syntax": [54, 62, 78, 143, 289, 295], "situat": [54, 56, 58, 138, 139, 302], "meant": [54, 56], "moreov": [54, 66, 72, 301], "vertexid": 54, "inject": 54, "integ": [54, 154, 189, 192, 193, 194, 195, 196, 198, 200, 201, 203, 204, 207, 208, 211, 212, 213, 214, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 267, 281, 282, 283, 284, 286, 289, 302], "edgeid": 54, "edgelabel": [54, 98], "histori": [54, 56, 70], "elementid": 54, "propertykei": 54, "accessor": 54, "eq": [54, 56, 70, 77, 320], "neq": [54, 320], "gt": [54, 56, 320], "lt": [54, 56, 320], "gte": [54, 56, 67, 316, 320], "lte": [54, 67, 316, 320], "outsid": [54, 320], "textp": [54, 320], "startingwith": [54, 320], "endingwith": [54, 320], "rko": 54, "ark": 54, "notstartingwith": [54, 320], "notendingwith": [54, 320], "notcontain": [54, 320], "unequ": 54, "nest": 54, "wheretravers": 54, "act": [54, 137, 286, 289, 321], "startkei": 54, "alter": [54, 289], "opposit": [54, 143, 217, 264], "nottravers": 54, "duplic": [54, 56, 216, 218, 220, 289, 290], "deduplabel": 54, "composit": [54, 56], "de": [54, 64], "impli": 54, "flat": 54, "selectkei": 54, "roll": [54, 56, 58], "averag": [54, 65, 67, 77, 154, 208], "accompani": 54, "aggregatefunc": 54, "emit": [54, 56, 137, 140, 143, 149, 321], "ascend": [54, 56], "asc": [54, 56], "desc": [54, 56], "bias": 54, "toss": 54, "merg": [54, 143], "uniontravers": 54, "sentenc": [54, 56], "matchsent": 54, "binder": 54, "__": [54, 55, 56, 67, 143, 316, 320], "graphnam": 54, "lengthrang": 54, "keyvaluepair": 54, "kept": [54, 56, 76], "result_opt": [54, 56, 320], "end_v": [54, 56, 320], "all_v": [54, 56, 320], "connector": [54, 56], "exponenti": [54, 56, 71, 236, 238, 239], "vada": 54, "lop": 54, "josh": 54, "rippl": 54, "peter": 54, "alias": 54, "k1": 54, "k2": 54, "v2": [54, 56, 61, 70, 137, 267, 321], "35": [54, 56, 74, 139, 140, 142, 149, 216, 266, 282], "29": [54, 56, 139, 140, 142], "unsupport": [54, 55], "unrol": 54, "linear": [54, 223, 225, 281, 301], "simplepath": [54, 320], "imper": [54, 70], "reflect": [54, 301], "latter": [54, 56, 69], "mix": [54, 77, 301], "sack": [54, 320], "sy": [55, 149], "gremlin_python": [55, 302], "graph_travers": 55, "driver_remote_connect": 55, "driverremoteconnect": [55, 302], "gremlin_endpoint": [55, 302], "remoteconn": [55, 302], "withremot": [55, 302], "assert": [55, 77, 301], "simpler": [55, 56, 289], "encompass": [55, 65], "oom": 55, "vast": 55, "mitig": 55, "risk": [55, 66], "queue": [55, 79], "graph_url": [55, 152, 302, 320], "q": [55, 141, 143, 149, 231, 235], "stopiter": 55, "resultiterationbatchs": 55, "addcontactpoint": [55, 302], "resultset": [55, 102, 302], "hasnext": 55, "dlcdn": 55, "your_endpoint_address": 55, "your_endpoint_port": 55, "classnam": [55, 320], "ser": [55, 320], "gryomessageserializerv1d0": [55, 320], "serializeresulttostr": [55, 320], "exit": [55, 77, 320], "websocket": [55, 320], "worth": [55, 65, 143, 151, 289], "mutat": 55, "lambda": [55, 56, 137, 143, 149, 154, 225, 236, 238, 239, 240, 321], "groovi": 55, "currenttimemilli": [55, 320], "transact": [55, 66, 72, 73, 74, 298, 302, 312], "secondari": 55, "leverag": [55, 57, 58, 68, 81, 281, 298, 306], "rocksdb": [55, 302], "isol": [55, 154, 250, 302], "therein": 55, "regard": [56, 65, 301], "realm": 56, "audit": 56, "toolsuit": 56, "primarili": [56, 70, 301], "snb": [56, 317, 322], "qp": [56, 72], "simul": [56, 113, 149], "conclus": 56, "confid": 56, "profici": 56, "intric": 56, "permit": [56, 289], "3k": 56, "gremlin_queri": 56, "190376": 56, "787074": 56, "sf1": 56, "432345564227583365": 56, "504403158265495622": 56, "576460752303435306": 56, "432345564227579434": 56, "hastyp": 56, "504403158265495612": 56, "144115188075855941": 56, "issubclassof": 56, "504403158265495553": 56, "confus": [56, 237, 238, 239], "mechan": [56, 68, 71, 73, 298, 306], "belong": [56, 71, 77, 78, 79, 151, 279, 282, 289, 295, 302], "distinguish": [56, 66, 137, 138, 139, 301], "worri": 56, "portion": [56, 69, 70, 78, 151], "havelabel": 56, "veritc": 56, "216172782113783808": 56, "216172782113784710": 56, "label1": 56, "label2": 56, "forum": 56, "72057594037936036": 56, "mention": [56, 300, 301, 310], "360287970189718653": 56, "360287970189718655": 56, "joseph": 56, "joeseph": 56, "firstnam": [56, 317, 322], "yacin": 56, "year": [56, 67, 69, 316], "q3": 56, "01": [56, 61, 65, 67, 77, 138, 154, 213, 316], "01t00": 56, "00": 56, "curiou": 56, "property_nam": [56, 78, 79, 295], "38416": 56, "mayb": 56, "pyplot": 56, "plt": 56, "comment_cont": 56, "comment_length": 56, "histogram": 56, "hist": [56, 163], "50": [56, 74, 236, 238, 239], "607c8e": 56, "grid": [56, 282], "axi": [56, 76, 77, 78, 93, 119, 149, 295], "xlabel": 56, "ylabel": 56, "gender": [56, 322], "person_gend": 56, "male": 56, "femal": 56, "male_count": 56, "female_count": 56, "constraint": [56, 70], "216172782113784483": 56, "around": [56, 152], "432345564227569033": 56, "288230376151712472": 56, "144115188075856168": 56, "144115188075860911": 56, "72057594037934114": 56, "hasmoder": 56, "studyat": 56, "workat": 56, "islocatedin": 56, "432345564227582847": 56, "hasinterest": 56, "504403158265496227": 56, "864691128455136658": 56, "1008806316530991636": 56, "360287970189645858": 56, "en": [56, 69, 77, 251, 255, 256, 257, 258, 260, 261, 262, 268, 269, 270, 271, 273, 274, 275, 276], "e1": 56, "summar": [56, 59], "citi": [56, 59, 69, 71], "ispartof": 56, "countri": 56, "288230376151711797": 56, "understand": [56, 62, 137, 143, 151, 301], "216172782113784555": 56, "14": [56, 74, 139, 140, 142, 194, 254, 262, 274, 289], "exactli": [56, 59, 70, 77, 154, 199, 208, 222, 267, 295, 302], "432345564227569357": 56, "432345564227570524": 56, "288230376151712984": 56, "144115188075861043": 56, "replyof": [56, 317], "vertiv": 56, "54336": 56, "33411": 56, "360287970189700805": 56, "59465": 56, "33403": 56, "awai": 56, "ineffect": 56, "illeg": 56, "simple_path": 56, "unfold": [56, 77], "hascreat": 56, "nation": 56, "china": 56, "np": [56, 140, 143, 149, 153, 304], "market": 56, "japan": 56, "browsers_us": 56, "browser_list": 56, "firefox": 56, "safari": 56, "browser_count": 56, "autopct": 56, "1f": 56, "univers": [56, 66, 154, 187, 188, 235, 245, 277, 281], "previous": [56, 85, 225, 226, 227, 300, 301], "purpos": [56, 66, 301], "person1": 56, "person2": 56, "university1": 56, "university2": 56, "studi": [56, 65, 67, 73, 235, 237], "216172782113784481": 56, "216172782113784279": 56, "144115188075858884": 56, "216172782113784361": 56, "216172782113784291": 56, "144115188075858879": 56, "216172782113784642": 56, "216172782113784473": 56, "216172782113784328": 56, "144115188075858700": 56, "216172782113784700": 56, "216172782113784331": 56, "144115188075860619": 56, "216172782113784375": 56, "216172782113784333": 56, "144115188075858813": 56, "216172782113784593": 56, "216172782113784688": 56, "144115188075860870": 56, "216172782113784047": 56, "216172782113784692": 56, "144115188075862429": 56, "isomorph": [56, 71, 139, 143, 268, 290], "22": [56, 74, 139, 140, 142, 282], "23": [56, 139, 140, 142, 296], "216172782113784192": 56, "216172782113784107": 56, "216172782113784171": 56, "regular": [56, 228, 233, 234, 235, 257, 262, 265, 270, 273, 274, 275, 276], "squar": [56, 216, 235, 263, 264, 267, 282], "butterfli": 56, "notion": 56, "matchanalyticsalgorithm": 56, "matchoptimizationalgorithm": 56, "216172782113784587": 56, "216172782113784363": 56, "144115188075860919": 56, "216172782113784532": 56, "216172782113784400": 56, "144115188075861858": 56, "216172782113784491": 56, "216172782113784401": 56, "144115188075858086": 56, "216172782113784598": 56, "216172782113784629": 56, "144115188075858881": 56, "216172782113783931": 56, "216172782113784657": 56, "144115188075858708": 56, "repli": 56, "pa": 56, "pb": 56, "216172782113783809": 56, "216172782113784011": 56, "360287970189640007": 56, "360287970189640008": 56, "360287970189640009": 56, "34": [56, 74, 139, 140, 142, 282], "2012": [56, 248], "216172782113783812": 56, "216172782113783882": 56, "36": [56, 74, 139, 140, 142, 194, 274, 282, 314], "360287970189640010": 56, "37": [56, 74, 139, 140, 142, 154, 282, 314], "216172782113784105": 56, "38": [56, 74, 139, 140, 142, 282, 314], "41": [56, 74, 139, 140, 142, 229, 282], "43": [56, 139, 140, 142, 154, 256, 282, 312], "216172782113783814": 56, "216172782113783962": 56, "360287970189640135": 56, "52": [56, 282], "216172782113784199": 56, "54": [56, 74, 229, 282], "216172782113784038": 56, "56": [56, 74, 188, 282], "216172782113783816": 56, "216172782113784144": 56, "175": 56, "360287970189640462": 56, "72057594037927936": 56, "144115188075855872": 56, "288230376151711744": 56, "432345564227567616": 56, "504403158265495555": 56, "india": 56, "hasmemb": 56, "8248": 56, "8101": 56, "imposs": 56, "back": [56, 58, 64, 147, 301], "2822": 56, "tag1": 56, "tag2": 56, "37164": 56, "432": 56, "vertinc": 56, "property1": 56, "properti2": 56, "lastnam": [56, 317, 322], "donati": 56, "luigi": 56, "hall": 56, "costa": 56, "carlo": 56, "khan": 56, "meera": 56, "mahinda": 56, "eli": 56, "94": 56, "228": [56, 74], "emb": [56, 137, 321], "th": [56, 141, 154, 267], "dom": 56, "pedro": 56, "ii": 56, "condariuc": 56, "bonomi": 56, "anyth": 56, "david": [56, 190, 201, 266], "silva": 56, "guliyev": 56, "tagclass": 56, "504403158265495552": 56, "504403158265495554": 56, "504403158265495556": 56, "504403158265495557": 56, "504403158265495558": 56, "504403158265495559": 56, "504403158265495560": 56, "504403158265495561": 56, "504403158265495562": 56, "504403158265495563": 56, "504403158265495564": 56, "504403158265495565": 56, "504403158265495566": 56, "504403158265495567": 56, "504403158265495568": 56, "504403158265495569": 56, "504403158265495570": 56, "504403158265495571": 56, "504403158265495572": 56, "504403158265495573": 56, "504403158265495574": 56, "504403158265495575": 56, "504403158265495576": 56, "504403158265495577": 56, "504403158265495578": 56, "504403158265495579": 56, "504403158265495580": 56, "504403158265495581": 56, "504403158265495582": 56, "504403158265495583": 56, "504403158265495584": 56, "504403158265495585": 56, "504403158265495586": 56, "504403158265495587": 56, "504403158265495588": 56, "504403158265495589": 56, "504403158265495590": 56, "504403158265495591": 56, "504403158265495592": 56, "504403158265495593": 56, "504403158265495594": 56, "504403158265495595": 56, "504403158265495596": 56, "504403158265495597": 56, "504403158265495598": 56, "504403158265495599": 56, "504403158265495600": 56, "504403158265495601": 56, "504403158265495602": 56, "504403158265495603": 56, "504403158265495604": 56, "504403158265495605": 56, "504403158265495606": 56, "504403158265495607": 56, "504403158265495608": 56, "504403158265495609": 56, "504403158265495610": 56, "504403158265495611": 56, "504403158265495613": 56, "504403158265495614": 56, "504403158265495615": 56, "504403158265495616": 56, "504403158265495617": 56, "504403158265495618": 56, "504403158265495619": 56, "504403158265495620": 56, "504403158265495621": 56, "q4": 56, "690": 56, "134313148716225": 56, "216172782113783811": 56, "216172782113783813": 56, "216172782113784707": 56, "216172782113784708": 56, "216172782113784709": 56, "216172782113783910": 56, "216172782113784104": 56, "216172782113784207": 56, "216172782113784318": 56, "216172782113784305": 56, "216172782113784597": 56, "216172782113784693": 56, "216172782113784018": 56, "216172782113784092": 56, "216172782113784108": 56, "216172782113784161": 56, "216172782113784162": 56, "73": [56, 74, 235], "216172782113783875": 56, "216172782113783932": 56, "216172782113784057": 56, "216172782113784068": 56, "216172782113784065": 56, "216172782113784235": 56, "216172782113784247": 56, "meaning": [56, 78, 151], "449": 56, "454": [56, 74], "216172782113783810": 56, "acsend": 56, "descend": [56, 283], "216172782113784082": 56, "216172782113784169": 56, "216172782113784267": 56, "216172782113784368": 56, "216172782113784376": 56, "216172782113783938": 56, "216172782113784405": 56, "216172782113783980": 56, "216172782113783844": 56, "216172782113783901": 56, "216172782113783935": 56, "216172782113784439": 56, "216172782113784315": 56, "216172782113784374": 56, "216172782113784601": 56, "216172782113784431": 56, "216172782113783815": 56, "216172782113783817": 56, "216172782113783971": 56, "216172782113784154": 56, "216172782113784381": 56, "216172782113783933": 56, "earlier": [56, 240, 302], "216172782113783819": 56, "216172782113783826": 56, "216172782113783836": 56, "bi": [56, 69, 72], "25": [56, 61, 65, 67, 74, 139, 140, 142, 211, 213, 216, 235, 282, 316], "query2": 56, "09": [56, 74], "200": [56, 137, 295, 305, 321], "07": [56, 64, 74, 208, 216], "hastag": 56, "count1": 56, "count2": 56, "jet_li": 56, "zhang_yim": 56, "faye_wong": 56, "tsui_hark": 56, "bruce_le": 56, "johnny_depp": 56, "tom_cruis": 56, "jackie_chan": 56, "query3": 56, "moder": 56, "infinit": [56, 250], "seriou": 56, "song": 56, "containerof": 56, "message_count": 56, "824633725780": 56, "08t02": 56, "334": [56, 74], "album": 56, "hao": 56, "wang": [56, 221, 223], "19791209300479": 56, "755914248304": 56, "02t20": 56, "03": [56, 74, 310], "344": 56, "wall": 56, "lin": 56, "lei": 56, "24189255811275": 56, "824633725045": 56, "02": [56, 216], "03t18": 56, "633": 56, "893353201782": 56, "28t23": 56, "53": [56, 74, 282], "251": 56, "1030792152809": 56, "03t09": 56, "47": [56, 74, 139, 140, 142], "414": 56, "chen": 56, "32985348833887": 56, "07t07": 56, "30": [56, 74, 139, 140, 142, 213, 258, 260, 265, 302, 320], "038": 56, "zhang": [56, 312], "yang": [56, 312], "15393162789707": 56, "query4": 56, "membercount": 56, "country_count": 56, "counri": 56, "personcount": 56, "72057594037932503": 56, "72057594037932473": 56, "72057594037932489": 56, "72057594037932494": 56, "72057594037932501": 56, "72057594037934803": 56, "72057594037934804": 56, "72057594037935005": 56, "72057594037928132": 56, "72057594037935879": 56, "288230376151711799": 56, "country_top100_forums_dict": 56, "personcountforum": 56, "72057594037935702": 56, "72057594037930685": 56, "72057594037932114": 56, "72057594037934231": 56, "72057594037935703": 56, "72057594037935730": 56, "72057594037935734": 56, "72057594037932509": 56, "72057594037935707": 56, "72057594037935708": 56, "72057594037935711": 56, "72057594037935714": 56, "72057594037935719": 56, "72057594037935729": 56, "72057594037935731": 56, "72057594037935724": 56, "72057594037929560": 56, "72057594037931546": 56, "72057594037931545": 56, "72057594037932479": 56, "72057594037932485": 56, "72057594037932505": 56, "72057594037932511": 56, "72057594037935710": 56, "72057594037935722": 56, "72057594037929246": 56, "72057594037928266": 56, "72057594037935713": 56, "72057594037934308": 56, "72057594037934313": 56, "72057594037934302": 56, "72057594037930430": 56, "72057594037934303": 56, "72057594037932482": 56, "72057594037935147": 56, "72057594037935148": 56, "72057594037935157": 56, "72057594037927973": 56, "72057594037929386": 56, "72057594037934315": 56, "72057594037935720": 56, "72057594037935015": 56, "72057594037934300": 56, "72057594037930861": 56, "72057594037934319": 56, "72057594037931542": 56, "72057594037929583": 56, "72057594037933324": 56, "72057594037929182": 56, "72057594037929739": 56, "72057594037934829": 56, "72057594037935658": 56, "72057594037935660": 56, "72057594037935674": 56, "72057594037935682": 56, "72057594037935683": 56, "72057594037935672": 56, "72057594037927978": 56, "72057594037935163": 56, "72057594037935014": 56, "72057594037931544": 56, "72057594037934297": 56, "72057594037927979": 56, "72057594037932474": 56, "72057594037934384": 56, "72057594037932639": 56, "72057594037934380": 56, "72057594037935146": 56, "72057594037935152": 56, "72057594037928134": 56, "72057594037928674": 56, "72057594037929248": 56, "72057594037931240": 56, "72057594037931247": 56, "72057594037931256": 56, "72057594037930958": 56, "72057594037930963": 56, "72057594037931259": 56, "72057594037931260": 56, "72057594037931262": 56, "72057594037929365": 56, "72057594037929419": 56, "72057594037929421": 56, "72057594037929431": 56, "72057594037929434": 56, "72057594037929437": 56, "72057594037929446": 56, "72057594037929447": 56, "72057594037929449": 56, "72057594037929450": 56, "72057594037935166": 56, "72057594037929519": 56, "72057594037929451": 56, "72057594037929452": 56, "72057594037935046": 56, "72057594037932339": 56, "72057594037932481": 56, "72057594037934294": 56, "72057594037932389": 56, "72057594037932976": 56, "72057594037930870": 56, "72057594037931266": 56, "72057594037928092": 56, "72057594037928495": 56, "72057594037929510": 56, "72057594037929517": 56, "72057594037929961": 56, "72057594037929965": 56, "72057594037930242": 56, "72057594037930248": 56, "72057594037930250": 56, "72057594037930313": 56, "72057594037931547": 56, "72057594037935686": 56, "72057594037929052": 56, "72057594037929053": 56, "72057594037929055": 56, "72057594037929057": 56, "72057594037929060": 56, "72057594037934811": 56, "72057594037934813": 56, "72057594037934816": 56, "72057594037934821": 56, "72057594037934822": 56, "72057594037934823": 56, "72057594037934828": 56, "72057594037934835": 56, "72057594037934837": 56, "72057594037934975": 56, "72057594037934976": 56, "72057594037935032": 56, "72057594037935038": 56, "72057594037935045": 56, "72057594037935664": 56, "72057594037935673": 56, "72057594037935678": 56, "72057594037935685": 56, "72057594037931549": 56, "72057594037931550": 56, "72057594037931552": 56, "72057594037931554": 56, "72057594037931557": 56, "72057594037931560": 56, "72057594037931566": 56, "72057594037935671": 56, "72057594037935670": 56, "72057594037934977": 56, "72057594037931543": 56, "72057594037929518": 56, "72057594037935679": 56, "72057594037931575": 56, "72057594037932438": 56, "72057594037932878": 56, "72057594037932886": 56, "72057594037932888": 56, "72057594037927982": 56, "72057594037930526": 56, "72057594037930535": 56, "72057594037930546": 56, "72057594037930976": 56, "72057594037930536": 56, "72057594037931358": 56, "72057594037930366": 56, "72057594037931574": 56, "72057594037932435": 56, "72057594037935020": 56, "72057594037935864": 56, "72057594037933861": 56, "72057594037932440": 56, "72057594037927981": 56, "72057594037931349": 56, "72057594037931366": 56, "72057594037932885": 56, "72057594037927980": 56, "72057594037930529": 56, "72057594037930532": 56, "72057594037931304": 56, "72057594037932433": 56, "72057594037932441": 56, "72057594037934547": 56, "query11": 56, "live": 56, "startdat": 56, "enddat": 56, "216172782113784091": 56, "216172782113784250": 56, "216172782113784403": 56, "216172782113784537": 56, "216172782113784122": 56, "query14": 56, "country1": 56, "country2": 56, "subscor": 56, "award": [56, 312], "chile": 56, "p1": 56, "p2": 56, "case1": 56, "case2": 56, "case3": 56, "case4": 56, "216172782113784153": 56, "216172782113784100": 56, "216172782113783956": 56, "216172782113784673": 56, "216172782113784252": 56, "216172782113784263": 56, "216172782113784193": 56, "216172782113784242": 56, "216172782113784623": 56, "216172782113784498": 56, "216172782113784251": 56, "216172782113784538": 56, "216172782113784167": 56, "216172782113783864": 56, "216172782113784613": 56, "216172782113784116": 56, "jave": [57, 306], "javasdk": [57, 306], "creation": [58, 139, 213], "transit": [58, 258, 286], "magnitud": [58, 68], "superior": [58, 67, 69, 73], "rich": [58, 66, 69, 71, 139, 141], "neg": [58, 59, 137, 141, 143, 145, 149, 154, 173, 251], "gsl": [58, 59, 66, 139, 140, 141, 142, 146, 153], "gat": [58, 71, 137, 145, 321], "deepwalk": [58, 137, 321], "trans": [58, 137, 321], "pyg": [58, 59, 62, 71, 72, 73], "flexibli": [58, 66, 71, 73], "pytorch": [58, 59, 66, 71, 143, 145], "onlin": [58, 68, 71, 72, 298, 302], "fed": [58, 67, 71], "dockerfil": [58, 144], "ek": 58, "aw": [58, 74, 313], "ack": 58, "failov": [58, 73], "concentr": [58, 73, 193], "secur": [59, 71, 72], "industri": [59, 66, 71, 73, 74], "feasibl": [59, 71], "preprocess": [59, 149], "uniformli": [59, 226, 227, 228, 236, 237, 238, 239, 240, 284], "lookup": [59, 71, 149, 289], "topolog": [59, 139], "nn": [59, 61, 64, 65, 67, 71, 77, 137, 149, 316, 321], "ego": [59, 71, 145, 290, 321], "dimension": [59, 65, 67, 71, 138, 140, 141], "conv": [59, 62, 71], "edge_index": [59, 62], "carri": 59, "topologi": [59, 62, 68, 140, 145, 286, 298, 300, 301], "predict": [59, 65, 66, 67, 71], "asynchron": 59, "tensor": [59, 62, 76, 77, 78, 119, 137, 141, 145, 147, 293, 295], "plaintext": 59, "clearli": [59, 71], "space": [59, 71, 138, 139, 143, 154, 188, 236, 237, 238, 239, 240], "dimens": [59, 61, 64, 65, 67, 71, 138, 236, 237, 238, 239, 281, 316], "term": 59, "batchgraph": 59, "mini": [59, 71], "loss": [59, 61, 64, 65, 67, 71, 149, 316, 321], "mind": 59, "categori": [59, 61, 62, 67, 71, 149], "classif": [59, 63, 67, 71, 75, 137, 138, 149], "trainer": [59, 61, 64, 65, 67, 137, 316, 321], "dependic": 60, "hk": 60, "rm": [60, 149], "go": [60, 149, 216, 269, 302], "4g": 60, "aarch64": 61, "processor": 61, "verion": 61, "egographsag": [61, 64, 67, 316], "349": [61, 65, 67, 316], "venu": [61, 67], "confer": [61, 67, 141, 312], "www": [61, 64, 65, 67, 154, 208, 262, 271, 274, 302, 316], "tf": [61, 62, 64, 65, 67, 137, 138, 143, 144, 149, 316, 321], "disable_v2_behavior": [61, 64, 65, 67, 316], "importerror": [61, 64, 65, 67, 316], "load_ogbn_mag": [61, 64, 65, 67, 316, 322], "egosagesuperviseddataload": [61, 65, 67, 316], "localtrain": [61, 64, 65, 67, 316], "node_typ": [61, 64, 65, 67, 137, 139, 140, 143, 146, 149, 153, 316, 321], "edge_typ": [61, 64, 65, 67, 137, 139, 140, 141, 142, 143, 146, 149, 153, 301, 316, 321], "class_num": [61, 65, 67, 137, 316, 321], "features_num": [61, 64, 65, 67, 137, 316, 321], "hops_num": [61, 65, 67, 137, 316, 321], "nbrs_num": [61, 64, 65, 67, 316], "epoch": [61, 62, 64, 65, 67, 137, 142, 316, 321], "hidden_dim": [61, 64, 65, 67, 137, 149, 316, 321], "256": [61, 65, 67, 74, 218, 278, 302, 316], "in_drop_r": [61, 65, 67, 316], "learning_r": [61, 64, 65, 67, 149, 316], "reset_default_tf_graph": [61, 65, 67, 316], "act_func": [61, 65, 67, 316], "relu": [61, 65, 67, 316], "dropout": [61, 64, 65, 67, 149, 316], "train_data": [61, 64, 65, 67, 316], "mask": [61, 65, 67, 153, 316], "train_embed": [61, 65, 67, 316], "src_ego": [61, 64, 65, 67, 316], "train_label": [61, 65, 67, 316], "reduce_mean": [61, 65, 67, 137, 149, 316, 321], "sparse_softmax_cross_entropy_with_logit": [61, 65, 67, 137, 149, 316, 321], "logit": [61, 65, 67, 149, 316], "adamoptim": [61, 64, 65, 67, 149, 316], "test_embed": [61, 65, 67, 316], "test_label": [61, 65, 67, 316], "test_indic": [61, 65, 67, 316], "argmax": [61, 65, 67, 316], "output_typ": [61, 65, 67, 123, 293, 316], "int32": [61, 65, 67, 138, 140, 148, 149, 316], "test_acc": [61, 65, 67, 316], "div": [61, 65, 67, 316], "reduce_sum": [61, 65, 67, 316], "cast": [61, 65, 67, 149, 301, 316], "float32": [61, 65, 67, 140, 149, 316], "obgn": [61, 65], "mag": [61, 65, 67, 316], "paper_featur": [61, 67, 316], "feat_": [61, 64, 65, 67, 316], "128": [61, 64, 65, 67, 149, 316], "lg": [61, 64, 65, 67, 132, 296, 310, 316], "cite": [61, 64, 65, 67, 316], "gen_label": [61, 64, 65, 67, 132, 296, 316], "val": [61, 64, 65, 67, 137, 153, 296, 316, 321], "85": [61, 64, 65, 67, 74, 77, 296, 316], "seed": [62, 77, 137, 145, 149, 208, 211, 212, 213, 214, 216, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 243, 244, 245, 246, 249, 281, 284, 286], "sampler": [62, 64, 142, 145, 147], "categor": 62, "perceptu": 62, "theori": [62, 141, 149], "unsupervis": [62, 64, 75, 137, 143, 145, 146, 296], "mainstream": [62, 141, 142], "putback": 62, "outofrangeerror": [62, 142, 143, 149], "evolv": [62, 66, 302], "neighborsampl": [62, 141], "edge_weight": [62, 141, 143], "random_with_replac": 62, "topk": [62, 141, 143], "pad": [62, 141], "expand_factor": [62, 141, 146], "sparsenod": [62, 140, 141, 143], "sparseedg": [62, 140, 141, 143], "layer1": [62, 141], "layer2": [62, 141], "neighbor_sampl": [62, 141], "bui": [62, 66, 140, 141, 142, 143, 146, 149], "i2i": [62, 141, 143], "batch_siz": [62, 64, 137, 141, 142, 143, 146, 149, 305, 321], "layer_nod": [62, 141], "int_attr": [62, 140, 141, 142, 146, 149], "layer_edg": [62, 141], "float_attr": [62, 140, 141, 142, 146, 149], "egograph": [62, 71, 137, 145, 321], "negativesampl": [62, 146], "node_weight": [62, 143, 146], "edge_sampl": [62, 142, 146], "negative_sampl": [62, 137, 146, 321], "neg_nod": [62, 146], "heterogen": [62, 65, 67, 69, 71, 138, 139, 140, 141, 143], "randomli": [62, 143, 208, 214, 218, 220, 229, 231, 236, 239, 244, 286], "outv": [62, 137, 141, 143, 149, 320, 321], "overs": 62, "citat": [63, 65, 67, 75, 149, 316], "revisit": [63, 64, 75], "with_dataset": [64, 131, 136, 296, 322], "k8s_service_typ": [64, 131, 136, 296, 316], "loadbalanc": [64, 296, 316], "k8s_image_pull_polici": [64, 131, 136, 296], "cell": [64, 282], "metainfo": 64, "obgn_mag": 64, "ogbn_mag_smal": [64, 316, 322], "chose": [64, 65], "i_featur": [64, 65], "argpars": 64, "tfg": 64, "egosageunsuperviseddataload": 64, "parse_arg": 64, "argumentpars": 64, "egosag": 64, "add_argu": 64, "output_dim": [64, 137, 321], "neg_num": 64, "0001": 64, "agg_typ": 64, "drop_out": 64, "neg_sampl": 64, "temperatur": 64, "dim": [64, 236, 237, 238, 239], "src_emb": [64, 137, 321], "dst_emb": 64, "dst_ego": 64, "neg_dst_emb": 64, "neg_dst_ego": 64, "unsupervised_softmax_cross_entropy_loss": 64, "ogbn": [65, 67, 316], "academ": [65, 67, 316], "microsoft": [65, 67, 316], "institut": [65, 67, 316], "accomplish": [65, 67, 208], "word2vec": [65, 67, 316], "highlight": [66, 70], "modular": [66, 281], "rapidli": [66, 141], "seller": 66, "buyer": [66, 70], "fraudul": 66, "review": [66, 77, 154, 218, 236], "sell": 66, "suspici": 66, "anti": [66, 70, 73], "fraud": [66, 73], "feed": [66, 132, 137, 140, 143, 149, 153, 296, 321], "webui": 66, "necessit": 66, "comprehens": [66, 72, 74, 75], "diversifi": 66, "ingest": [66, 302], "rapid": 66, "hous": [66, 263, 264], "parti": [66, 269], "analyst": 66, "concurr": [66, 139], "crucial": 66, "gaia": [66, 320], "resembl": [66, 281, 286, 288], "olap": 66, "gen": [66, 143], "dataflow": [66, 68], "arriv": 66, "suitabl": [66, 73, 139, 143, 149, 208, 302, 305], "hiactor": 66, "financi": 66, "billion": [66, 69, 73], "preval": 66, "definit": [66, 154, 235, 236, 238], "miniconda": 67, "scientif": 67, "field_of_studi": [67, 316], "subject": 67, "examin": 67, "4307": [67, 316], "proven": 67, "2014": [67, 154, 316], "2020": [67, 316], "ret1": [67, 316], "k_core": [67, 77, 154, 290, 312, 316], "ret2": [67, 316], "kcore": [67, 316], "downstream": [67, 143], "convolut": [67, 71, 145], "supervis": [67, 75, 138, 141, 149, 296, 316], "train_gcn": [67, 316], "130": [67, 316], "effortlessli": 67, "conduit": 67, "lisu": 67, "icde2023": 68, "indroduc": 68, "sigmod2017": [68, 312, 318], "gra": 68, "ph": 68, "arallel": 68, "ngine": 68, "opensourc": 68, "raph": 68, "nalysi": 68, "elat": 68, "ransact": 68, "loos": [68, 73, 298], "mysql": [68, 298], "nutshel": [68, 298], "exploit": [68, 298], "ahead": [68, 298], "wal": [68, 298], "etriev": 68, "IN": 68, "terfac": 68, "portabl": [68, 301], "rust": [68, 301, 302], "handler": [68, 133, 296], "chive": 68, "movi": [68, 139], "guardian": 68, "galaxi": 68, "steal": 68, "tackl": [68, 69], "imbal": 68, "nvlink": 68, "acut": 68, "asymmetr": 68, "holist": 68, "innov": 68, "signific": [68, 73], "speedup": 68, "cncf": 68, "sandbox": 68, "neo4j": [68, 73, 74, 300], "opencyph": 68, "soon": [68, 72, 73, 74, 140], "amplifi": 68, "sophist": 68, "dissoci": 68, "ly": 68, "dag": [68, 77, 78, 96, 151, 289, 293, 296], "laptop": 68, "loop": [68, 154, 164, 177, 216, 218, 220, 222, 228, 236, 237, 238, 239, 240, 246, 249, 289, 290, 320], "correl": [68, 154], "subtask": 68, "earli": 68, "nsdi": [68, 318], "legaci": 68, "interchang": 68, "memoiz": 68, "vldb2021": 68, "artial": 68, "ncrement": 68, "transport": 69, "protein": [69, 230], "uncov": 69, "vari": [69, 138], "former": 69, "unless": [69, 141, 289], "discov": 69, "discoveri": [69, 71, 296], "rough": 69, "accordingli": [69, 128], "snap": 69, "stanford": [69, 280], "cs224w": 69, "constitu": 69, "bellman": [69, 154], "ford": [69, 154], "wikipedia": [69, 77, 251, 255, 256, 257, 258, 260, 261, 262, 268, 269, 270, 271, 273, 274, 275, 276, 282], "wiki": [69, 77, 251, 255, 256, 257, 258, 260, 261, 262, 268, 269, 270, 271, 273, 274, 275, 276], "s_algorithm": 69, "towardsdatasci": 69, "9bd8951e7da": 69, "interconnect": [69, 139], "road": [69, 304], "logist": 69, "deliveri": 69, "media": 69, "ten": [69, 73, 141], "nontrivi": [69, 261], "steep": 69, "sought": 69, "occurr": 70, "monei": [70, 73], "launder": [70, 73], "exact": [70, 218, 220, 316], "exclud": 70, "expans": [70, 71, 146, 320], "heurist": [70, 216], "purchas": 70, "bolder": 70, "border": 70, "sens": [70, 281, 296], "worst": 70, "drug": 71, "accuraci": 71, "likelihood": 71, "biologi": 71, "valuabl": 71, "bioinformat": 71, "chemic": 71, "promis": 71, "driven": [71, 281, 301], "carefulli": 71, "rewind": 71, "stack": 71, "weigh": 71, "choic": [71, 301, 302], "matrix": [71, 77, 145, 154, 216, 234, 249, 252, 281, 289, 292], "huge": [71, 304], "unseen": [71, 304], "plain": 71, "text": [71, 79, 190], "backward": [71, 143, 240], "gradient": 71, "metric": [71, 236, 237, 238, 239, 240], "recal": 71, "f1": [71, 151], "assess": [71, 149, 266], "irregular": 71, "unstructur": 71, "pool": 71, "hardwar": [71, 305], "undergo": 71, "perceiv": 71, "maxgraph": [72, 318], "2x": 72, "excel": 72, "elast": [72, 302], "versatil": [72, 301], "acid": 72, "encrypt": 72, "stand": [73, 141, 142, 301], "summari": [73, 169], "simultan": [73, 298], "elabor": 73, "geminigraph": [73, 74], "plato": [73, 74], "empir": 73, "enjoi": 73, "janusgraph": 73, "nebula": 73, "dbm": 73, "relaunch": [73, 302], "recoveri": 73, "protocol": [73, 296], "coars": 73, "grain": 73, "emphas": 73, "invest": 73, "trace": [73, 77], "dgl": 73, "accommod": 73, "nebular": 73, "movement": [73, 143], "trivial": [73, 205], "grade": 74, "r6": 74, "8xlarg": 74, "alibabacloud": 74, "ec": 74, "xl": 74, "a038f97": 74, "170e7d3": 74, "21009d6": 74, "v4": 74, "mpich": 74, "fair": 74, "huge_pag": 74, "jemalloc": 74, "o3": 74, "stub": [74, 80, 82, 218, 246, 249], "determinist": [74, 79, 296, 302], "cdlp": [74, 77, 312], "load_direct": 74, "load_undirected_from_direct": 74, "reformat": 74, "mark": [74, 154], "datagen": 74, "9_0": 74, "fb": 74, "62": 74, "9_1": 74, "78": [74, 208, 282], "9_2": 74, "zf": 74, "88": [74, 221, 223], "60": [74, 154, 282], "61": 74, "176": [74, 245], "87": [74, 280], "graph500": 74, "71": [74, 154, 226, 230, 236], "79": [74, 221, 223], "friendster": 74, "97": 74, "39": [74, 139, 140, 142, 154, 282, 312, 314], "86": 74, "57": 74, "126": [74, 222], "98": 74, "83": 74, "66": 74, "1695": 74, "2742": 74, "3600": 74, "425": 74, "55": [74, 188], "lcc": 74, "521": 74, "51": [74, 282], "296": 74, "1859": 74, "201": [74, 285], "842": 74, "68": 74, "competitor": 74, "didn": 74, "pagerank_loc": 74, "65": 74, "72": 74, "84": 74, "63": [74, 225, 227], "gunrock": 74, "0c9a96": 74, "v0": [74, 144, 292], "grout": 74, "5ce160": 74, "v7": 74, "v10": 74, "gn6v": 74, "c8g1": 74, "16xlarg": 74, "8x": 74, "16gb": 74, "nvidia": 74, "v100": 74, "gb": 74, "devic": 74, "millisecond": 74, "soc": [74, 209, 210], "livejournal1": 74, "89": 74, "9345": 74, "215": [74, 278], "560": 74, "3029": 74, "129": [74, 244], "389": 74, "155": 74, "0549": 74, "sinaweibo": 74, "168": 74, "1649": 74, "647": 74, "orkut": 74, "105": [74, 209, 210], "121": 74, "193": 74, "658": 74, "3201": 74, "7677": 74, "137": [74, 216], "2139": 74, "319": 74, "261": 74, "69": [74, 276, 282], "235": 74, "567": 74, "283": 74, "073": 74, "6619": 74, "45": [74, 139, 140, 142, 218], "150": 74, "87299": 74, "162": 74, "60403": 74, "9676": 74, "141": 74, "347": 74, "7772": 74, "0118": 74, "306": 74, "8618": 74, "9134": 74, "467": 74, "60801": 74, "8666": 74, "3501": 74, "870": 74, "6451": 74, "198": 74, "829": 74, "5036": 74, "229": 74, "024": 74, "483": 74, "178": 74, "5593": 74, "807": 74, "367": 74, "6946": 74, "2339": 74, "jupyt": [75, 296], "notebook": [75, 296], "jupyterlab": 75, "playground": [75, 323], "bipartit": [75, 137, 139, 195, 243, 244, 245, 277, 321], "grapeengin": 76, "vineyardserv": 76, "grapeinst": 76, "graphscopeserv": 76, "inlin": 76, "dag_fil": 76, "dagfil": 76, "rundagfil": 76, "subscrib": 76, "charg": 76, "commspec": [76, 298, 301, 303], "comm_spec": [76, 298, 301, 303], "vineyard_socket": 76, "bl": 76, "dispatchresult": 76, "onrec": 76, "commanddetail": 76, "cmd": [76, 296], "gsobject": 76, "objectmanag": 76, "subclass": [76, 289], "appentri": 76, "icontextwrapp": 76, "ifragmentwrapp": 76, "projector": 76, "propertygraphutil": 76, "objecttyp": 76, "tostr": [76, 303], "putobject": 76, "obj": 76, "removeobject": 76, "getobject": [76, 302, 303], "hasobject": 76, "analyticalserv": 76, "startserv": 76, "stopserv": 76, "engineconfig": 76, "tojsonstr": 76, "vineyard_rpc_endpoint": 76, "enable_java_sdk": 76, "setcommand": 76, "enum": 76, "aggregatepolici": 76, "enumer": 76, "kpickfirst": 76, "kpickfirstnonempti": 76, "krequireconsist": 76, "kconcat": 76, "kpickfirstnonemptygraphdef": 76, "kmergegraphdef": 76, "worker_id": [76, 151], "error_cod": 76, "ok": 76, "set_error": 76, "has_large_data": 76, "set_graph_def": 76, "graphdefpb": 76, "graph_def": 76, "set_data": 76, "large_data": 76, "inarch": 76, "arc": 76, "aggregate_polici": 76, "fragmentwrapp": 76, "addcolumn": 76, "vdata_t": 76, "edata_t": 76, "arrowvertexmap": 76, "internaltyp": 76, "compact": [76, 151], "arrowprojectedfragmentbas": 76, "bareregist": 76, "internal_oid_t": 76, "property_graph_typ": 76, "eid_typ": 76, "vertexrang": [76, 79], "inner_vertices_t": 76, "outer_vertices_t": 76, "vertices_t": 76, "sub_vertices_t": 76, "nbr_t": 76, "arrow_projected_fragment_impl": 76, "compact_nbr_t": 76, "compactnbr": 76, "nbrunit": 76, "compact_adj_list_t": 76, "compactadjlist": 76, "const_adj_list_t": 76, "const_compact_adj_list_t": 76, "property_vertex_map_t": 76, "arrowprojectedvertexmap": 76, "label_id_typ": 76, "prop_id_typ": 76, "property_graph_t": 76, "eid_array_t": 76, "data_t": 76, "inner_vertex_array_t": 76, "outer_vertex_array_t": 76, "objectmeta": 76, "preparetorunapp": 76, "prepareconf": 76, "fnum": [76, 79], "vertex_label": [76, 79], "edge_label": [76, 79, 296], "vertex_prop_id": 76, "edge_prop_id": 76, "mirrorvertic": 76, "getvertex": 76, "getid": 76, "getinternalid": 76, "getfragid": 76, "typedarrai": 76, "value_typ": 76, "gid2vertex": 76, "vertex2gid": 76, "getinnerverticesnum": 76, "getouterverticesnum": 76, "getverticesnum": 76, "getedgenum": [76, 303], "getinedgenum": [76, 303], "getoutedgenum": [76, 303], "getoutgoingedgenum": 76, "getincomingedgenum": 76, "gettotalverticesnum": 76, "isinnervertex": 76, "getoutervertex": 76, "getinnervertexid": 76, "getinnervertexinternalid": 76, "getoutervertexid": 76, "getoutervertexinternalid": 76, "gid2oid": 76, "oid2gid": 76, "innervertexgid2vertex": 76, "outervertexgid2vertex": 76, "getoutervertexgid": 76, "getinnervertexgid": 76, "compact_": 76, "enable_if": 76, "getincominginnervertexadjlist": 76, "getoutgoinginnervertexadjlist": 76, "getincomingoutervertexadjlist": 76, "getoutgoingoutervertexadjlist": 76, "src_fid": 76, "dst_fid": 76, "getlocaloutdegre": 76, "getlocalindegre": 76, "destlist": 76, "iedest": 76, "oedest": 76, "ioedest": 76, "getvertexmap": 76, "get_out_edges_ptr": 76, "get_in_edges_ptr": 76, "get_oe_offsets_begin_ptr": 76, "get_oe_offsets_end_ptr": 76, "get_ie_offsets_begin_ptr": 76, "get_ie_offsets_end_ptr": 76, "get_edata_array_accessor": 76, "get_vdata_array_accessor": 76, "get_arrow_frag": 76, "vertex_map_id": 76, "local_vertex_map": [76, 303], "compact_edg": [76, 129, 151], "getoid": 76, "getgid": 76, "offset2lid": 76, "getoffsetfromlid": 76, "getlidfromgid": 76, "getfidfromgid": 76, "oid_t_": 76, "vid_t_": 76, "arrowfragmentload": 76, "efil": [76, 303], "vfile": [76, 303], "graph_info": 76, "leaf": [76, 78, 125, 154, 199, 283], "table_vec_t": 76, "loadvertexedget": 76, "loadvertext": 76, "loadedget": 76, "loadfrag": 76, "loadfragmentasfragmentgroup": 76, "addlabelstofrag": 76, "frag_id": [76, 298, 303], "addlabelstofragmentasfragmentgroup": 76, "initpartition": 76, "doxygenclass": 76, "arrowfragmentappend": 76, "doxygen": 76, "runner": [76, 312], "_build": 76, "appbas": 76, "defaultmessagemanag": 76, "need_split_edg": 76, "konlyout": 76, "propertyappbas": 76, "propertymessagemanag": 76, "propertyautoappbas": 76, "propertyautomessagemanag": 76, "app_t": 76, "defaultwork": 76, "parallelenginespec": 76, "pe_spec": 76, "defaultparallelenginespec": 76, "getcontext": 76, "ostream": 76, "parallelpropertywork": 76, "parallelpropertymessagemanag": 76, "propertyautowork": 76, "pointer": 76, "appfram": 76, "creatework": 76, "deletework": 76, "lib_path": 76, "worker_handl": 76, "queryarg": 76, "query_arg": [76, 123, 293], "context_kei": 76, "frag_wrapp": 76, "functiontyp": 76, "argsnum": 76, "argsunpack": 76, "proto": [76, 96, 123], "datatyp": 76, "argtypeat": 76, "defaultpropertywork": 76, "ctx_t": 76, "ctxwrapperbuild": 76, "contextwrapp": 76, "vertexpropertycontext": [76, 312], "contextbas": 76, "labeledvertexdatacontext": 76, "contextdatatyp": 76, "icolumn": 76, "get_column": 76, "get_typed_column": 76, "vertex_properti": [76, 77, 79], "properties_map": 76, "vertexdatacontextwrapp": 76, "ivertexdatacontextwrapp": 76, "fragment_wrapp": 76, "unique_ptr": 76, "tondarrai": 76, "todatafram": 76, "tovineyardtensor": 76, "tovineyarddatafram": 76, "toarrowarrai": 76, "tensorcontext": [76, 78], "set_shap": 76, "tensor_t": 76, "tensorcontextwrapp": 76, "itensorcontextwrapp": 76, "uint32_t": 76, "cmake_extra_opt": 77, "asset": 77, "byte": [77, 85, 148], "labeled_vertex_data": 77, "dynamic_vertex_data": 77, "labeled_vertex_properti": 77, "cpp_pregel": 77, "cython_pi": 77, "cython_pregel": 77, "appdagnod": [77, 114, 120], "__init__": [77, 137, 144, 151, 152, 153, 289, 290, 292, 296, 302, 321], "bytesio": [77, 85], "is_compat": 77, "graphdagnod": [77, 89, 104, 105, 122, 129, 132, 151, 152, 296], "invalidargumenterror": [77, 296], "scannererror": 77, "incorrect": 77, "signatur": [77, 143, 289], "neccessari": 77, "resouc": 77, "__call__": 77, "kwarg": [77, 78, 85, 96, 110, 114, 115, 136, 146, 151, 153, 296], "app_asset": [77, 89, 95], "bind": [77, 301], "app_nod": 77, "__del__": 77, "unload": [77, 100, 120, 122], "attribute_assortativity_coeffici": [77, 312], "assort": 77, "ref": [77, 301], "joint": [77, 246, 247, 248, 249, 290], "newman": [77, 154, 218, 220, 281], "026126": 77, "2003": [77, 154, 211, 218, 229, 237], "numeric_assortativity_coeffici": [77, 312], "analog": 77, "k_": [77, 190, 254], "rac": 77, "s_i": 77, "sum_": [77, 154, 222], "w_": [77, 154, 222], "ij": [77, 154], "k_j": 77, "valueerror": [77, 131, 136, 151, 154, 228, 285, 296], "barrat": 77, "barth\u00e9lemi": 77, "pastor": 77, "satorra": 77, "vespignani": 77, "pna": 77, "101": [77, 318], "3747": 77, "3752": 77, "2004": [77, 243], "average_shortest_path_length": [77, 154, 290, 312], "frac": [77, 154, 164, 222], "vertexdatacontextdagnod": [77, 78], "avg_clust": [77, 312], "degree_threshold": 77, "threshold": [77, 236, 237, 238, 239], "1e9": 77, "unweight": [77, 154], "foster": 77, "grassberg": 77, "paczuski": 77, "107": [77, 242], "10815": 77, "1e": [77, 149, 154, 208], "06": [77, 154], "html": [77, 154, 238, 241, 250, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 269, 271], "gv": 77, "hits_algorithm": 77, "vertexpropertycontextdagnod": [77, 78], "is_simple_path": [77, 312], "nonempti": 77, "explan": [77, 141], "biject": [77, 284], "smallest": [77, 241, 261, 271], "pairwis": 77, "boolean": [77, 79, 139, 143, 154, 173, 174, 211, 213, 216, 247, 287], "k_shell": [77, 312], "katz_centrality_numpi": [77, 154], "auttenu": 77, "maximun": 77, "min_progress": 77, "1000": [77, 139, 154, 286, 289, 302], "progress_tri": 77, "progress": [77, 233], "met": 77, "blondel": 77, "et": [77, 286], "al": [77, 286], "stat": [77, 236, 238], "mech": 77, "10008": 77, "2008": [77, 208, 231], "sotera": 77, "lpa_u2i": [77, 312], "labeledvertexpropertycontextdagnod": [77, 78], "evalut": 77, "pagerank_nx": [77, 312], "max_it": [77, 154, 208], "tol": [77, 154, 208], "solver": 77, "voterank": [77, 312], "unsign": [77, 302], "weakli": [77, 154, 228], "basecontextdagnod": [78, 151], "bound_app": [78, 95], "contextdagnod": 78, "ndarrai": [78, 93, 105, 140, 141, 143, 146, 151, 153, 289, 322], "to_vineyard_tensor": [78, 295, 312], "to_vineyard_datafram": [78, 295, 312], "lazi": [78, 151, 296], "sg": 78, "r1": [78, 304, 305], "ramework": 78, "resultdagnod": [78, 115, 152], "r2": [78, 304, 305], "r3": [78, 304], "r4": [78, 304], "62586": 78, "comparis": 78, "alphabet": [78, 295], "tensorcontextdagnod": 78, "quer": [78, 106, 152, 295], "labeledvertexdatacontextdagnod": 78, "label_nam": [78, 295], "column_nam": [78, 295], "labeld": [78, 138], "context_nod": 78, "result_schema": 78, "referenc": 78, "dynamicvertexdatacontext": 78, "dag_nod": 78, "op": [78, 88, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 118, 119, 120, 122, 123, 147, 289, 293, 296], "get_str": 79, "property_id": 79, "get_doubl": 79, "edge_label_id": 79, "edge_label_nam": 79, "incoming_edg": 79, "register_aggreg": 79, "pregelaggregatortyp": 79, "aggr_typ": 79, "get_aggregated_valu": 79, "get_total_vertices_num": 79, "vertex_property_num": 79, "vertex_label_nam": 79, "vertex_label_id": 79, "edge_property_num": 79, "get_vertex_label_by_id": 79, "get_vertex_label_id_by_nam": 79, "get_edge_label_by_id": 79, "get_edge_label_id_by_nam": 79, "edge_properti": 79, "get_vertex_property_id_by_nam": 79, "vertex_property_nam": [79, 301], "get_vertex_property_by_id": 79, "vertex_property_id": 79, "get_edge_property_id_by_nam": 79, "edge_property_nam": 79, "get_edge_property_by_id": 79, "edge_property_id": 79, "kboolandaggreg": 79, "AND": 79, "kbooloraggreg": 79, "kbooloverwriteaggreg": 79, "overwritten": 79, "kdoubleminaggreg": 79, "kdoublemaxaggreg": 79, "kdoublesumaggreg": 79, "kdoubleproductaggreg": 79, "kdoubleoverwriteaggreg": 79, "kint64minaggreg": 79, "int64": [79, 107, 129, 138, 140, 141, 146, 148, 149, 151, 322], "kint64maxaggreg": 79, "kint64sumaggreg": 79, "kint64productaggreg": 79, "kint64overwriteaggreg": 79, "ktextappendaggreg": 79, "kalongoutgoingedgetooutervertex": 79, "kalongincomingedgetooutervertex": 79, "kalongedgetooutervertex": 79, "nerghbor": 79, "get_total_nodes_num": 79, "get_nodes_num": 79, "get_inner_nodes_num": 79, "get_outer_nodes_num": 79, "outer_nod": 79, "get_node_fid": 79, "is_inner_nod": 79, "is_outer_nod": 79, "get_nod": [79, 140], "get_outer_nod": 79, "get_node_id": 79, "get_incoming_edg": 79, "has_child": 79, "child": [79, 191, 283], "has_par": 79, "parent": [79, 81, 123, 128, 283], "get_indegre": 79, "get_outdegre": 79, "kmaxaggreg": 79, "ksumaggreg": 79, "kproductaggreg": 79, "koverwriteaggreg": 79, "subproject": 81, "scratch": 81, "readm": 81, "never": [81, 289], "hopefulli": 81, "inspir": [81, 289], "dskiptest": 81, "dmaven": 81, "antrun": 81, "moment": [81, 302], "jni": 81, "mac": [81, 314, 316], "gae_java": 82, "graphscope_typ": 84, "graphscopetyp": 84, "myalgorithm": 84, "filenotfounderror": 85, "permissionerror": 85, "typeerror": [85, 123, 296], "arrowproperti": 86, "subrang": 86, "loader_op": 87, "notimplementederror": 87, "run_app": [92, 93, 110, 118, 119], "copy_typ": 94, "session_id": [96, 100, 123, 151, 152, 289, 293], "graph_typ": [96, 289], "graphtyp": [96, 289, 298, 303], "view_typ": 97, "vertex_or_edge_label_list": 98, "graph_util": 98, "vertexlabel": 98, "op_typ": [100, 123, 293], "uiliti": 100, "result_set": 102, "fetch_typ": 102, "raphscop": 102, "resultsetdagnod": 102, "interactive_queri": [106, 107, 133, 296], "request_opt": [106, 107, 152], "interactivequerydagnod": [106, 107, 133], "gremlin_script": [107, 152], "modify_typ": [108, 109], "attr": [108, 109, 123, 143, 156, 157, 158, 289, 292], "type_pb2": [108, 109, 113], "nx_add_edg": 108, "nx_del_edg": 108, "nx_update_edg": 108, "nx_add_nod": 109, "nx_del_nod": 109, "nx_update_nod": 109, "fd": [110, 115, 312], "storage_opt": [110, 115], "write_opt": [110, 115], "adaptor": 110, "result_path": [110, 115], "vertex_collect": 111, "edge_collect": 111, "report_typ": 113, "variati": 113, "node_num": [113, 316, 320], "has_nod": [113, 289], "has_edg": [113, 289], "node_data": 113, "edge_data": [113, 304], "neighbors_by_nod": 113, "succs_by_nod": 113, "preds_by_nod": 113, "neighbors_by_loc": 113, "succs_by_loc": 113, "preds_by_loc": 113, "deg_by_nod": 113, "in_deg_by_nod": 113, "out_deg_by_nod": 113, "deg_by_loc": 113, "in_deg_by_loc": 113, "out_deg_by_loc": 113, "nodes_by_loc": 113, "loc": 113, "multigraph": [113, 154, 156, 164, 168, 177, 182, 183, 209, 210, 218, 220, 233, 234, 235, 289, 292], "multidigraph": [113, 156, 168, 177, 182, 183, 220, 228, 229, 287, 289], "large_attr": [123, 293], "types_pb2": [123, 289], "operationtyp": 123, "opdef": [123, 127], "attrvalu": [123, 151, 320], "largeattrvalu": 123, "op_def_pb2": 127, "incoming_data": [129, 151], "as_default": [129, 296], "k8s_gs_imag": [131, 136, 296, 314], "k8s_etcd_imag": [131, 136], "k8s_image_pull_secret": [131, 136, 296], "k8s_coordinator_cpu": [131, 136, 296], "k8s_coordinator_mem": [131, 136, 296], "k8s_vineyard_cpu": [131, 136, 296], "k8s_mars_worker_cpu": [131, 136, 296], "k8s_mars_worker_mem": [131, 136, 296], "k8s_mars_scheduler_cpu": [131, 136, 296], "k8s_mars_scheduler_mem": [131, 136, 296], "with_mar": [131, 136, 296], "k8s_waiting_for_delet": [131, 136, 296], "dataset_download_retri": [131, 136], "k8s_deploy_mod": [131, 136, 296], "interactivequeri": [133, 152, 294, 296, 320], "alia": [135, 137, 143, 289, 296, 321], "kv": 136, "cooper": [137, 151], "\u02bbegograph": 137, "\u02bbegotensor": 137, "sample_se": [137, 321], "positive_sampl": [137, 321], "receptive_fn": [137, 321], "egotensor": [137, 145, 321], "egoflow": [137, 145, 321], "cora": [137, 149, 321], "convers": [137, 138, 298], "node_t": [137, 138, 149, 321], "edge_table_with_self_loop": [137, 321], "train_tabl": [137, 321], "val_tabl": [137, 321], "test_tabl": [137, 321], "dataset_fold": [137, 321], "decod": [137, 138, 139, 149, 321], "attr_typ": [137, 138, 139, 149, 321], "1433": [137, 149, 321], "attr_delimit": [137, 138, 139, 321], "learningbasedmodel": [137, 321], "categorical_attrs_desc": [137, 321], "_sample_se": [137, 321], "_positive_sampl": [137, 321], "_receptive_fn": [137, 321], "ego_flow": [137, 321], "src_ego_spec": [137, 321], "pos_src_ego_tensor": [137, 321], "identityencod": [137, 321], "widendeepencod": [137, 321], "feature_encod": [137, 321], "gcnconv": [137, 321], "sparseegographencod": [137, 321], "_encod": [137, 321], "conv_lay": [137, 321], "_supervised_loss": [137, 321], "full_graph_mod": [137, 321], "localtftrain": [137, 321], "model_fn": [137, 149, 321], "batch_szi": [137, 321], "load_graph": [137, 321], "server_id": [137, 321], "server_count": [137, 139, 149, 321], "tracker": [137, 149, 321], "conclud": 137, "bought": 138, "saturdai": 138, "morn": 138, "bigint": 138, "dst_id": [138, 139, 140, 142, 143, 149, 153], "shanghai": 138, "mandatori": 138, "localfilesystem": 138, "pai": [138, 143, 144], "tab": 138, "s2": [138, 254], "hangzhou": [138, 322], "215340": 138, "933091": 138, "grei": 138, "362519": 138, "097545": 138, "chapter": [138, 139, 141, 235, 272], "comma": 138, "dscript": 138, "dentryfil": 138, "dtabl": 138, "odp": 138, "prj": 138, "flag": [138, 139], "define_str": 138, "node_sourc": 138, "edge_sourc": 138, "hash": 138, "bucket_s": 138, "greatli": [138, 139, 301], "your_attr_typ": 138, "you_delimit": 138, "weightd": 138, "scr_id": 138, "10001": [138, 139, 140, 142], "feature1": 138, "10002": [138, 139, 140, 142], "feature2": 138, "10003": [138, 139, 140, 142], "feature3": 138, "123": 138, "124": 138, "\u02bbitem_node_decod": 138, "\u02bbuser_node_decod": 138, "\u02bbedge_decod": 138, "item_node_decod": 138, "user_node_decod": 138, "edge_decod": [138, 149], "graph_object": 138, "commod": 139, "swing": [139, 140], "30001": [139, 140, 142], "30002": [139, 140, 142], "30003": [139, 140, 142], "table_1": 139, "table_2": 139, "dest": 139, "10004": [139, 140], "20001": [139, 140, 142], "20003": [139, 140, 142], "33": [139, 140, 142, 279, 282], "20004": [139, 140, 142], "46": [139, 140, 142, 154, 276], "ui_decod": 139, "uv_decod": 139, "table_3": 139, "table_4": 139, "click_v": 139, "task_index": [139, 149], "task_count": 139, "atyp": 139, "job_nam": [139, 149], "worker_host": 139, "respond": 139, "distributedli": [139, 145, 147, 148, 149], "necessarili": [139, 251], "serious": 139, "decreas": [139, 218, 220], "speak": 139, "client_count": [139, 149], "wait_for_clos": [139, 149], "matter": [139, 295], "infom": 140, "get_topologi": 140, "src_type": 140, "dst_type": 140, "figure1": 140, "topo": 140, "print_al": 140, "egde_typ": 140, "ravers": 140, "string_attr": 140, "src_node": 140, "dst_node": 140, "diment": 140, "dense_shap": 140, "arra": 140, "__next__": 140, "dimenti": 140, "table1": 140, "u_nod": 140, "traves": 140, "get_edg": 140, "inferfac": 140, "table2": 140, "table3": 140, "click_edg": 140, "table4": 140, "conduc": 141, "character": 141, "recept": [141, 145], "ai": 141, "meta_path": 141, "layer_id": 141, "famili": [141, 154, 192, 250, 278], "random_without_replac": 141, "ueri": 141, "default_neighbor_id": 141, "set_default_neighbor_id": [141, 150], "xx": 141, "set_padding_mod": 141, "circular": [141, 143, 193], "alogrithm": 142, "throw": 142, "nodesampl": 142, "node_sampl": 142, "by_ord": 142, "node_from": [142, 153], "edge_src": [142, 153], "edge_dst": [142, 153], "edgesampl": 142, "matur": 143, "dl": 143, "sheer": 143, "sink": 143, "generatortyp": [143, 153], "won": [143, 304], "cursor": 143, "inv": [143, 149, 320], "ingo": 143, "query\u5bf9\u8c61": 143, "outneg": [143, 146], "inneg": [143, 146, 149], "candid": [143, 146], "u2i": 143, "ouv": 143, "func": 143, "512": 143, "edeg": 143, "src_1hop": 143, "dst_1hop": 143, "neg_i": 143, "neg_i_1hop": 143, "parmas_list": 143, "bodi": [143, 147, 255], "params_list": 143, "compli": 143, "arrang": 143, "anonym": [143, 281], "src_attr": 143, "neg_attr": 143, "encode_fn": [143, 149], "src_atr": 143, "outnegv": 143, "gen1": 143, "gen2": 143, "circumst": 143, "sour": 143, "foewa": 143, "from_gener": [143, 149], "make_one_shot_iter": [143, 149], "get_next": [143, 149], "slightli": [144, 208, 295], "zhangjiak": 144, "cp27": 144, "cp27mu": 144, "linux_x86_64": 144, "sudo": [144, 313, 314], "autoconf": 144, "automak": 144, "libtool": 144, "submodul": [144, 147, 301], "your_wheel_nam": [144, 147], "test_cpp_ut": 144, "test_python_ut": 144, "fastgcn": [145, 321], "graphsaint": 145, "amd": 145, "oprat": 146, "object_typ": 146, "oprequest": 147, "req": 147, "oprespons": 147, "params_": 147, "scalar": [147, 154], "tensors_": 147, "redirect": [147, 227], "rewrit": 147, "till": [147, 296], "happen": [147, 301, 304], "stitch": 147, "myoper": 147, "register_oper": 147, "opnam": 147, "randomsampl": 147, "writ": 147, "xxxsampler": 147, "kubeflow": 148, "reader": 148, "seek": 148, "litestr": 148, "char": [148, 151, 301], "getfiles": 148, "getrecordcount": 148, "register_file_system": 148, "myfilesystem": 148, "registr": 148, "ppi": 149, "train_supervis": 149, "gen_test_data": 149, "getopt": 149, "argv": 149, "cur_path": 149, "elif": 149, "102": [149, 285], "__name__": 149, "__main__": 149, "dirnam": 149, "rf": 149, "\u4f60\u9700\u8981\u628agen_test_data": 149, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 149, "fi": 149, "sleep": 149, "case_bas": 149, "genetic_algorithm": 149, "neural_network": 149, "probabilistic_method": 149, "reinforcement_learn": 149, "rule_learn": 149, "bag": 149, "1033": 149, "103482": 149, "103515": 149, "31336": 149, "1061127": 149, "05882353": 149, "1106406": 149, "n_featur": 149, "node_decod": 149, "n_class": 149, "140": [149, 212], "n_hop": 149, "n_epoch": 149, "tripl": 149, "graph_object_cn": 149, "md": 149, "sample_gen": 149, "input_fn": 149, "sample_input_fn": 149, "float64": 149, "tensorshap": 149, "layer_featur": 149, "aggregate_fn": 149, "self_vec": 149, "neigh_vec": 149, "raw_feat_layer_index": 149, "layer_index": 149, "variable_scop": 149, "_layer": 149, "auto_reus": 149, "neigh_weight": 149, "get_vari": 149, "self_weight": 149, "output_shap": 149, "get_shap": 149, "neigh_mean": 149, "from_neigh": 149, "matmul": 149, "from_self": 149, "add_n": 149, "leaky_relu": 149, "depth_to_encod": 149, "h_self_vec": 149, "h_neighbor_vec": 149, "features_column": 149, "feature_column": 149, "numeric_column": 149, "loss_fn": 149, "train_op": 149, "global_step": 149, "get_global_step": 149, "estimatorspec": 149, "modekei": 149, "set_xxx": 150, "set_yyi": 150, "other_model": 150, "fill": [150, 190, 201, 211, 245], "nbr_id": 150, "set_default_int_attribut": 150, "set_default_float_attribut": 150, "set_default_string_attribut": 150, "set_inter_threadnum": 150, "intra": [150, 208, 211], "set_intra_threadnum": 150, "16mb": 150, "reset": 150, "enlarg": 150, "set_rpc_message_max_s": 150, "del": [151, 289], "objectnam": 151, "varint": 151, "half": [151, 296], "degener": 151, "_e": [151, 298, 322], "src_field": [151, 317], "dst_field": [151, 317], "unspecifi": [151, 166], "vid_field": [151, 317], "graph_nod": 151, "deseri": [151, 301], "detach": 151, "varaibl": 151, "lexic": 151, "classmethod": 151, "broken": 151, "save_to": 151, "path_": 151, "s3": [151, 322], "graphschema": [151, 289], "schema_path": 151, "currrent": 151, "object_id": [151, 152, 153], "filetyp": 151, "ordinari": 151, "f0": 151, "orc": [151, 300], "parquet": [151, 300], "graph_build": 151, "deprec": [151, 169, 267, 296], "admin": [151, 302], "group_id": 151, "member_s": 151, "leader_student_id": 151, "student": 151, "member_student_id": 151, "group_for_teacher_stud": 151, "group_nam": 151, "establish_d": 151, "teacher_in_charge_id": 151, "teacher": 151, "lesson_num": 151, "avg_scor": 151, "student_id": 151, "salari": 151, "teacher_id": 151, "both_in_out": 151, "unambigu": 151, "orign": 151, "frontend_endpoint": 152, "lifetim": 152, "traversal_sourc": 152, "graphtraversalsourc": 152, "contruct": 152, "runtimeerror": [152, 296], "modern_graph_data_dir": 152, "tolist": [152, 302], "dtype": 153, "pywrap": 153, "nodefrom": 153, "get_handl": 153, "worker_count": 153, "base64": 153, "nstart": 154, "poweriterationfailedconverg": 154, "langvil": 154, "meyer": 154, "survei": [154, 242], "cites": 154, "ist": 154, "psu": 154, "edu": 154, "713792": 154, "jon": 154, "kleinberg": 154, "authorit": 154, "journal": [154, 223, 231, 248, 279, 282, 286], "acm": [154, 229, 280, 312], "604": 154, "1999": [154, 209, 210], "doi": [154, 224, 231, 266], "1145": 154, "324133": 154, "324140": 154, "cornel": 154, "kleinber": 154, "pdf": [154, 236, 238, 239], "load_centr": 154, "in_degree_centr": [154, 290], "networkxnotimpl": 154, "out_degree_centr": [154, 290], "equat": 154, "ax": 154, "eigenvalu": [154, 234], "virtu": 154, "perron": 154, "frobeniu": 154, "theorem": [154, 233, 245], "0e": 154, "strength": 154, "2f": 154, "networkxpointlessconcept": [154, 284], "null": [154, 171, 187, 188, 195, 202, 254, 284, 289], "networkxerror": [154, 160, 167, 169, 173, 174, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 224, 230, 233, 234, 235, 246, 249, 281, 289, 292], "eigenvector_centrality_numpi": 154, "discern": 154, "phillip": 154, "bonacich": 154, "american": 154, "sociologi": 154, "1170": 154, "1182": 154, "1986": [154, 278], "leonidzhukov": 154, "net": [154, 208], "hse": 154, "socialnetwork": 154, "oxford": [154, 187, 188, 237, 281], "press": [154, 187, 188, 235, 277, 280, 281], "usa": [154, 241, 242, 288], "pp": [154, 218, 221, 222, 223, 236, 242, 243, 280, 286], "169": 154, "x_i": 154, "a_": 154, "x_j": 154, "lambda_": 154, "distant": 154, "penal": 154, "strictli": [154, 208], "invers": [154, 233], "phi": 154, "sqrt": [154, 234], "adjacency_spectrum": 154, "720": 154, "leo": 154, "sociometr": 154, "psychometrika": 154, "1953": 154, "springer": [154, 243], "1007": [154, 188, 224], "bf02289026": 154, "has_path": [154, 290], "djikstra": 154, "floyd": 154, "warshal": 154, "bfs_edg": [154, 290], "depth_limit": 154, "core_numb": 154, "vladimir": 154, "batagelj": 154, "matjaz": 154, "zaversnik": 154, "arxiv": [154, 197, 212, 213, 214, 228, 281], "ab": [154, 212, 213, 214, 228, 236, 240, 281, 283], "0310049": 154, "c_u": 154, "deg": [154, 208, 222, 289], "geometr": [154, 276, 290], "vw": 154, "hat": 154, "uv": [154, 222], "uw": 154, "tot": 154, "2deg": 154, "leftrightarrow": 154, "complete_graph": [154, 160, 289], "saram\u00e4ki": 154, "kivel\u00e4": 154, "onnela": 154, "kaski": 154, "kert\u00e9sz": 154, "027105": 154, "2007": [154, 236, 282], "jponnela": 154, "web_docu": 154, "a9": 154, "intens": 154, "coher": 154, "motif": 154, "065103": 154, "2005": [154, 230, 236], "sign": 154, "costantini": 154, "perugini": 154, "plo": 154, "e88669": 154, "fagiolo": 154, "76": 154, "026107": 154, "average_clust": [154, 290], "count_zero": 154, "c_v": 154, "nonzero": [154, 218, 235], "avg": 154, "routin": [154, 289], "marcu": 154, "kaiser": 154, "0802": 154, "2512": 154, "g_to_add_to": [156, 157, 158], "nodes_for_cycl": 156, "keyword": [156, 157, 158, 225, 232, 236, 237, 238, 239, 240, 289, 292, 295, 296], "add_path": [156, 158, 289], "add_star": [156, 157], "nodes_for_path": 157, "add_cycl": [157, 158], "nodes_for_star": 158, "star": [158, 195, 204], "middl": 158, "cnbor": 160, "with_data": 161, "empty_graph": [161, 202], "frequenc": 163, "width": 163, "2m": [164, 242], "prevent": 167, "err": 167, "frozen": [167, 172], "unfreez": 167, "frozen_graph": 167, "unfrozen_graph": 167, "is_frozen": 167, "neighbour": 169, "freez": [172, 290], "signifi": [173, 174], "nodelist": [177, 216], "selfloop_edg": [177, 182, 218, 220], "number_of_selfloop": [177, 183], "selfloop": [182, 183, 216, 222], "nloop": 182, "nodes_with_selfloop": [182, 183], "datadict": [183, 289], "datavalu": 183, "attrnam": [183, 320], "edgeit": 183, "ekei": 183, "graph_atlas_g": 187, "linearli": [187, 203], "ronald": [187, 188, 278], "robin": [187, 188], "wilson": [187, 188], "1998": [187, 188], "111223": 188, "112222": 188, "automorph": [188, 261], "graph_atla": 188, "expens": 188, "popul": [188, 189, 191, 192, 194, 196, 199, 201, 203, 204, 207, 218, 220, 221, 223, 225, 226, 227, 233, 234, 235, 241, 242, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 284, 291], "book": 188, "violat": 188, "lexicograph": 188, "nondecreas": 188, "001111": 188, "000112": 188, "1008": 188, "3333444": 188, "3333336": 188, "1012": 188, "1213": 188, "1244555": 188, "1244456": 188, "perfectli": 189, "ari": [189, 199], "height": 189, "children": [189, 199, 283], "barbel": [190, 201], "bell": 190, "p_": [190, 222, 236], "mere": [190, 201], "aldou": [190, 201], "jim": [190, 201], "binomi": 191, "leftmost": 191, "ci_n": 192, "x_1": 192, "x_2": 192, "x_m": 192, "mod": [192, 206, 235, 254], "subfamili": 192, "ladder": [193, 200], "cl_n": 193, "k_n": 194, "is_direct": [194, 289], "subset_s": 195, "multipartit": [195, 206], "tripartit": 195, "bc": 195, "complete_bipartite_graph": 195, "c_n": 196, "hierarch": 197, "dorogovtsev": 197, "goltsev": 197, "mend": 197, "mat": 197, "0112143": 197, "kw": [198, 296], "unknown": [198, 301], "abc": 198, "rightmost": 199, "jame": 199, "andrew": 199, "storer": 199, "birkhaus": 199, "boston": 199, "2001": [199, 212, 220, 225, 227, 235, 244, 302], "225": [199, 289], "lollipop": 201, "k_m": 201, "p_n": [201, 203], "etext": 201, "turan": 206, "disjoint": [206, 217, 255], "2r": 206, "tau1": 208, "tau2": 208, "mu": 208, "average_degre": 208, "min_degre": 208, "max_degre": 208, "min_commun": 208, "max_commun": 208, "lfr": 208, "mathrm": 208, "expon": 208, "reassign": [208, 246], "interv": [208, 240, 296], "affili": [208, 316], "random_st": [208, 211, 212, 213, 214, 216, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 243, 244, 245, 249, 281, 284, 286], "exceededmaxiter": 208, "250": 208, "frozenset": [208, 291], "rewir": [208, 210, 214, 246, 249], "wire": 208, "robust": 208, "somewhat": 208, "narrow": 208, "andrea": 208, "lancichinetti": 208, "santo": [208, 212, 213, 214], "fortunato": [208, 212, 213, 214], "filippo": 208, "radicchi": 208, "phy": [208, 220, 225, 226, 227, 230], "rev": [208, 220, 225, 226, 227, 230], "046110": 208, "santofortunato": 208, "caveman": [209, 210, 214], "unclear": [209, 210], "connected_caveman_graph": [209, 215], "watt": [209, 210, 220], "phenomenon": [209, 210], "amer": [209, 210], "493": [209, 210], "527": [209, 210], "caveman_graph": 210, "p_in": [211, 212, 213], "p_out": [211, 212, 213], "gaussian": [211, 237, 238, 239], "drawn": [211, 239], "varianc": 211, "probabilti": [211, 214], "random_partition_graph": [211, 216], "ulrik": 211, "brand": 211, "marco": 211, "gaertler": 211, "dorothea": 211, "wagner": 211, "11th": 211, "europ": 211, "symp": 211, "plant": [212, 213], "random_partition_model": 212, "condon": 212, "karp": 212, "algor": 212, "116": 212, "486": [212, 213, 214], "174": [212, 213, 214], "0906": [212, 213, 214], "0612": [212, 213, 214], "relax": 214, "februari": 214, "num_cliqu": 215, "clique_s": 215, "ring": 215, "stochast": [216, 290], "densiti": [216, 218, 236, 238], "symmetr": [216, 235, 258, 262, 268, 270, 281], "300": [216, 285], "prob": 216, "450": 216, "quotient_graph": 216, "relabel": 216, "245": 216, "348": 216, "405": 216, "051": 216, "022": 216, "planted_partition_graph": 216, "gaussian_random_partition_graph": 216, "gnp_random_graph": [216, 243, 244, 245], "holland": 216, "laskei": 216, "leinhardt": 216, "blockmodel": 216, "109": 216, "1983": 216, "windmil": 217, "thought": 217, "contract": 217, "wd": 217, "deg_sequ": [218, 219, 220, 221, 223], "pseudograph": [218, 220], "nonneg": [218, 220], "is_graph": [218, 224], "graphic": [218, 220, 223, 224], "realiz": [218, 220, 223, 246, 247, 248, 249, 276, 301], "tend": 218, "poisson": 218, "constant": [218, 320], "siam": [218, 223, 229], "167": 218, "random_sequ": 218, "hundr": [218, 229], "random_powerlaw_tree_sequ": 218, "5000": 218, "actual_degre": 218, "in_degree_sequ": 220, "out_degree_sequ": 220, "directed_random": 220, "configuration_model": [220, 221, 224], "finit": [220, 222, 235], "strogatz": 220, "026118": 220, "din": 220, "dout": 220, "in_deg_sequ": 221, "out_deg_sequ": 221, "kleitman": [221, 223], "valenc": [221, 223], "mathemat": [221, 223, 231, 233, 235, 244], "1973": [221, 223], "w_0": 222, "w_1": 222, "ldot": 222, "w_u": [222, 236, 239], "w_v": [222, 236, 239], "sum_k": 222, "w_k": 222, "z": [222, 235, 236, 240], "mathcal": 222, "ne": 222, "uu": 222, "fan": [222, 236, 312], "chung": [222, 236], "lu": [222, 312], "ann": 222, "combinator": [222, 282], "145": 222, "2002": 222, "joel": 222, "miller": 222, "aric": [222, 236], "hagberg": [222, 236], "waw": [222, 236], "alan": 222, "friez": 222, "paul": 222, "horn": 222, "pawe\u0142": 222, "pra\u0142at": 222, "lnc": 222, "6732": 222, "115": 222, "havel": 223, "hakimi": 223, "networkxexcept": 223, "resort": 223, "496": 223, "506": 223, "1962": [223, 241, 242, 288], "d_m": 224, "uniform": [224, 236, 245], "networkxunfeas": 224, "moshen": 224, "bayati": 224, "jeong": 224, "han": 224, "kim": 224, "amin": 224, "saberi": 224, "algorithmica": 224, "58": 224, "860": 224, "910": 224, "s00453": 224, "009": 224, "9340": 224, "gn": [225, 288], "a_k": 225, "krapivski": [225, 226, 227, 230], "redner": [225, 226, 227], "066123": [225, 227], "gnc": 226, "growth": [226, 286], "036118": 226, "2005k": 226, "gnr": 227, "probabilii": 227, "self_loop": 228, "preferenti": 228, "proport": 228, "peterson": [228, 271], "nichola": 228, "bori": 228, "pittel": 228, "preprint": 228, "1311": 228, "5961": 228, "2013": [228, 248], "gamma": 229, "delta_in": 229, "delta_out": 229, "bia": 229, "bollob\u00e1": 229, "borg": 229, "chay": 229, "riordan": 229, "fourteenth": 229, "annual": 229, "symposium": 229, "132": [229, 244], "139": 229, "diverg": [230, 290], "retent": 230, "disallow": 230, "ispolatov": 230, "yuryev": 230, "061911": 230, "inclus": 231, "knudsen": 231, "michael": 231, "carsten": 231, "wiuf": 231, "markov": 231, "chain": 231, "1155": 231, "190836": 231, "radiu": [232, 237, 238, 239], "chordal": 233, "chord": [233, 247], "modulo": 233, "mildli": 233, "prime": [233, 235], "lubotzki": 233, "invari": 233, "birkh\u00e4us": 233, "verlag": 233, "basel": 233, "1994": 233, "marguli": 234, "gabber": 234, "galil": 234, "palei": 235, "pz": 235, "f_q": 235, "odd": 235, "bolloba": 235, "cambridg": 235, "theta": [236, 239], "po": [236, 237, 238, 239, 240], "p_dist": [236, 238], "geograph": [236, 239], "rectangular": [236, 240], "ge": [236, 240], "prone": 236, "le": [236, 240, 280], "euclidean": [236, 237, 238, 239, 240], "conceiv": 236, "apart": 236, "taxicab": [236, 240], "expovari": [236, 239], "masuda": 236, "miwa": 236, "konno": 236, "036108": 236, "milan": 236, "bradonji\u0107": 236, "allon": 236, "percu": 236, "giant": 236, "antoni": 236, "bonato": 236, "209": 236, "216": 236, "cube": [237, 238, 239, 257, 274], "kdtree": [237, 238, 239], "minkowski": [237, 238, 239], "infin": [237, 238, 239], "erd\u0151": [237, 238, 239], "r\u00e9nyi": [237, 238, 239], "twenti": 237, "2d": [237, 238, 239, 289, 292], "deviat": [237, 238, 239], "gauss": [237, 238, 239], "penros": [237, 238], "mathew": [237, 238], "soft": 238, "exp": [238, 240], "annal": 238, "2016": 238, "986": 238, "1028": 238, "summat": 239, "nodethr": 239, "cole": 239, "maclean": 239, "blog": 239, "thesi": [239, 245], "waxman": 240, "x_min": 240, "y_min": 240, "x_max": 240, "y_max": 240, "Their": 240, "incompat": [240, 301], "rout": 240, "multipoint": 240, "ieee": [240, 248, 249, 281, 286], "1988": 240, "1617": 240, "1622": 240, "harari": [241, 242, 290], "h_": [241, 242], "ceil": 241, "kn": 241, "hnm_harary_graph": 241, "weisstein": 241, "eric": 241, "mathworld": [241, 250, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 269], "wolfram": [241, 250, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 269], "hararygraph": 241, "proc": [241, 242, 246, 247, 288], "nat": [241, 242, 288], "acad": [241, 242, 288], "sci": [241, 242, 288], "1142": [241, 242, 288], "1146": [241, 242, 288], "floor": 242, "hkn_harary_graph": 242, "boesch": 242, "satyanarayana": 242, "suffel": 242, "reliabl": 242, "synthesi": 242, "99": [242, 320], "2009": [242, 282], "uniform_random_intersection_graph": [243, 244], "nikoletsea": 243, "raptopoulo": 243, "spiraki": 243, "icalp": 243, "\u0131az": 243, "karhum": 243, "aki": 243, "lepist": 243, "sannella": 243, "vol": [243, 286], "3142": 243, "lectur": 243, "1029": 243, "1040": 243, "godehardt": 244, "jaworski": 244, "electron": [244, 282], "singer": 245, "cohen": 245, "1995": 245, "phd": 245, "john": [245, 262], "hopkin": 245, "scheinerman": 245, "evolut": 245, "2000": 245, "156": 245, "nkk": [246, 247], "degree_seq": 246, "n_edges_add": 246, "li": [246, 249], "unsatur": 246, "proof": 246, "tillman": [246, 247, 249], "markopoul": [246, 247, 248, 249, 281], "butt": [246, 247, 281], "gjoka": [246, 247, 248, 249], "2k": [246, 247], "kdd": [246, 247], "seconnd": 247, "joint_degre": [248, 249], "diagon": [248, 264], "joint_degree_graph": 248, "kurant": 248, "5k": 248, "infocom": [248, 249, 281], "stanton": 248, "pinar": 248, "prescrib": 248, "experiment": [248, 296], "n_th": 250, "m_1": 250, "singleton": [250, 289], "m_2": 250, "m_i": 250, "mycielskian": 250, "m_": 250, "mycielskigraph": 250, "p_2": 250, "chromat": [251, 282], "2n": 251, "bigcup": 251, "nonisomporph": 252, "adjanc": 252, "matric": [252, 281], "nonisomorph": 253, "shift_list": 254, "cubic": [254, 257, 258, 261, 262, 268, 270, 271, 276], "lcf": [254, 256, 258, 260, 262, 268, 270], "lederberg": 254, "coxet": 254, "frucht": [254, 261], "hamiltonian": [254, 256, 261, 262, 265, 270, 276], "symmetri": [254, 261], "dodecahedral_graph": 254, "desargues_graph": 254, "heawood_graph": 254, "pappus_graph": 254, "s1": 254, "sk": 254, "v_current": 254, "shiftlist": 254, "heawood": [254, 262], "lcfnotat": 254, "bull": 255, "planar": [255, 258, 259, 261], "pendant": 255, "leg": 255, "chv\u00e1tal": 256, "370": 256, "chv": 256, "c3": [256, 268, 269], "a1tal_graph": 256, "chvatalgraph": 256, "platon": [257, 260, 265, 269, 273, 275], "skeleton": [257, 260, 274, 275], "hypercub": 257, "solid": [257, 274, 275], "aris": 257, "desargu": 258, "desarguesgraph": 258, "kite": [259, 266], "diamondgraph": 259, "dodecahedr": 260, "dodecahedron": 260, "regular_dodecahedron": 260, "dodecahedralgraph": 260, "fruchtgraph": 261, "cage": 262, "perci": 262, "nonplanar": 262, "girth": 262, "heawoodgraph": 262, "win": [262, 271], "tue": [262, 271], "nl": [262, 271], "aeb": [262, 271], "housegraph": [263, 264], "pentatop": 264, "icosahedr": 265, "icosahedron": 265, "icosahedralgraph": 265, "krackhardt": 266, "andr": 266, "beverlei": 266, "carol": 266, "dian": 266, "fernando": 266, "garth": 266, "heather": 266, "ik": 266, "jane": 266, "polit": 266, "landscap": 266, "cognit": 266, "administr": 266, "quarterli": 266, "342": [266, 289], "369": 266, "2307": 266, "2393394": 266, "jstor": 266, "june": 266, "1990": 266, "graph_descript": 267, "ltype": 267, "adjacencylist": 267, "from_dict_of_list": 267, "from_edgelist": 267, "xlist": 267, "c_4": 267, "w2": 267, "vk": 267, "wk": 267, "vj": 267, "wj": 267, "moebiu": 268, "kantor": 268, "m\u00f6biu": 268, "petersen": [268, 271], "b6biu": 268, "93kantor_graph": 268, "octahedr": 269, "octahedron": 269, "shake": 269, "hi": [269, 279, 288], "her": 269, "partner": 269, "handshak": 269, "cocktail": 269, "octahedralgraph": 269, "tur": 269, "a1n_graph": 269, "special_cas": 269, "pappu": 270, "juliu": 271, "counterexampl": [271, 276], "bridgeless": 271, "colour": 271, "drg": 271, "maze": 272, "sedgewick": 272, "3rd": 272, "tetrahedr": 273, "k4": 273, "w4": 273, "grpah": 273, "tetrahedron": [273, 275, 276], "truncat": [274, 275, 276, 281], "archimedean": [274, 275], "octagon": 274, "triangular": 274, "truncated_cub": 274, "coolmath": 274, "polyhedra": 274, "hexagon": 275, "equilater": 275, "truncated_tetrahedron": 275, "tutt": 276, "polyhedr": 276, "tait": 276, "conjectur": 276, "polyhedron": 276, "multipli": 276, "davi": 277, "southern": 277, "women": 277, "gardner": 277, "1941": 277, "south": 277, "chicago": 277, "il": 277, "florentin": 278, "breiger": 278, "philippa": 278, "pattison": 278, "cumul": 278, "dualiti": 278, "septemb": 278, "zachari": 279, "karat": 279, "club": 279, "mr": [279, 282], "offic": 279, "wayn": 279, "fission": 279, "anthropolog": 279, "452": 279, "473": 279, "1977": 279, "coappear": 280, "charact": [280, 285, 291], "novel": 280, "miser": 280, "knuth": 280, "1993": 280, "graphbas": 280, "combinatori": 280, "york": 280, "spectral": [281, 290], "forg": 281, "sgf": 281, "eigenstructur": 281, "synthes": 281, "sensit": 281, "percentag": 281, "telecommun": 281, "bernoulli": 281, "baldesi": 281, "1801": 281, "01715": 281, "karate_club_graph": 281, "sud": 282, "81": 282, "810": 282, "herzberg": 282, "murti": 282, "polynomi": 282, "am": 282, "708": 282, "717": 282, "sander": 282, "torsten": 282, "7pp": 282, "2529816": 282, "encyclopedia": 282, "dec": 282, "2019": 282, "letter": 283, "nil": 283, "arboresc": 283, "downward": 283, "synthet": 283, "trie": 283, "recov": [283, 296], "pr\u00fcfer": 284, "from_prufer_sequ": 284, "forest_str": 284, "triad_nam": 285, "003": 285, "012": 285, "021d": 285, "021u": 285, "021c": 285, "111d": 285, "111u": 285, "030t": 285, "030c": 285, "120d": 285, "120u": 285, "120c": 285, "triadic_censu": 285, "10000": 286, "autonom": [286, 288], "elmokashfi": 286, "tier": 286, "mid": 286, "adv": 286, "bidirect": 286, "peer": 286, "commerci": 286, "agreement": 286, "kvalbein": 286, "dovroli": 286, "bgp": 286, "1250": 286, "1261": 286, "octob": 286, "reweight": 287, "mathematician": 288, "frank": 288, "incoming_graph_data": [289, 292], "default_label": [289, 292], "to_networkx_graph": 289, "110": 289, "protect": 289, "bracket": 289, "shortcut": 289, "nbrsdict": 289, "persion": 289, "miscellan": 289, "__contains__": 289, "__getitem__": 289, "adj_dict": 289, "atlasview": 289, "__iter__": 289, "niter": 289, "__len__": 289, "nnode": 289, "u_of_edg": 289, "v_of_edg": 289, "ebunch_to_add": 289, "preced": 289, "wn2898": 289, "node_for_ad": 289, "nodes_for_ad": 289, "hello": 289, "k3": 289, "attrdict": 289, "behav": 289, "idiom": 289, "foovalu": 289, "adj_it": 289, "nbrdict": 289, "adjlist_inner_dict_factori": 289, "neighbordict": 289, "adjlist_outer_dict_factori": 289, "adjlistdict": 289, "clear_edg": 289, "deepcopi": 289, "fresh": [289, 298], "__class__": 289, "degreeview": 289, "nd_view": 289, "edge_attr_dict_factori": 289, "neighborattrdict": 289, "edge_subgraph": 289, "edgeview": 289, "edgedataview": 289, "ddict": 289, "get_edge_data": 289, "edge_dict": 289, "safe": 289, "graph_attr_dict_factori": 289, "graph_cache_factori": 289, "keyerror": 289, "edge_ind": 289, "data_dictionari": 289, "is_multigraph": 289, "corespond": 289, "nbunch_it": 289, "membership": 289, "exhaust": 289, "possibli": 289, "node_attr_dict_factori": 289, "nodeattrdict": 289, "node_dict_factori": 289, "nodedict": 289, "nodeview": 289, "nodedataview": 289, "nodedata": 289, "bar": 289, "Not": [289, 302], "nedg": 289, "Will": 289, "nodes_for_remov": 289, "set_edge_data": 289, "set_node_data": 289, "set_item": 289, "adjedgeattr": 289, "dd": 289, "nodeattr": 289, "netowrkx": 289, "to_undirected_class": 289, "taken": 289, "itertool": 289, "mg": 289, "nd_iter": 289, "outedgeview": 289, "in_edg": 289, "outedgedataview": 289, "has_predecessor": 289, "has_successor": 289, "indegreeview": 289, "inedgeview": 289, "outdegreeview": 289, "pred": 289, "succ": 289, "_convert_arrow_to_dynam": [290, 292], "atla": 290, "triad": 290, "mycielski": 290, "sudoku": 290, "edgetyp": 291, "utf": [291, 302], "filenam": [291, 302], "rb": 291, "bz2": 291, "uncompress": 291, "whitespac": 291, "obsolet": 291, "write_edgelist": 291, "fh": 291, "textlin": 291, "parse_edgelist": 291, "read_adjlist": 291, "marker": 291, "v_0": 292, "v_1": 292, "implicit": 292, "add_label": 293, "eval": 293, "talk": 295, "output_to_cli": [295, 312], "person_id": [295, 302], "400": 295, "preemptiv": 296, "ifnotpres": 296, "512mi": 296, "etcd_addr": 296, "etcd_listening_client_port": 296, "2379": 296, "etcd_listening_peer_port": 296, "2380": 296, "k8s_vineyard_imag": 296, "vineyardcloudn": 296, "4mi": 296, "2mi": 296, "k8s_coordinator_pod_node_selector": 296, "k8s_engine_pod_node_selector": 296, "dangling_timeout_second": 296, "deregist": 296, "256mi": 296, "4gi": 296, "5gi": 296, "__enter__": 296, "__exit__": 296, "exc_typ": 296, "exc_valu": 296, "exc_tb": 296, "unregist": 296, "default_config_fil": 296, "gs_config_path": 296, "overwrit": [296, 302], "burstabl": 296, "qo": 296, "preempt": 296, "fallback": 296, "bundl": 296, "etcd01": 296, "etcd02": 296, "etcd03": 296, "2gi": 296, "tinyurl": 296, "3nx6k7ph": 296, "bucket": [296, 312], "path1": 296, "path2": 296, "claimnam": 296, "heartbeat": 296, "dangl": 296, "kube_config": 296, "load_kube_config": 296, "eg": 296, "config_fil": 296, "client_configur": 296, "persist_config": 296, "current_context": 296, "gcp": 296, "refresh": 296, "reject": 296, "resource_nam": 296, "sigint": 296, "sigterm": 296, "signal": 296, "engine_config": 296, "get_vineyard_object_mapping_t": 296, "node_label": 296, "recreat": 296, "load_from_gar": [296, 300], "restore_from_pvc": 296, "kubeconfig": 296, "run_fetch": 296, "lock": 296, "store_to_pvc": 296, "backup": 296, "graph_id": 296, "describl": 297, "maxwel": 298, "binlog": 298, "buildgartfrag": 298, "etcd_endpoint": 298, "gartfrag": 298, "etcd_client": 298, "make_shar": 298, "mpi_comm_world": 298, "schema_kei": 298, "gart_schema_p": 298, "to_str": 298, "edge_config_str": 298, "as_str": 298, "gart_blob_m": 298, "_p": 298, "config_str": 298, "edge_config": 298, "inner_vertices_it": 298, "elabel": [298, 303], "edge_it": 298, "hive": 300, "coo": [300, 322], "ordered_by_sourc": 300, "ordered_by_dest": 300, "graph_yaml_path": 300, "broader": 301, "ffi": 301, "agnost": 301, "grin_": 301, "partitioned_graph": 301, "edge_type_nam": 301, "boundari": 301, "sync_properti": 301, "grin_partitioned_graph": 301, "grin_partit": 301, "grin_graph": 301, "grin_get_local_graph_from_partit": 301, "grin_edge_typ": 301, "etyp": 301, "grin_get_edge_type_by_nam": 301, "grin_vertex_type_list": 301, "src_vtype": 301, "grin_get_src_types_from_edge_typ": 301, "dst_vtype": 301, "grin_get_dst_types_from_edge_typ": 301, "src_vtypes_num": 301, "grin_get_vertex_type_list_s": 301, "dst_vtypes_num": 301, "grin_vertex_typ": 301, "grin_get_vertex_type_from_list": 301, "grin_vertex_properti": 301, "dst_vp": 301, "grin_get_vertex_property_by_nam": 301, "grin_null_vertex_properti": 301, "NOT": 301, "grin_vertex_property_t": 301, "dst_vpt": 301, "grin_get_vertex_property_table_by_typ": 301, "grin_datatyp": 301, "dst_vp_dt": 301, "grin_get_vertex_property_data_typ": 301, "grin_vertex_list": 301, "__src_vl": 301, "grin_get_vertex_list": 301, "_src_vl": 301, "grin_select_type_for_vertex_list": 301, "src_vl": 301, "grin_select_master_for_vertex_list": 301, "src_vl_num": 301, "grin_get_vertex_list_s": 301, "grin_vertex": 301, "grin_get_vertex_from_list": 301, "ifdef": 301, "grin_trait_select_edge_type_for_adjacent_list": 301, "grin_adjacent_list": 301, "_adj_list": 301, "grin_get_adjacent_list": 301, "grin_direct": 301, "adj_list": 301, "grin_select_edge_type_for_adjacent_list": 301, "adj_lsit": 301, "endif": 301, "al_sz": 301, "grin_get_adjacent_list_s": 301, "ifndef": 301, "grin_edg": 301, "grin_get_edge_from_adjacent_list": 301, "grin_get_edge_typ": 301, "grin_equal_edge_typ": 301, "grin_get_neighbor_from_adjacent_list": 301, "grin_get_value_from_vertex_property_t": 301, "grin_vertex_ref": 301, "uref": 301, "grin_get_vertex_ref_for_vertex": 301, "recogin": 301, "u_master_partit": 301, "grin_get_master_partition_from_vertex_ref": 301, "send_valu": 301, "fragment_group_id": [301, 303], "get_partitioned_graph_by_object_id": 301, "local_partit": 301, "grin_get_local_partition_list": 301, "pnum": 301, "grin_get_partition_list_s": 301, "grin_get_partition_from_list": 301, "fold": [301, 320], "disclaim": 301, "sacrif": 301, "boilerpl": 301, "ineffici": 301, "enorm": 301, "grin_assume_all_vertex_property_local_complet": 301, "grin_assume_master_vertex_property_local_complet": 301, "grin_assume_by_type_all_vertex_property_local_complet": 301, "grin_assume_by_type_master_vertex_property_local_complet": 301, "assumpt": 301, "wider": 301, "undefin": 301, "tell": 301, "granular": 301, "grin_frag": 301, "storagespecif": 301, "vertexhandl": 301, "goe": 301, "grin_edge_list": 301, "grin_partition_list": 301, "grin_enable_": 301, "_list_arrai": 301, "vertexlist": 301, "grin_enable_vertex_list_arrai": 301, "vl": 301, "idx": 301, "sz": 301, "caller": 301, "_list_iter": 301, "grin_enable_vertex_list_iter": 301, "grin_vertex_list_iter": 301, "grin_get_vertex_list_begin": 301, "grin_get_next_vertex_list_it": 301, "vli": 301, "grin_is_vertex_list_end": 301, "grin_get_vertex_from_it": 301, "grin_get_vertex_type_by_nam": 301, "vtype": 301, "grin_vertex_property_list": 301, "grin_get_vertex_properties_by_nam": 301, "vprop": 301, "vpl": 301, "seperatedli": 301, "with_vertex_label": 301, "with_edge_label": 301, "facili": 301, "recogn": [301, 302], "grin_serialize_vertex_ref": 301, "grin_deserialize_to_vertex_ref": 301, "grin_get_vertex_from_vertex_ref": 301, "vref": 301, "recgon": 301, "reciev": 301, "borrow": 301, "vertexcut": 301, "centur": 301, "edgecut": 301, "repect": 301, "judgement": 301, "columnar": 302, "gear": 302, "compromis": 302, "timestamp": 302, "strict": 302, "foward": 302, "ingestor": [302, 310], "multitud": 302, "exemplifi": 302, "said": 302, "grpc_port": 302, "gremlin_port": 302, "grpc_endpoint": 302, "conn": 302, "add_vertex_label": 302, "v_label_nam": 302, "add_primary_kei": 302, "pk_name": 302, "prop_name_1": 302, "prop_name_2": 302, "add_edge_label": 302, "e_label_nam": 302, "prop_name_3": 302, "add_properti": 302, "gremlinpython": 302, "xmln": 302, "xsi": 302, "w3": 302, "xmlschema": 302, "schemaloc": 302, "xsd": 302, "modelvers": 302, "gremlinexampl": 302, "codehau": 302, "mojo": 302, "classpath": 302, "mainclass": 302, "compliancelevel": 302, "killaft": 302, "credenti": 302, "valuemap": [302, 320], "println": 302, "javascript": 302, "npm": 302, "catch": 302, "data_load": 302, "load_tool": 302, "xzvf": 302, "alic": 302, "bob": 302, "person_knows_person": 302, "person_id_1": 302, "20210611151923": 302, "seper": 302, "mapreduc": 302, "ldbc_sampl": [302, 320, 322], "data_output": 302, "55555": 302, "person_0_0": [302, 317, 322], "propertiescolmap": 302, "person_knows_person_0_0": [302, 317, 322], "srclabel": 302, "dstlabel": 302, "srcpkcolmap": 302, "dstpkcolmap": 302, "9000": [302, 322], "mb": 302, "columnidx": 302, "propertynam": 302, "_success": 302, "xxxxx": 302, "sst": 302, "00000": 302, "00001": 302, "00002": 302, "load_data": 302, "realtim": 302, "insert_vertex": 302, "vertexrecordkei": 302, "insert_vertic": 302, "update_vertex_properti": 302, "delel": 302, "delete_vertex": 302, "vertex_pk": 302, "delete_vertic": 302, "insert_edg": 302, "edgerecordkei": 302, "update_edge_properti": 302, "delete_edg": 302, "edge_pk": 302, "avaiabl": 302, "remote_flush": 302, "snapshot_id": 302, "primary_kei": 302, "src_vertex_kei": 302, "dst_vertex_kei": 302, "provis": 302, "lapp": 302, "reinstal": 302, "pv_name": 302, "pod_nam": [302, 310, 315], "logback": 302, "arrowfragmentgroup": 303, "spread": 303, "ipc": 303, "docket": 303, "string_oid": 303, "ipcclient": 303, "writeout": 303, "nb": 303, "fragmentloc": 303, "instance_id": 303, "gettotalnodesnum": 303, "labeltyp": 303, "vlabel": 303, "vertex_data_t": 303, "edge_data_t": 303, "consolid": [303, 310], "willing": 304, "implic": 304, "polymorph": 304, "instant": 304, "aka": 304, "applciat": 304, "pygrap": [304, 305], "frist": 304, "from_numpi": 304, "bind_sssp1": 304, "delai": 304, "screen": 304, "bind_sssp2": 304, "vertex_bal": 305, "vcut": 305, "ecut": 305, "syoov": 310, "79b44f7b58": 310, "ctmqb": 310, "10m": 310, "9m53": 310, "9m46": 310, "6dd67c65fc": 310, "gn4mb": 310, "15334625083466732": 310, "33d": 310, "kubetl": 310, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 312, "\u8be5\u7cfb\u7edf\u4e8e": 312, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 312, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 312, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 312, "\u5728": [312, 313, 314, 315, 316, 319, 320, 321, 322], "\u4e2d": [312, 314, 315, 316, 322], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 312, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 312, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 312, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 312, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 312, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 312, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 312, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 312, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 312, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 312, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 312, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 312, "\u521b\u5efa\u9ed8\u8ba4": 312, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 312, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 312, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 312, "result_lpa": 312, "result_sssp": 312, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 312, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 312, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 312, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 312, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 312, "\u7c7b": [312, 322], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 312, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 312, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 312, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 312, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 312, "\u6216\u5199\u5165": 312, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 312, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 312, "\u6216\u5199\u5165\u672c\u5730\u7684": 312, "lpa_result": 312, "\u6570\u636e\u7ed3\u6784": 312, "\u6b64\u5916": [312, 316], "\u5982": [312, 315, 318, 320], "\u5feb\u901f\u4e0a\u624b": [312, 318], "\u4e2d\u6240\u793a": 312, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 312, "\u7684\u65b0\u5c5e\u6027": 312, "\u5217": 312, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 312, "\u5217\u540d\u4e3a": 312, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 312, "new_graph": [312, 317], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 312, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 312, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 312, "\u7c7b\u4f3c\u7684": 312, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 312, "\u4f8b\u5982\u9876\u70b9id": 312, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 312, "\u4ee3\u8868\u7ed3\u679c": 312, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 312, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 312, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 312, "\u8f6c\u6362\u4e3a": [312, 321], "\u4f7f\u7528\u9876\u70b9\u7684": 312, "\u4f5c\u4e3a\u540d\u4e3a": 312, "\u7684\u5217": 312, "df_vd": 312, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 312, "df_result": 312, "property0": 312, "label0": 312, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 312, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 312, "\u5c06": [312, 321], "\u9876\u70b9\u7684": 312, "\u4f5c\u4e3a": [312, 313, 322], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 312, "gs_data": 312, "\u53ef\u4ee5\u67e5\u770b": 312, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 312, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 312, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 312, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 312, "\u5728\u7eaf": 312, "\u6a21\u5f0f": [312, 320], "\u4e0b\u4f7f\u7528": 312, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 312, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 312, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 312, "\u5982\u4ee3\u7801\u6240\u793a": 312, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 312, "\u88c5\u9970\u7684\u7c7b": 312, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 312, "\u56fe\u7b97\u6cd5\u51fd\u6570": 312, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 312, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 312, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 312, "\u4e0e": 312, "\u76f8\u5173\u7684\u5b8c\u6574": 312, "\u53ef\u4ee5\u53c2\u8003": 312, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 312, "\u4e3a\u4f8b": [312, 316], "\u7528\u6237\u5728": 312, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 312, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 312, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 312, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 312, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 312, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 312, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 312, "\u589e\u91cf\u8ba1\u7b97": 312, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 312, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 312, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 312, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [312, 322], "\u7ecf\u5178\u7684": 312, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 312, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 312, "\u6a21\u578b\u4e4b\u5916": 312, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 312, "\u7f16\u7a0b\u6a21\u578b": 312, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 312, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 312, "\u6a21\u578b\u4e0d\u540c": 312, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 312, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 312, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 312, "\u800c\u4e0d\u540c\u4e8e": 312, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 312, "\u8fd8\u662f\u4ee5": 312, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 312, "\u88c5\u9970\u5668": 312, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 312, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 312, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 312, "\u4e2d\u7684": [312, 313, 315], "\u51fd\u6570": [312, 320], "\u4e0b\u5217\u4ee3\u7801": 312, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 312, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 312, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 312, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 312, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 312, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 312, "\u8fd9\u91cc": [312, 313, 322], "\u662f\u4e0e": 312, "\u76f8\u5bf9\u5e94\u7684": 312, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 312, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 312, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 312, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 312, "\u5728\u6b64\u4e4b\u540e": 312, "\u60a8\u53ef\u4ee5\u4ece": 312, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 312, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 312, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 312, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 312, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 312, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 312, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 312, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 312, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 312, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 312, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 312, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 312, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 312, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 312, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 312, "dist_0": 312, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 312, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 312, "\u8bf7\u53c2\u8003": [312, 320], "\u6765\u5c06": 312, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 312, "\u5b89\u88c5\u5b8c\u6210\u540e": 312, "\u4f60\u9700\u8981\u5c06": 312, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 312, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 312, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 312, "\u6765\u786e\u4fdd": 312, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 312, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 312, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 312, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 312, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 312, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 312, "pluge": 312, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 312, "\u7528\u6237\u9700\u8981\u6309\u7167": 312, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 312, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 312, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 312, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 312, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 312, "defaultpropertyappbas": 312, "\u6216": [312, 313, 314, 315, 318, 320], "parallelpropertyappbas": 312, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 312, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 312, "defaultappbas": 312, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 312, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 312, "\u5176\u5e94\u8be5\u662f": 312, "defaultpropertycontextbas": 312, "parallelpropertycontextbas": 312, "defaultcontextbas": 312, "\u6216\u8005": [312, 314, 321, 322], "\u7684\u7684\u5b50\u7c7b": 312, "\u901a\u8fc7\u7ee7\u627f": 312, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 312, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 312, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 312, "client\u4e2dquery\u8fd4\u56de\u7684context": 312, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 312, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 312, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 312, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 312, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 312, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 312, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 312, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 312, "\u8fd9\u4e2a\u9700\u6c42": 312, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 312, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 312, "graphscope_repo": 312, "app_class_nam": 312, "java_path": 312, "path_to_your_jar": 312, "param_str": 312, "params_str": 312, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 312, "app\u7684\u7c7b\u7684\u5168\u540d": 312, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 312, "\u53ef\u4ee5\u901a\u8fc7": 312, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 312, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 312, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 312, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 312, "\u53ef\u4ee5": 312, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 312, "jar_path": 312, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 312, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 312, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 312, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 312, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 312, "\u7684app": 312, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 312, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 312, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [312, 313, 315], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 312, "\u76f8\u5173\u8bba\u6587": 312, "wenfei": 312, "jingbo": 312, "xu": 312, "wenyuan": 312, "yu": 312, "jingren": 312, "zhou": 312, "xiaojian": 312, "luo": 312, "qiang": 312, "yin": 312, "cao": 312, "ruiqi": 312, "tod": [312, 318], "yinghui": 312, "wu": 312, "jiaxin": 312, "jiang": 312, "43rd": 312, "zeyu": 312, "zheng": 312, "bohan": 312, "chao": 312, "tian": 312, "\u4ee5": [313, 316, 317, 319, 322], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 313, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [313, 315], "\u5982\u679c\u8fd0\u884c": 313, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 313, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 313, "\u56e0\u6b64": [313, 314, 316], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 313, "\u4f1a\u8bdd": [313, 316], "\u5ba2\u6237\u7aef": [313, 314, 318], "\u5b83\u5c01\u88c5": 313, "\u7ba1\u7406\u7740": 313, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 313, "\u5e76": 313, "\u8fde\u63a5": 313, "\u64cd\u4f5c\u7528\u6237\u5728": 313, "\u96c6\u7fa4\u4e0a\u7684": 313, "\u5f15\u64ce": 313, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 313, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 313, "\u5b9e\u4f8b": 313, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 313, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 313, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 313, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 313, "\u8def\u5f84": [313, 322], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 313, "\u7136\u540e": [313, 321], "\u5c06\u5176\u901a\u8fc7": 313, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 313, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 313, "\u8282\u70b9\u7684\u6982\u5ff5": 313, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 313, "\u521b\u5efa\u7684\u96c6\u7fa4": 313, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 313, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 313, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 313, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 313, "\u4e0a\u7684\u4e00\u4e2a": 313, "\u5b9e\u4f8b\u5305\u542b": 313, "\u4e00\u4e2a\u8fd0\u884c": 313, "\u7684": [313, 314, 315, 318, 323], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 313, "\u8d1f\u8d23\u5bf9": 313, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 313, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 313, "\u5f15\u64ce\u5bb9\u5668\u7684": 313, "replicaset": 313, "\u5bf9\u8c61": 313, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 313, "\u901a\u8fc7": [313, 316], "\u63a5\u6536\u6765\u81ea": 313, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 313, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 313, "\u56fe\u67e5\u8be2\u5f15\u64ce": 313, "\u56fe\u5b66\u4e60\u5f15\u64ce": [313, 318], "\u7684\u751f\u547d\u5468\u671f": 313, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 313, "\u8bf7\u5728": 313, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 313, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 313, "\u5b89\u88c5": [313, 318], "release_nam": 313, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 313, "\u53c2\u8003": 313, "\u8be5\u94fe\u63a5": 313, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 313, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 313, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 313, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 313, "\u96c6\u7fa4": [313, 315, 319], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 313, "\u7528\u6cd5\u5982\u4e0b": 313, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 313, "launch_clust": 313, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 313, "pyyaml": 313, "boto3": 313, "your_access_key_id": 313, "your_access_key_secret": 313, "region": 313, "your_region_nam": 313, "kube_config_path": 313, "alibabacloud_cs20151215": 313, "alibabacloud_ecs20140526": 313, "alibabacloud_vpc20160428": 313, "your_region_id": 313, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 313, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 313, "\u5e73\u53f0\u4e0a": 313, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 313, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 313, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 313, "\u672c\u5730\u90e8\u7f72": 313, "graphscope_env": [313, 314], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 314, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 314, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 314, "\u9075\u5faa": 314, "\u7684\u5f00\u6e90\u534f\u8bae": 314, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 314, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 314, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 314, "\u955c\u50cf": 314, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 314, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 314, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 314, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 314, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 314, "\u6267\u884c": 314, "10240m": 314, "minitest": 314, "unittest": 314, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 314, "\u6bd4\u5982": [314, 322], "\u56fe\u5206\u6790\u5f15\u64ce": [314, 318], "\u6a21\u5757": 314, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 314, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 314, "\u7684\u6784\u5efa\u8fc7\u7a0b": 314, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 314, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 314, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 314, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 314, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 314, "\u4e3a": [314, 315, 316], "shortsha": 314, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 314, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 314, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 314, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 314, "\u90a3\u4e48": 314, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 314, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 314, "\u5ba2\u6237\u7aef\u5373\u53ef": 314, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 314, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 314, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 314, "\u4e0b\u7684": 314, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 314, "manylinux2014": 314, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 314, "install_prefix": 314, "\u4e0b\u5206\u522b\u6784\u5efa": 314, "\u7531\u4e8e": 314, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 314, "\u975edocker": 314, "\u4e2d\u8fdb\u884c": 314, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 314, "\u7684\u4f9d\u8d56": 314, "\u57fa\u4e8e\u5f53\u524d": 314, "\u73af\u5883\u4e0b\u7684": 314, "\u7248\u672c\u6784\u5efa": 314, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [314, 316], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 314, "\u7248\u672c": [314, 319], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 314, "conda": 314, "pyenv": 314, "\u5b89\u88c5\u591a\u4e2a": 314, "\u7684\u7248\u672c": 314, "\u98ce\u683c": 314, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 314, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 314, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 314, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 315, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 315, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 315, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 315, "\u6216\u8005\u5728": 315, "\u4e0e\u6211\u4eec\u8054\u7cfb": 315, "\u8fd0\u884c": 315, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 315, "\u5728\u901a\u8fc7": 315, "\u5ba2\u6237\u7aef\u4f7f\u7528": 315, "\u8fc7\u7a0b\u4e2d": 315, "\u9700\u8981\u7684\u6700\u4f4e": 315, "\u7248\u672c\u662f3": 315, "\u6700\u4f4epip\u7248\u672c\u662f": 315, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 315, "\u5355\u673a\u60c5\u51b5\u4e0b": 315, "\u8d44\u6e90\u9700\u6c42": 315, "\u6838": 315, "\u5185\u5b58": 315, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 315, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 315, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 315, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 315, "\u662f\u5426\u5f3a\u4f9d\u8d56": 315, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 315, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 315, "\u7684\u5f62\u5f0f\u5206\u53d1": 315, "\u53ef\u4ee5\u7528": 315, "\u5feb\u901f\u5b89\u88c5": 315, "\u5982\u4f55\u5982\u67e5\u770b": 315, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 315, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 315, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 315, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 315, "\u53ef\u4ee5\u4f7f\u7528": [315, 321], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 315, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 315, "\u7684\u78c1\u76d8": 315, "\u4e5f\u53ef\u5728": 315, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 315, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 315, "\u547d\u4ee4\u65f6": 315, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 315, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 315, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 315, "\u8fdb\u884c\u5220\u9664": 315, "\u901a\u5e38\u60c5\u51b5\u4e0b": 315, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 315, "\u90e8\u7f72": [315, 318], "\u65f6": [315, 316], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 315, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 315, "\u7b49\u6743\u9650": 315, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 315, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 315, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 315, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 315, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 315, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 315, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 315, "\u76ee\u524d": [315, 322], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 315, "\u53ef\u901a\u8fc7": 315, "\u8be5\u6587\u6863": 315, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 315, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 315, "\u5982\u679c": 315, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 315, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 315, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 315, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 315, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 315, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 315, "\u8f7d\u56fe\u9636\u6bb5": 315, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 315, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 315, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 315, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 315, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 315, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 315, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 315, "\u53ef\u89c1": 315, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 315, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 315, "\u90e8\u7f72\u7684": 315, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 315, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 315, "\u865a\u62df\u7684": 315, "\u6709\u4ec0\u4e48\u533a\u522b": 315, "\u5982\u4f55\u8bbe\u7f6e": 315, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 315, "\u5b83\u5b58\u50a8\u7531": 315, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 315, "\u7684\u5143\u4fe1\u606f": 315, "\u4f8b\u5982\u5f62\u72b6": 315, "\u540d\u79f0\u7b49": 315, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 315, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 315, "\u5b83\u76f8\u5f53\u4e8e": 315, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 315, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 315, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 315, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 315, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 315, "\u7684\u540c\u6837\u5927\u5c0f": 315, "\u5bfc\u81f4\u5728": 315, "\u73af\u5883\u4e0b\u5b89\u88c5": 315, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 315, "\u7f16\u8bd1": 315, "\u5931\u8d25": 315, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 315, "\u8be6\u60c5\u53ef\u53c2\u8003": 315, "\u4f60\u53ef\u4ee5\u6839\u636e": 315, "\u6b64\u6559\u7a0b": 315, "\u6765\u6e90\u7801\u7f16\u8bd1": 315, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 315, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 315, "\u4e0a\u5206\u914d": 315, "\u65f6\u9047\u5230\u4e86": 315, "\u95ee\u9898": 315, "\u5982\u4f55\u89e3\u51b3": 315, "\u901a\u5e38\u5f53\u4f7f\u7528": 315, "\u7684\u65b9\u5f0f\u5b89\u88c5": 315, "\u4f1a\u62a5": 315, "\u9519\u8bef": [315, 317], "\u6211\u4eec\u901a\u8fc7": 315, "\u6765\u67e5\u770b\u65e5\u5fd7": 315, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 315, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 315, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 315, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 315, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 315, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 315, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 315, "\u7136\u540e\u5c06": 315, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 315, "\u4e3a\u4ec0\u4e48\u5728": 315, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 315, "\u5b9e\u4f8b\u65f6": 315, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 315, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 315, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 315, "\u96c6\u7fa4\u62c9\u8d77": 315, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 315, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 315, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 315, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 315, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 315, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 315, "\u6216\u5bb9\u5668": 315, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 315, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 315, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 315, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 315, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 315, "\u4ee5\u53ca": [315, 322], "\u8bf7\u6ce8\u610f": 315, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 315, "unix": 315, "stackexchang": 315, "23452": 315, "\u5176\u4ed6\u95ee\u9898": 315, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 315, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 315, "\u540c\u65f6": [315, 320], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 315, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 316, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 316, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 316, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 316, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 316, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 316, "\u4f7f\u7528": [316, 318, 321, 322, 323], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 316, "\u6570\u636e\u96c6": 316, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 316, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 316, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 316, "\u5373\u8bba\u6587": 316, "\u4f5c\u8005": 316, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 316, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 316, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 316, "\u7ed9\u51fa\u5f02\u6784\u7684": 316, "\u6570\u636e": 316, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 316, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 316, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 316, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 316, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 316, "\u5728\u8be5\u6570\u636e\u4e2d": 316, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 316, "\u6458\u8981\u62bd\u53d6\u7684": 316, "\u7ef4": 316, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 316, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 316, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 316, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 316, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 316, "\u5ba2\u6237\u7aef\u8c03\u7528": 316, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 316, "\u6b65\u9aa4": 316, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 316, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 316, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 316, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 316, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 316, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 316, "\u7684\u7b2c\u4e00\u6b65": 316, "\u6211\u4eec\u9700\u8981\u5728": 316, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 316, "\u5bf9\u4e8e": [316, 319], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 316, "\u670d\u52a1\u7c7b\u578b": 316, "\u9ed8\u8ba4\u662f": 316, "\u53e6\u5916": [316, 322], "\u6ce8\u610f": [316, 319], "\u662f": 316, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 316, "\u5f53\u5728": 316, "\u4e0a\u4f7f\u7528": 316, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 316, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 316, "\u901a\u5e38\u4e3a": 316, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 316, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 316, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 316, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 316, "\u8be5": 316, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 316, "\u6240\u6709\u8d44\u6e90": 316, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 316, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 316, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 316, "\u90fd\u6709\u4e00\u4e2a": 316, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 316, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 316, "\u8f7d\u56fe": [316, 317, 318], "\u4ee5\u5c5e\u6027\u56fe": 316, "\u5efa\u6a21\u56fe\u6570\u636e": [316, 322], "\u5c5e\u6027\u56fe\u4e2d": 316, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 316, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 316, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 316, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 316, "\u5206\u522b\u6807\u8bb0\u4e3a": 316, "\u8bba\u6587": 316, "\u673a\u6784": 316, "\u7814\u7a76\u9886\u57df": 316, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 316, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 316, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 316, "\u5f15\u7528": 316, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 316, "\u9876\u70b9": 316, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 316, "\u64b0\u5199": 316, "\u7684\u8fb9": [316, 322], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 316, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 316, "\u6240\u6709\u7684\u9876\u70b9": 316, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 316, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 316, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 316, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 316, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 316, "\u6570\u636e\u6587\u4ef6": 316, "\u7ed3\u5408\u4f7f\u7528": 316, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 316, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 316, "author_affiliated_with_institut": 316, "paper_has_topic_field_of_studi": 316, "hastop": 316, "paper_cites_pap": 316, "author_writes_pap": 316, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 316, "\u8fd9\u91cc\u7684": 316, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 316, "\u4e2d\u7684\u56fe": 316, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 316, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 316, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 316, "\u63a2\u7d22\u6027": 316, "\u65b9\u5f0f\u6765\u63a2\u7d22": 316, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 316, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 316, "\u91c7\u7528\u79f0\u4e3a": 316, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 316, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 316, "\u5728\u6b64\u793a\u4f8b\u4e2d": 316, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 316, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 316, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 316, "\u552f\u4e00\u6807\u8bc6": 316, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 316, "\u4e8b\u5b9e\u8bc1\u660e": 316, "\u8bb8\u591a\u7b97\u6cd5": 316, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 316, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 316, "\u96c6\u4e2d\u6027": 316, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 316, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 316, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 316, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 316, "\u80cc\u540e\u57fa\u4e8e": 316, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 316, "\u7136\u540e\u8fd0\u884c": 316, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 316, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 316, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 316, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 316, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 316, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 316, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 316, "\u5f53\u524d": 316, "\u652f\u6301\u7528\u6237\u4ee5": 316, "\u6a21\u578b\u548c": 316, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 316, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 316, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 316, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 316, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 316, "\u6211\u4eec\u8bad\u7ec3\u4e86": 316, "\u6a21\u578b": 316, "\u5c06\u8282\u70b9": 316, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 316, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 316, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 316, "\u4e3a\u6b64": 316, "\u63a5\u7740\u4e0a\u4e00\u6b65": 316, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 316, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 316, "\u6700\u540e": [316, 317, 320], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 316, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 316, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 316, "\u548c\u5f15\u64ce": 316, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 316, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 317, "\u6295\u5f71\u7684\u65b9\u6cd5": 317, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 317, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 317, "\u5177\u4f53\u800c\u8a00": 317, "\u56fe": 317, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 317, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 317, "\u6211\u4eec\u5df2\u7ecf\u5728": 317, "\u4e00\u8282\u89c1\u5230\u8fc7": 317, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 317, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 317, "\u8fdb\u4e00\u6b65\u7684": 317, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 317, "\u4e2d\u4e4b\u540e": 317, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 317, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 317, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 317, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 317, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 317, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 317, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 317, "pathlib": 317, "\u5230\u8fd9\u91cc": 317, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 317, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 317, "graph1": 317, "comment_0_0": [317, 322], "graph2": 317, "comment_replyof_comment_0_0": [317, 322], "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 317, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 317, "\u5728\u5e95\u5c42": 317, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 317, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 317, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 317, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 317, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 317, "\u6765\u5b8c\u6210": 317, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 317, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 317, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 317, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 317, "\u503c\u53ef\u4ee5\u4e3a": 317, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 317, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 317, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 317, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 317, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 317, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 317, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 317, "sub_graph2": 317, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 317, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 317, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 317, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 317, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 317, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 317, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 317, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 317, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 317, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 317, "\u8fb9\u6807\u7b7e": 317, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 317, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 317, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 317, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 317, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 317, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 317, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 317, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 318, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 318, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 318, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 318, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 318, "\u63d0\u4f9b\u4e86": 318, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 318, "\u5177\u6709\u4e00\u7ad9\u5f0f": 318, "\u5f00\u53d1\u4fbf\u6377": 318, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 318, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 318, "\u5305\u62ec": [318, 321], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 318, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 318, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 318, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 318, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 318, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 318, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 318, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 318, "\u5982\u98ce\u63a7": 318, "\u7535\u5546\u63a8\u8350": 318, "\u5e7f\u544a": 318, "\u7f51\u7edc\u5b89\u5168": [318, 321], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 318, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 318, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 318, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 318, "\u6700\u4f73\u8bba\u6587\u5956": 318, "vldb2017": 318, "\u6700\u4f73\u6f14\u793a\u5956": 318, "vldb2020": 318, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 318, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 318, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 318, "2021\u5f55\u7528": 318, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 318, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 318, "kdd\u7b49": 318, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 318, "\u57fa\u4e8e": [318, 323], "\u793a\u4f8b": 318, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 318, "\u521b\u5efa\u4f1a\u8bdd": 318, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 318, "\u56fe\u5206\u6790": 318, "\u56fe\u795e\u7ecf\u7f51\u7edc": 318, "\u5173\u95ed\u4f1a\u8bdd": 318, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 318, "\u5728aw": 318, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 318, "\u672c\u5730\u90e8\u7f72graphscop": 318, "\u5165\u95e8\u6559\u7a0b": 318, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [318, 323], "\u4f7f\u7528\u517c\u5bb9": [318, 323], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [318, 323], "\u7528": [318, 320, 323], "\u50cf": [318, 323], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [318, 323], "\u8f7d\u5165\u56fe\u6570\u636e": [318, 323], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [318, 323], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [318, 323], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [318, 323], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [318, 323], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [318, 323], "bipartitegraphsag": [318, 323], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [318, 323], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [318, 323], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [318, 323], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 318, "\u624b\u52a8\u914d\u7f6e\u56fe": 318, "\u9ad8\u7ea7\u7528\u6cd5": 318, "\u4ece": [318, 320], "\u4e2d\u8f7d\u56fe": 318, "\u7684\u53d8\u79cd": 318, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 318, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 318, "\u6295\u5f71": 318, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 318, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 318, "\u5185\u7f6e\u7b97\u6cd5": 318, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 318, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 318, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 318, "\u4e2d\u7684\u51fd\u6570": 318, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 318, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 318, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 318, "\u5229\u7528python": 318, "\u8fde\u63a5graphscop": 318, "\u5229\u7528java": 318, "\u5f00\u53d1\u63a7\u5236\u53f0": 318, "gremlin\u7f16\u7a0b\u5165\u95e8": 318, "gremlin\u517c\u5bb9\u6027": 318, "\u5bf9\u6bd4tinkerpop": 318, "\u56fe\u5b66\u4e60\u6a21\u578b": 318, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 318, "\u5e38\u89c1\u95ee\u9898": 318, "\u5f00\u53d1\u8005\u6307\u5357": 318, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 318, "\u6784\u5efa": 318, "\u4ee3\u7801\u98ce\u683c": 318, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 319, "sur": 319, "\u7a0b\u5e8f\u5305": 319, "\u7684\u5f62\u5f0f\u53d1\u5e03": 319, "\u53ef\u76f4\u63a5\u901a\u8fc7": 319, "\u9700\u8981\u6ee1\u8db3": 319, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 319, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 319, "\u73af\u5883\u4e0b\u8fd0\u884c": 319, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 319, "\u7684\u7528\u6237": 319, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 319, "\u5e76\u5728": 319, "\u4e2d\u5f00\u542f": 319, "\u529f\u80fd": 319, "\u53d1\u884c\u7248\u7528\u6237": 319, "\u6211\u4eec\u63d0\u4f9b\u4e86\u811a\u672c\u6765\u51c6\u5907\u8fd0\u884c\u65f6\u73af\u5883": 319, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 319, "\u4e0a\u5b89\u88c5": 319, "wsl2": 319, "\u4ee5\u4f7f\u7528\u811a\u672c": 319, "install_dep": 319, "\u63a5\u4e0b\u6765": [319, 320, 321], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 319, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 320, "\u7b80\u79f0gie": 320, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 320, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 320, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 320, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 320, "\u8be5\u5f15\u64ce\u652f\u6301": 320, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 320, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 320, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 320, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 320, "\u63a5\u53e3": [320, 321], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 320, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 320, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 320, "\u5982\u4e0b\u6240\u793a": 320, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 320, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 320, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 320, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 320, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 320, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 320, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 320, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 320, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 320, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 320, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 320, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 320, "\u683c\u5f0f": 320, "\u7684\u8f93\u51fa": 320, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 320, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 320, "python\u8bbf\u95ee\u56fe\u6570\u636e": 320, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 320, "\u5b98\u65b9\u6587\u6863": 320, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 320, "\u8be6\u89c1gremlin": 320, "java\u7684": 320, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 320, "\u4e5f\u53eb\u505arepl\u73af\u5883": 320, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 320, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 320, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 320, "\u5b89\u88c5gremlin": 320, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 320, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 320, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 320, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 320, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 320, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 320, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 320, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 320, "\u5176\u4e2d\u7684": 320, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 320, "\u6216ip": 320, "\u548c\u7aef\u53e3": 320, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 320, "\u63d0\u793a\u7b26\u4e0b": 320, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 320, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 320, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 320, "\u8fdc\u7a0b": 320, "graphscope\u6267\u884c": 320, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 320, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 320, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 320, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 320, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 320, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 320, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 320, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 320, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 320, "hoc": 320, "\u904d\u5386\u67e5\u8be2": 320, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 320, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 320, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 320, "\u70b9\u6216\u8fb9": 320, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 320, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 320, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 320, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 320, "\u952e": 320, "\u503c": 320, "\u5bf9": 320, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 320, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 320, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 320, "\u5b83\u5305\u542b": 320, "\u7528\u6237": 320, "\u5546\u54c1": 320, "\u5730\u5740": 320, "\u4e09\u7c7b\u70b9": 320, "\u5b83\u4eec\u901a\u8fc7": 320, "\u8d2d\u4e70": 320, "\u9012\u9001": 320, "belongs_to": 320, "\u5c5e\u4e8e": 320, "home_of": 320, "\u5bb6\u5ead\u5730\u5740": 320, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 320, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 320, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 320, "\u8def\u5f841": 320, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 320, "\u4e70\u5bb6": 320, "tom": 320, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 320, "jack": 320, "\u63d0\u4f9b\u7684\u6807\u4ef7": 320, "\u7684\u5546\u54c1": 320, "gift": 320, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 320, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 320, "\u904d\u5386\u5668": 320, "\u6807\u8bc6": 320, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 320, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 320, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 320, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 320, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 320, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 320, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 320, "\u8fb9\u6216\u5c5e\u6027": 320, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 320, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 320, "\u5d4c\u5957\u904d\u5386": 320, "\u7684\u652f\u6301": 320, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 320, "\u5b50": 320, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 320, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 320, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 320, "\u8fc7\u6ee4": 320, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 320, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 320, "\u800c": 320, "\u6620\u5c04": 320, "\u6392\u5e8f": 320, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 320, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 320, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 320, "\u5728gremlin\u4e2d\u901a\u8fc7": 320, "\u5faa\u73af": 320, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 320, "\u7ec8\u6b62\u6761\u4ef6": 320, "\u8868\u8fbe": 320, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 320, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 320, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 320, "\u6761\u4ef6\u7ec8\u6b62": 320, "\u64cd\u4f5c\u7c7b\u4f3c": 320, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 320, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 320, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 320, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 320, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 320, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 320, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 320, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 320, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 320, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 320, "\u7684\u6709\u5411\u73af\u8def": 320, "\u9996\u5148": [320, 322], "\u8f93\u5165\u56fe\u64cd\u4f5c": 320, "\u5305\u542b\u4e00\u4e2a": 320, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 320, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 320, "\u70b9": 320, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 320, "\u7684\u70b9": 320, "\u7d27\u968f\u5176\u540e\u7684": 320, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 320, "\u4fee\u9970\u7b26": 320, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 320, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 320, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 320, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 320, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 320, "\u67e5\u8be2\u6cbf\u7740": 320, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 320, "\u6b21": 320, "\u8f93\u51fahops\u5728": 320, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 320, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 320, "\u901a\u8fc7\u5728": 320, "\u5185\u914d\u7f6e": 320, "\u9009\u9879\u5b9e\u73b0": 320, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 320, "\u6307\u4ee3": 320, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 320, "\u7684\u73af": 320, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 320, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 320, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 320, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 320, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 320, "\u5982\u679c\u6709\u7684\u8bdd": 320, "gie\u652f\u6301apach": 320, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 320, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 320, "3\u548c3": 320, "4\u7248\u672c\u517c\u5bb9\u7684": 320, "\u670d\u52a1\u63a5\u53e3": 320, "\u9664\u6b64\u4e4b\u5916": 320, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 320, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 320, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 320, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 320, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 320, "\u76ee\u524d\u7684": 320, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 320, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 320, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 320, "\u4e0d\u53ef\u4fee\u6539": 320, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 320, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 320, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 320, "\u7ea6\u675f": 320, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 320, "\u5305\u62ec\u70b9": 320, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 320, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 320, "\u4e3b\u952e\u7ea6\u675f": 320, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 320, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 320, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 320, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 320, "id\u7f16\u7801\u4e86\u7c7b\u578b": 320, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 320, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 320, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 320, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 320, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 320, "\u56fe\u4fee\u6539\u64cd\u4f5c": 320, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 320, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 320, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 320, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 320, "\u4e8b\u52a1": 320, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 320, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 320, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 320, "\u548c\u793a\u4f8b\u7528\u6cd5": 320, "\u8f93\u5165\u56fe": 320, "id1": 320, "id2": 320, "labelnam": 320, "labelname1": 320, "labelname2": 320, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 320, "\u8bed\u6cd5\u7cd6": 320, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 320, "\u4ee3\u8868": 320, "\u8282\u70b9\u7684age\u5c5e\u6027": 320, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 320, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 320, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 320, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 320, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 320, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 320, "dedup": 320, "substr": 320, "contant": 320, "aaa": 320, "otherv": 320, "flatmap": 320, "\u591a\u91cd\u6620\u5c04": 320, "bothv": 320, "\u627e\u5230\u6240\u6709\u4ece": 320, "\u5f00\u59cb\u901a\u8fc7": 320, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 320, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 320, "\u70b9\u4e0d\u91cd\u590d": 320, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 320, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 320, "\u70b9\u53ef\u91cd\u590d": 320, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 320, "\u805a\u5408": 320, "groupbi": 320, "groupby\u591a\u4e2akei": 320, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 320, "groupby\u591a\u4e2avalu": 320, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 320, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 320, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 320, "\u4f1a\u9010\u6b65\u652f\u6301": 320, "\u53ef\u4ee5\u901a\u8fc7path": 320, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 320, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 320, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 320, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 320, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 320, "\u8ba1\u7b97\u5b50\u56fe": 320, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 320, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 320, "cap": 320, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 320, "\u4f8b\u5982pagerank\u548cshortestpath": 320, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 320, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 321, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 321, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 321, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 321, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 321, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 321, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 321, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 321, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 321, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 321, "\u57fa\u4e8egl": 321, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 321, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 321, "\u4f8b\u5982\u56fe\u91c7\u6837": 321, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 321, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 321, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 321, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 321, "\u539f\u59cb\u7684gcn": 321, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 321, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 321, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 321, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 321, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 321, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 321, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 321, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 321, "graphsaint\u7b49": 321, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 321, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 321, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 321, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 321, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 321, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 321, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 321, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 321, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 321, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 321, "\u5305\u62ectensorflow": 321, "\u548cpytorch": 321, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 321, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 321, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 321, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 321, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 321, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 321, "\u79f0\u4e3a": 321, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 321, "\u611f\u53d7\u91ce": 321, "\u591a\u8df3\u90bb\u5c45": 321, "\u7ec4\u6210": 321, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 321, "\u6211\u4eec\u5b9e\u73b0": 321, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 321, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 321, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 321, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 321, "\u7136\u540e\u7528": 321, "\u7ba1\u7406": 321, "\u5230": 321, "\u7684\u8f6c\u6362": 321, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 321, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 321, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 321, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 321, "\u5411\u91cf": 321, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 321, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 321, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 321, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 321, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 321, "\u56fe\u7f16\u7801\u5668": 321, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 321, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 321, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 321, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 321, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 321, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 321, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 321, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 321, "\u5982tensorflow": 321, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 321, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 321, "\u901a\u5e38\u6765\u8bf4": 321, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 321, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 321, "\u7528\u56fe\u91c7\u6837": 321, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 321, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 321, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 321, "positve_sampl": 321, "\u4ee5\u8fd9\u4e9b": 321, "\u4e3a\u8f93\u5165\u4ea7\u751f": 321, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 321, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 321, "\u4ea7\u751f\u8d1f\u6837\u672c": 321, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 321, "\u6211\u4eec\u62bd\u8c61\u4e86": 321, "\u6765\u91c7\u6837\u90bb\u5c45": 321, "\u6700\u540e\u5c06": 321, "\u4ea7\u751f\u7684": 321, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 321, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 321, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 321, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 321, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 321, "\u624d\u80fd\u4f7f\u7528": 321, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 321, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 321, "\u5b9a\u4e49\u7f16\u7801\u5668": 321, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 321, "\u5f97\u5230": 321, "\u540e": 321, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 321, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 321, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 321, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 321, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 321, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 321, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 321, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 321, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 321, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 321, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 321, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 321, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 321, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 321, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 321, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 321, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 321, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 321, "\u6765": 321, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 321, "\u9700\u8981\u7684\u683c\u5f0f": 321, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 321, "\u5206\u522b\u662f\u70b9\u8868": 321, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 321, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 321, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 321, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 321, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 321, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 321, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 321, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 321, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 321, "\u56de\u4e00\u8df3\u90bb\u5c45": 321, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 321, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 321, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 321, "\u56e0\u6b64\u9009\u62e9": 321, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 321, "\u6210": 321, "\u8fd4\u56de": 321, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 321, "\u6765\u628a": 321, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 321, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 321, "\u4f60\u53ef\u4ee5\u4ece": 321, "\u83b7\u53d6\u548c\u524d\u9762": 321, "\u5bf9\u5e94\u7684": 321, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 321, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 321, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 321, "\u56e0\u4e3a": 321, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 321, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 321, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 321, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 321, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 321, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 321, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 321, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 321, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 321, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 321, "\u7136\u540e\u5728": 321, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 321, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 321, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 321, "\u6765\u8fdb\u884c\u8bad\u7ec3": 321, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 321, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 321, "\u76ee\u5f55": 321, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 321, "gat\u7b49\u6a21\u578b": 321, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 321, "\u5c5e\u6027\u56fe": 322, "\u56fe\u4e0a\u7684\u70b9": 322, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 322, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 322, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 322, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 322, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 322, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 322, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 322, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 322, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 322, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 322, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 322, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 322, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 322, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 322, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 322, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 322, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 322, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 322, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 322, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 322, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 322, "\u7684\u672c\u5730\u8def\u5f84": 322, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 322, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 322, "\u662f\u6211\u4eec\u901a\u8fc7": 322, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 322, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 322, "\u4f60\u53ef\u4ee5\u5728": 322, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 322, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 322, "\u7136\u800c": 322, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 322, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 322, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 322, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 322, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 322, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 322, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 322, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 322, "\u6211\u4eec\u5c06\u4f7f\u7528": 322, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 322, "\u627e\u5230\u6e90\u6570\u636e": 322, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 322, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 322, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 322, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 322, "\u4ee3\u8868\u6570\u636e\u6e90": 322, "\u6307\u793a": 322, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 322, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 322, "\u6570\u7ec4\u7b49": 322, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 322, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 322, "\u8f7d\u5165\u6570\u636e": 322, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 322, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 322, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 322, "\u9ed8\u8ba4\u4e3a": 322, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 322, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 322, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 322, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 322, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 322, "\u4e3e\u4e2a\u4f8b\u5b50": 322, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 322, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 322, "\u53ef\u9009\u9879": 322, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 322, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 322, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 322, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 322, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 322, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 322, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 322, "\u6bd4\u5982\u8bf4": 322, "\u5217\u7684\u5217\u540d": 322, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 322, "\u6216\u76ee\u6807\u70b9": 322, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 322, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 322, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 322, "\u4ee3\u8868\u7b2c\u51e0\u5217": 322, "\u4ece0\u5f00\u59cb": 322, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 322, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 322, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 322, "\u7c7b\u4f3c": 322, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 322, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 322, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 322, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 322, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 322, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 322, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 322, "\u8fb9\u7684\u6807\u7b7e\u540d": 322, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 322, "\u4e00\u5217\u5c5e\u6027": 322, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 322, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 322, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 322, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 322, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 322, "\u4e3e\u4f8b\u6765\u8bf4": 322, "person_likes_comment_0_0": 322, "\u8d77\u70b9\u7684": 322, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 322, "\u5217\u540d": 322, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 322, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 322, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 322, "\u4e00\u5217\u4e3a\u8d77\u70b9": 322, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 322, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 322, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 322, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 322, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 322, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 322, "\u5982\u679c\u7528\u6237\u7684": 322, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 322, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 322, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 322, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 322, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 322, "\u6709\u4e00\u4e2a\u540d\u4e3a": 322, "\u7684\u8fb9\u6807\u7b7e": 322, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 322, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 322, "person_likes_post_0_0": 322, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 322, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 322, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 322, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 322, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 322, "\u50cf\u8fd9\u6837": 322, "post_0_0": 322, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 322, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 322, "\u5728\u8fd9\u91cc": 322, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 322, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 322, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 322, "\u7b49\u7c7b\u578b": 322, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 322, "\u5206\u522b\u4e3a": 322, "\u53ef\u4ee5\u4e3a": 322, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 322, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 322, "\u5f53id\u4e0d\u80fd\u7528": 322, "\u8868\u793a\u65f6": 322, "\u624d\u5e94\u8be5\u4f7f\u7528": 322, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 322, "\u5efa\u8bae\u4f7f\u7528": 322, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 322, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 322, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 322, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 322, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 322, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 322, "\u5c5e\u6027\u56fe\u7684": 322, "\u4f8b\u5b50": 322, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 322, "\u7684\u7c7b": 322, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 322, "\u652f\u6301\u4ece": 322, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 322, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 322, "\u9664\u4e86": 322, "\u5916": 322, "\u5176\u4ed6\u5c5e\u6027": 322, "id\u5217": 322, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 322, "datasourc": 322, "col_0": 322, "col_1": 322, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 322, "\u6211\u4eec\u5c06\u5176\u4ee5": 322, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 322, "array_v": 322, "col": 322, "array_": 322, "\u5f53": 322, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 322, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 322, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 322, "uri": 322, "\u6807\u51c6": 322, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 322, "\u5c06\u4f1a\u89e3\u6790": 322, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 322, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 322, "\u672c\u5730": 322, "\u6570\u636e\u7531": 322, "\u8d1f\u8d23\u8f7d\u5165": 322, "fsspec": 322, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 322, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 322, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 322, "\u4e4b\u4e8e": 322, "\u6216\u8005\u662f": 322, "ds1": 322, "datafil": 322, "ds2": 322, "graphscope_bucket": 322, "ds3": 322, "extra_conf": 322, "conf1": 322, "d34": 322, "client_kwarg": 322, "region_nam": 322, "east": 322, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 322, "\u6bd4\u5982\u53c2\u7167": 322, "ossf": 322, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 322, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 322, "abstractfilesystem": 322, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 322, "abstractbufferedfil": 322, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 322, "_upload_chunk": 322, "_initiate_upload": 322, "_fetch_rang": 322, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 322, "write\u529f\u80fd": 322, "\u6700\u540e\u901a\u8fc7": 322, "register_implement": 322, "protocol_nam": 322, "protocol_file_system": 322, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 322, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 323, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 323, "\u5982\u4f55\u8f7d\u56fe": 323, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 323, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 323, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 323, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 323, "\u6211\u4eec\u7528jupyt": 323, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 323, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 323, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 323, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 323, "lab": 323, "\u73af\u5883": 323, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 323, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 323}, "objects": {"": [[76, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [76, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [76, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [76, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [76, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [76, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [76, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [76, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [76, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [76, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [76, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [76, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [76, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [76, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [76, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [76, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [76, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [76, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [76, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [76, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [76, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [76, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [76, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [76, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [76, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [76, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [76, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [76, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [76, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [76, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [76, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [76, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [76, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [76, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [76, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [76, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [76, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [76, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [76, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [76, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [76, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [76, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [76, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [76, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [76, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [76, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [76, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [76, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [76, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [76, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [76, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [76, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [76, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [76, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [76, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [76, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [76, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [76, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [76, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [76, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [76, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [76, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [76, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [76, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [76, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [76, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [76, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [76, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [76, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [76, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [76, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [76, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [76, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [76, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [76, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [76, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [76, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [76, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [76, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [76, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [76, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [76, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [76, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [76, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [76, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [76, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [76, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [76, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [76, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [76, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [76, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [76, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [76, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [76, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [76, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [76, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [76, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [76, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [76, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [76, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [76, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [76, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [76, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [76, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [76, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [76, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [76, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [76, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [76, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [76, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [76, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [76, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [76, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [76, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [76, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [76, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [76, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [76, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [76, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [76, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [76, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [76, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [76, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [76, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [76, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [76, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [76, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [76, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [76, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [76, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [76, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [76, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [76, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [76, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [76, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [76, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [76, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [76, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [76, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [76, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [76, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [76, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [76, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [76, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [76, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [76, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [76, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [76, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [76, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [76, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [76, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [76, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [76, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [76, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [76, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [76, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [76, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [76, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [76, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [76, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [76, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [76, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [76, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [76, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [76, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [76, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [76, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [76, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [76, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [76, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [76, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [76, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [76, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [76, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [76, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [76, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [76, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [76, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [76, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [76, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [76, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [76, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [76, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [76, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [76, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [76, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [76, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [76, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [76, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [76, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [76, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [76, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [76, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [76, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [76, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [76, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [76, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [76, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [76, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [76, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [76, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [76, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [76, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [76, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [76, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [76, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [76, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [76, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [76, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [76, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [76, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [76, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [76, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [76, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [76, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [76, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [76, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [76, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [76, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [76, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [76, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [76, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [76, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [76, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [76, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [76, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [76, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [76, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [76, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [76, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [76, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [76, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [76, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [76, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [76, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [76, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [76, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [76, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [76, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [76, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [76, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [76, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [76, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [76, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [76, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [76, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [76, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [76, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [76, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [76, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [76, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [76, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [76, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [76, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [76, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [76, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [76, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [76, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [76, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [76, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [76, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [76, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [76, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [76, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [76, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [76, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [76, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [76, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [76, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [76, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [76, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [76, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [76, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [76, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [76, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [76, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [76, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [76, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [76, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [76, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [76, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [76, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [76, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [76, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [76, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [76, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [76, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [76, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [76, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [76, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [76, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [76, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [76, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [76, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [76, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [76, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [76, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [76, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [76, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [76, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [76, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [76, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [76, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [76, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [76, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [76, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [76, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [76, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [76, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [76, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [76, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [76, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [76, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [76, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [76, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [76, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [76, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [76, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [76, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [76, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [76, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [76, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [76, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [76, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [76, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [76, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [76, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [76, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [76, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [76, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [76, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [76, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [76, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [76, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [76, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [76, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [76, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [76, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [76, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [76, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [76, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [76, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [76, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [76, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [76, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [76, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [76, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [76, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [76, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [76, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [76, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [76, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [76, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [76, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [76, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [76, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [76, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [76, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id0", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id1", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id2", "voterank"]], "graphscope": [[296, 9, 1, "", "Session"], [83, 12, 1, "", "Vertex"], [77, 8, 1, "", "attribute_assortativity_coefficient"], [77, 8, 1, "", "average_degree_connectivity"], [77, 8, 1, "", "average_shortest_path_length"], [77, 8, 1, "", "avg_clustering"], [77, 8, 1, "", "bfs"], [77, 8, 1, "", "cdlp"], [77, 8, 1, "", "clustering"], [84, 8, 1, "", "declare"], [77, 8, 1, "", "degree_assortativity_coefficient"], [77, 8, 1, "", "degree_centrality"], [77, 8, 1, "", "eigenvector_centrality"], [129, 8, 1, "", "g"], [130, 8, 1, "", "get_default_session"], [131, 8, 1, "", "get_option"], [132, 8, 1, "", "graphlearn"], [133, 8, 1, "", "gremlin"], [134, 8, 1, "", "has_default_session"], [77, 8, 1, "", "hits"], [77, 8, 1, "", "is_simple_path"], [77, 8, 1, "", "k_core"], [77, 8, 1, "", "k_shell"], [77, 8, 1, "", "katz_centrality"], [77, 8, 1, "", "louvain"], [77, 8, 1, "", "lpa"], [77, 8, 1, "", "lpa_u2i"], [77, 8, 1, "", "numeric_assortativity_coefficient"], [77, 8, 1, "", "pagerank"], [77, 8, 1, "", "pagerank_nx"], [135, 14, 1, "", "session"], [136, 8, 1, "", "set_option"], [77, 8, 1, "", "sssp"], [77, 8, 1, "", "triangles"], [77, 8, 1, "", "voterank"], [77, 8, 1, "", "wcc"]], "graphscope.Session": [[296, 10, 1, "", "__enter__"], [296, 10, 1, "", "__exit__"], [296, 10, 1, "", "__init__"], [296, 10, 1, "", "add_lib"], [296, 10, 1, "", "as_default"], [296, 10, 1, "", "close"], [296, 10, 1, "", "connected"], [296, 11, 1, "", "engine_config"], [296, 10, 1, "", "get_config"], [296, 10, 1, "", "get_vineyard_object_mapping_table"], [296, 10, 1, "", "graphlearn"], [296, 10, 1, "", "gremlin"], [296, 11, 1, "", "info"], [296, 10, 1, "", "learning"], [296, 10, 1, "", "load_from"], [296, 10, 1, "", "load_from_gar"], [296, 10, 1, "", "restore_from_pvc"], [296, 10, 1, "", "run_fetches"], [296, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[77, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[77, 10, 1, "", "__call__"], [77, 10, 1, "", "__init__"], [77, 10, 1, "", "is_compatible"], [77, 10, 1, "", "signature"]], "graphscope.framework.app": [[77, 9, 1, "", "App"], [77, 9, 1, "", "AppAssets"], [77, 9, 1, "", "AppDAGNode"], [85, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[77, 10, 1, "", "__del__"], [77, 10, 1, "", "__init__"], [77, 11, 1, "", "key"], [77, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[77, 10, 1, "", "__init__"], [77, 11, 1, "", "algo"], [77, 11, 1, "", "context_type"], [77, 11, 1, "", "gar"], [77, 10, 1, "", "is_compatible"], [77, 11, 1, "", "signature"], [77, 11, 1, "", "type"]], "graphscope.framework.context": [[78, 9, 1, "", "BaseContextDAGNode"], [78, 9, 1, "", "Context"], [78, 9, 1, "", "DynamicVertexDataContext"], [78, 9, 1, "", "LabeledVertexDataContextDAGNode"], [78, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [78, 9, 1, "", "ResultDAGNode"], [78, 9, 1, "", "TensorContextDAGNode"], [78, 9, 1, "", "VertexDataContextDAGNode"], [78, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[78, 10, 1, "", "to_dataframe"], [78, 10, 1, "", "to_numpy"], [78, 10, 1, "", "to_vineyard_dataframe"], [78, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[293, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[86, 8, 1, "", "add_column"], [87, 8, 1, "", "add_labels_to_graph"], [88, 8, 1, "", "arrow_to_dynamic"], [89, 8, 1, "", "bind_app"], [90, 8, 1, "", "clear_edges"], [91, 8, 1, "", "clear_graph"], [92, 8, 1, "", "context_to_dataframe"], [93, 8, 1, "", "context_to_numpy"], [94, 8, 1, "", "copy_graph"], [95, 8, 1, "", "create_app"], [96, 8, 1, "", "create_graph"], [97, 8, 1, "", "create_graph_view"], [98, 8, 1, "", "create_loader"], [99, 8, 1, "", "create_subgraph"], [100, 8, 1, "", "create_unload_op"], [101, 8, 1, "", "dynamic_to_arrow"], [102, 8, 1, "", "fetch_gremlin_result"], [103, 8, 1, "", "get_context_data"], [104, 8, 1, "", "graph_to_dataframe"], [105, 8, 1, "", "graph_to_numpy"], [106, 8, 1, "", "gremlin_query"], [107, 8, 1, "", "gremlin_to_subgraph"], [108, 8, 1, "", "modify_edges"], [109, 8, 1, "", "modify_vertices"], [110, 8, 1, "", "output"], [111, 8, 1, "", "project_arrow_property_graph"], [112, 8, 1, "", "project_to_simple"], [113, 8, 1, "", "report_graph"], [114, 8, 1, "", "run_app"], [115, 8, 1, "", "to_data_sink"], [116, 8, 1, "", "to_directed"], [117, 8, 1, "", "to_undirected"], [118, 8, 1, "", "to_vineyard_dataframe"], [119, 8, 1, "", "to_vineyard_tensor"], [120, 8, 1, "", "unload_app"], [121, 8, 1, "", "unload_context"], [122, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[151, 9, 1, "", "Graph"], [151, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[151, 10, 1, "", "__init__"], [151, 10, 1, "", "archive"], [151, 10, 1, "", "detach"], [151, 11, 1, "", "key"], [151, 10, 1, "", "load_from"], [151, 10, 1, "", "loaded"], [151, 10, 1, "", "save_to"], [151, 11, 1, "", "schema"], [151, 11, 1, "", "schema_path"], [151, 11, 1, "", "session_id"], [151, 10, 1, "", "to_dataframe"], [151, 10, 1, "", "to_directed"], [151, 10, 1, "", "to_numpy"], [151, 10, 1, "", "to_undirected"], [151, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[151, 10, 1, "", "__init__"], [151, 10, 1, "", "add_column"], [151, 10, 1, "", "add_edges"], [151, 10, 1, "", "add_vertices"], [151, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[151, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[151, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[151, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[293, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[123, 10, 1, "", "__init__"], [124, 10, 1, "", "as_op_def"], [125, 10, 1, "", "eval"], [126, 11, 1, "", "evaluated"], [127, 11, 1, "", "key"], [128, 11, 1, "", "signature"]], "graphscope.interactive.query": [[152, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[152, 10, 1, "", "__init__"], [152, 10, 1, "", "close"], [152, 10, 1, "", "execute"], [152, 11, 1, "", "graph_url"], [152, 11, 1, "", "object_id"], [152, 11, 1, "", "session"], [152, 11, 1, "", "session_id"], [152, 10, 1, "", "subgraph"], [152, 10, 1, "", "submit"], [152, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[153, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[153, 10, 1, "", "E"], [153, 10, 1, "", "V"], [153, 10, 1, "", "__init__"], [153, 10, 1, "", "get_handle"]], "graphscope.nx": [[289, 9, 1, "", "DiGraph"], [289, 9, 1, "", "Graph"], [291, 8, 1, "", "read_adjlist"], [291, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[289, 10, 1, "", "__contains__"], [289, 10, 1, "", "__getitem__"], [289, 10, 1, "", "__init__"], [289, 10, 1, "", "__iter__"], [289, 10, 1, "", "__len__"], [289, 10, 1, "", "add_edge"], [289, 10, 1, "", "add_edges_from"], [289, 10, 1, "", "add_node"], [289, 10, 1, "", "add_nodes_from"], [289, 10, 1, "", "add_weighted_edges_from"], [289, 11, 1, "", "adj"], [289, 10, 1, "", "adjacency"], [289, 14, 1, "", "adjlist_inner_dict_factory"], [289, 14, 1, "", "adjlist_outer_dict_factory"], [289, 10, 1, "", "clear"], [289, 10, 1, "", "clear_edges"], [289, 10, 1, "", "copy"], [289, 11, 1, "", "degree"], [289, 14, 1, "", "edge_attr_dict_factory"], [289, 10, 1, "", "edge_subgraph"], [289, 11, 1, "", "edges"], [289, 10, 1, "", "get_edge_data"], [289, 14, 1, "", "graph_attr_dict_factory"], [289, 14, 1, "", "graph_cache_factory"], [289, 11, 1, "", "graph_type"], [289, 10, 1, "", "has_edge"], [289, 10, 1, "", "has_node"], [289, 10, 1, "", "has_predecessor"], [289, 10, 1, "", "has_successor"], [289, 11, 1, "", "in_degree"], [289, 11, 1, "", "in_edges"], [289, 10, 1, "", "is_directed"], [289, 10, 1, "", "is_multigraph"], [289, 11, 1, "", "key"], [289, 11, 1, "", "name"], [289, 10, 1, "", "nbunch_iter"], [289, 10, 1, "", "neighbors"], [289, 14, 1, "", "node_attr_dict_factory"], [289, 14, 1, "", "node_dict_factory"], [289, 11, 1, "", "nodes"], [289, 10, 1, "", "number_of_edges"], [289, 10, 1, "", "number_of_nodes"], [289, 11, 1, "", "op"], [289, 10, 1, "", "order"], [289, 11, 1, "", "out_degree"], [289, 11, 1, "", "out_edges"], [289, 11, 1, "", "pred"], [289, 10, 1, "", "predecessors"], [289, 10, 1, "", "remove_edge"], [289, 10, 1, "", "remove_edges_from"], [289, 10, 1, "", "remove_node"], [289, 10, 1, "", "remove_nodes_from"], [289, 10, 1, "", "reverse"], [289, 11, 1, "", "schema"], [289, 11, 1, "", "session"], [289, 11, 1, "", "session_id"], [289, 10, 1, "", "set_edge_data"], [289, 10, 1, "", "set_node_data"], [289, 11, 1, "", "signature"], [289, 10, 1, "", "size"], [289, 10, 1, "", "subgraph"], [289, 11, 1, "", "succ"], [289, 10, 1, "", "successors"], [289, 10, 1, "", "to_directed"], [289, 10, 1, "", "to_undirected"], [289, 10, 1, "", "to_undirected_class"], [289, 10, 1, "", "update"]], "graphscope.nx.Graph": [[289, 10, 1, "", "__contains__"], [289, 10, 1, "", "__getitem__"], [292, 8, 1, "", "__init__"], [289, 10, 1, "", "__iter__"], [289, 10, 1, "", "__len__"], [292, 8, 1, "", "_convert_arrow_to_dynamic"], [289, 10, 1, "", "add_edge"], [289, 10, 1, "", "add_edges_from"], [289, 10, 1, "", "add_node"], [289, 10, 1, "", "add_nodes_from"], [289, 10, 1, "", "add_weighted_edges_from"], [289, 11, 1, "", "adj"], [289, 10, 1, "", "adjacency"], [289, 14, 1, "", "adjlist_inner_dict_factory"], [289, 14, 1, "", "adjlist_outer_dict_factory"], [289, 10, 1, "", "clear"], [289, 10, 1, "", "clear_edges"], [289, 10, 1, "", "copy"], [289, 11, 1, "", "degree"], [289, 14, 1, "", "edge_attr_dict_factory"], [289, 10, 1, "", "edge_subgraph"], [289, 11, 1, "", "edges"], [289, 10, 1, "", "get_edge_data"], [289, 14, 1, "", "graph_attr_dict_factory"], [289, 14, 1, "", "graph_cache_factory"], [289, 11, 1, "", "graph_type"], [289, 10, 1, "", "has_edge"], [289, 10, 1, "", "has_node"], [289, 10, 1, "", "is_directed"], [289, 10, 1, "", "is_multigraph"], [289, 11, 1, "", "key"], [289, 11, 1, "", "name"], [289, 10, 1, "", "nbunch_iter"], [289, 10, 1, "", "neighbors"], [289, 14, 1, "", "node_attr_dict_factory"], [289, 14, 1, "", "node_dict_factory"], [289, 11, 1, "", "nodes"], [289, 10, 1, "", "number_of_edges"], [289, 10, 1, "", "number_of_nodes"], [289, 11, 1, "", "op"], [289, 10, 1, "", "order"], [289, 10, 1, "", "remove_edge"], [289, 10, 1, "", "remove_edges_from"], [289, 10, 1, "", "remove_node"], [289, 10, 1, "", "remove_nodes_from"], [289, 11, 1, "", "schema"], [289, 11, 1, "", "session"], [289, 11, 1, "", "session_id"], [289, 10, 1, "", "set_edge_data"], [289, 10, 1, "", "set_node_data"], [289, 11, 1, "", "signature"], [289, 10, 1, "", "size"], [289, 10, 1, "", "subgraph"], [289, 10, 1, "", "to_directed"], [289, 10, 1, "", "to_undirected"], [289, 10, 1, "", "to_undirected_class"], [289, 10, 1, "", "update"]], "graphscope.nx.builtin": [[154, 8, 1, "", "average_clustering"], [154, 8, 1, "", "average_shortest_path_length"], [154, 8, 1, "", "bfs_edges"], [154, 8, 1, "", "clustering"], [154, 8, 1, "", "degree_centrality"], [154, 8, 1, "", "eigenvector_centrality"], [154, 8, 1, "", "has_path"], [154, 8, 1, "", "hits"], [154, 8, 1, "", "in_degree_centrality"], [154, 8, 1, "", "k_core"], [154, 8, 1, "", "katz_centrality"], [154, 8, 1, "", "out_degree_centrality"], [154, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[155, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[156, 8, 1, "", "add_cycle"], [157, 8, 1, "", "add_path"], [158, 8, 1, "", "add_star"], [159, 8, 1, "", "all_neighbors"], [160, 8, 1, "", "common_neighbors"], [161, 8, 1, "", "create_empty_copy"], [162, 8, 1, "", "degree"], [163, 8, 1, "", "degree_histogram"], [164, 8, 1, "", "density"], [165, 8, 1, "", "edge_subgraph"], [166, 8, 1, "", "edges"], [167, 8, 1, "", "freeze"], [168, 8, 1, "", "induced_subgraph"], [169, 8, 1, "", "info"], [170, 8, 1, "", "is_directed"], [171, 8, 1, "", "is_empty"], [172, 8, 1, "", "is_frozen"], [173, 8, 1, "", "is_negatively_weighted"], [174, 8, 1, "", "is_weighted"], [175, 8, 1, "", "neighbors"], [176, 8, 1, "", "nodes"], [177, 8, 1, "", "nodes_with_selfloops"], [178, 8, 1, "", "non_edges"], [179, 8, 1, "", "non_neighbors"], [180, 8, 1, "", "number_of_edges"], [181, 8, 1, "", "number_of_nodes"], [182, 8, 1, "", "number_of_selfloops"], [183, 8, 1, "", "selfloop_edges"], [184, 8, 1, "", "subgraph"], [185, 8, 1, "", "to_directed"], [186, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[288, 13, 0, "-", "atlas"], [288, 13, 0, "-", "classic"], [288, 13, 0, "-", "community"], [288, 13, 0, "-", "degree_seq"], [288, 13, 0, "-", "directed"], [288, 13, 0, "-", "duplication"], [288, 13, 0, "-", "ego"], [288, 13, 0, "-", "expanders"], [288, 13, 0, "-", "geometric"], [288, 13, 0, "-", "harary_graph"], [288, 13, 0, "-", "intersection"], [288, 13, 0, "-", "joint_degree_seq"], [288, 13, 0, "-", "mycielski"], [288, 13, 0, "-", "nonisomorphic_trees"], [288, 13, 0, "-", "small"], [288, 13, 0, "-", "social"], [288, 13, 0, "-", "spectral_graph_forge"], [288, 13, 0, "-", "sudoku"], [288, 13, 0, "-", "trees"], [288, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[187, 8, 1, "", "graph_atlas"], [188, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[189, 8, 1, "", "balanced_tree"], [190, 8, 1, "", "barbell_graph"], [191, 8, 1, "", "binomial_tree"], [192, 8, 1, "", "circulant_graph"], [193, 8, 1, "", "circular_ladder_graph"], [194, 8, 1, "", "complete_graph"], [195, 8, 1, "", "complete_multipartite_graph"], [196, 8, 1, "", "cycle_graph"], [197, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [198, 8, 1, "", "empty_graph"], [199, 8, 1, "", "full_rary_tree"], [200, 8, 1, "", "ladder_graph"], [201, 8, 1, "", "lollipop_graph"], [202, 8, 1, "", "null_graph"], [203, 8, 1, "", "path_graph"], [204, 8, 1, "", "star_graph"], [205, 8, 1, "", "trivial_graph"], [206, 8, 1, "", "turan_graph"], [207, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[208, 8, 1, "", "LFR_benchmark_graph"], [209, 8, 1, "", "caveman_graph"], [210, 8, 1, "", "connected_caveman_graph"], [211, 8, 1, "", "gaussian_random_partition_graph"], [212, 8, 1, "", "planted_partition_graph"], [213, 8, 1, "", "random_partition_graph"], [214, 8, 1, "", "relaxed_caveman_graph"], [215, 8, 1, "", "ring_of_cliques"], [216, 8, 1, "", "stochastic_block_model"], [217, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[218, 8, 1, "", "configuration_model"], [219, 8, 1, "", "degree_sequence_tree"], [220, 8, 1, "", "directed_configuration_model"], [221, 8, 1, "", "directed_havel_hakimi_graph"], [222, 8, 1, "", "expected_degree_graph"], [223, 8, 1, "", "havel_hakimi_graph"], [224, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[225, 8, 1, "", "gn_graph"], [226, 8, 1, "", "gnc_graph"], [227, 8, 1, "", "gnr_graph"], [228, 8, 1, "", "random_k_out_graph"], [229, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[230, 8, 1, "", "duplication_divergence_graph"], [231, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[232, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[233, 8, 1, "", "chordal_cycle_graph"], [234, 8, 1, "", "margulis_gabber_galil_graph"], [235, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[236, 8, 1, "", "geographical_threshold_graph"], [237, 8, 1, "", "random_geometric_graph"], [238, 8, 1, "", "soft_random_geometric_graph"], [239, 8, 1, "", "thresholded_random_geometric_graph"], [240, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[241, 8, 1, "", "hkn_harary_graph"], [242, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[243, 8, 1, "", "general_random_intersection_graph"], [244, 8, 1, "", "k_random_intersection_graph"], [245, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[246, 8, 1, "", "directed_joint_degree_graph"], [247, 8, 1, "", "is_valid_directed_joint_degree"], [248, 8, 1, "", "is_valid_joint_degree"], [249, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[250, 8, 1, "", "mycielski_graph"], [251, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[252, 8, 1, "", "nonisomorphic_trees"], [253, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[254, 8, 1, "", "LCF_graph"], [255, 8, 1, "", "bull_graph"], [256, 8, 1, "", "chvatal_graph"], [257, 8, 1, "", "cubical_graph"], [258, 8, 1, "", "desargues_graph"], [259, 8, 1, "", "diamond_graph"], [260, 8, 1, "", "dodecahedral_graph"], [261, 8, 1, "", "frucht_graph"], [262, 8, 1, "", "heawood_graph"], [263, 8, 1, "", "house_graph"], [264, 8, 1, "", "house_x_graph"], [265, 8, 1, "", "icosahedral_graph"], [266, 8, 1, "", "krackhardt_kite_graph"], [267, 8, 1, "", "make_small_graph"], [268, 8, 1, "", "moebius_kantor_graph"], [269, 8, 1, "", "octahedral_graph"], [270, 8, 1, "", "pappus_graph"], [271, 8, 1, "", "petersen_graph"], [272, 8, 1, "", "sedgewick_maze_graph"], [273, 8, 1, "", "tetrahedral_graph"], [274, 8, 1, "", "truncated_cube_graph"], [275, 8, 1, "", "truncated_tetrahedron_graph"], [276, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[277, 8, 1, "", "davis_southern_women_graph"], [278, 8, 1, "", "florentine_families_graph"], [279, 8, 1, "", "karate_club_graph"], [280, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[281, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[282, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[283, 8, 1, "", "prefix_tree"], [284, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[285, 8, 1, "", "triad_graph"]], "networkx.generators": [[288, 13, 0, "-", "internet_as_graphs"], [288, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[286, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[287, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 58, 149, 302, 304], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 33, 58, 137, 154, 304, 306], "all": [0, 30, 31, 35, 39], "pair": 0, "shortest": 0, "path": [0, 51, 54, 56], "length": 0, "attribut": [0, 20, 138, 155], "assort": 0, "averag": 0, "degre": [0, 162, 288], "connect": [0, 28, 29, 55, 302], "between": [0, 51, 298], "central": 0, "breadth": 0, "first": [0, 48], "search": 0, "close": 0, "cluster": [0, 27, 29, 32, 39, 48, 64], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": [0, 45], "katz": 0, "k": 0, "core": 0, "shell": 0, "label": [0, 54, 56, 138, 301, 322], "propag": 0, "pagerank": 0, "sampl": [0, 62, 71, 137, 141, 143, 146, 149], "singl": [0, 44], "sourc": [0, 30, 31, 54, 81, 138, 144, 147, 148], "voterank": 0, "custom": [1, 23, 27, 302], "aggreg": [1, 51, 54, 56, 59], "deploy": [2, 27, 37, 47, 48], "gae": [2, 33, 68, 306, 310], "prerequisit": [2, 16, 27, 28, 29, 31, 32, 48, 302], "onli": [2, 36], "python": [2, 15, 18, 30, 34, 35, 55, 58, 75, 294, 302, 306, 314], "sdk": [2, 16, 33, 79], "helm": [2, 28], "execut": [2, 33, 66], "graph": [2, 9, 11, 19, 20, 29, 32, 33, 43, 44, 45, 47, 55, 56, 58, 59, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 137, 139, 140, 141, 142, 143, 145, 149, 151, 153, 155, 288, 289, 291, 292, 298, 300, 301, 302, 303, 304, 310], "analyt": [2, 3, 4, 7, 10, 24, 30, 43, 47, 58, 66, 67, 69, 74, 76, 77, 310], "uninstal": [2, 28, 302], "design": [3, 9, 33, 49, 58, 59, 66, 147, 301], "engin": [3, 4, 7, 9, 10, 12, 24, 30, 35, 47, 52, 58, 60, 61, 65, 66, 74, 76, 301, 310], "dev": [4, 31, 35, 39, 50, 60], "test": [4, 35, 36, 39, 50, 60, 144], "setup": [4, 31], "understand": 4, "codebas": 4, "make": [4, 20], "modif": 4, "build": [4, 31, 35, 39, 50, 60, 81, 137, 144, 302, 322], "faq": [5, 51], "program": [6, 12, 14, 33, 44, 147], "model": [6, 12, 14, 15, 16, 17, 24, 33, 59, 64, 65, 68, 71, 137, 145, 149, 301, 302], "flash": [6, 15, 68], "motiv": [6, 9, 49, 66, 301], "The": [6, 19, 49, 300], "overview": [6, 9, 12, 47, 145, 302], "api": [6, 9, 12, 19, 20, 76, 79, 80, 138, 149, 290, 294, 318], "strong": 6, "express": [6, 54, 56], "implement": [6, 15, 17, 36, 147, 301], "architectur": [6, 12, 49, 298], "optim": [6, 51], "get": [7, 36, 42, 52, 61, 67, 144, 299], "start": [7, 42, 50, 52, 56, 61, 67, 149, 299], "instal": [7, 27, 28, 29, 30, 31, 35, 36, 47, 52, 60, 61, 144, 302], "run": [7, 15, 16, 17, 18, 21, 22, 23, 36, 39, 44, 52, 61, 144], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 35, 39, 44, 47, 52, 61, 66, 69, 71, 72, 73, 76, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 298, 300, 310, 314, 318, 319], "local": [7, 31, 35, 37, 39, 50, 52, 54, 60, 61, 65, 301, 302], "what": [7, 14, 51, 52, 61, 69, 71, 72], "": [7, 51, 52, 61, 76], "next": [7, 52, 61, 72], "guid": [8, 34, 35, 53, 63, 302, 306, 307], "exampl": [8, 17, 22, 23, 53, 63, 306, 307], "ingress": [9, 68], "increment": [9, 12], "messag": [9, 59], "driven": 9, "differenti": 9, "flexibl": [9, 33], "memoiz": 9, "distribut": [9, 44, 139, 147], "runtim": [9, 33, 147], "kei": [10, 51, 58, 127], "concept": [10, 301], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 56, 155, 166, 291, 301, 322], "cut": [10, 301], "vertex": [10, 24, 56, 83, 295, 301, 322], "vertic": [10, 56, 322], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 286, 287, 290], "compat": [11, 55], "convert": 11, "nx": [11, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "support": [11, 23, 54, 58], "oper": [11, 20, 56, 123, 124, 125, 126, 127, 128, 147, 293], "storag": [12, 32, 33, 47, 66, 298, 301], "layer": [12, 66], "grape": [12, 17, 68, 81], "ffi": 12, "comput": [12, 44, 47, 66, 301], "applic": [12, 15, 22, 23, 56, 66, 304], "perform": [13, 19, 33, 51, 58, 74], "tune": 13, "pie": [14, 16, 17, 18, 68, 79, 312], "i": [14, 54, 69, 71, 72], "workflow": [14, 58, 298], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 56, 57, 64, 65, 75], "develop": [15, 16, 17, 18, 22, 23, 35, 47, 137, 149, 302, 306], "your": [15, 16, 17, 18, 22, 36, 48, 65, 137, 147, 306], "c": [15, 16, 34, 306], "defin": [15, 16, 45, 65, 147, 298], "A": [15, 47], "function": [15, 18, 77, 79, 137, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 296], "integr": [15, 36, 44, 148], "client": [15, 27, 29, 35, 139], "step": [16, 54, 56, 71], "1": [16, 40, 138, 139, 141, 149], "context": [16, 76, 78, 295], "class": [16, 147, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], "2": [16, 40, 138, 139, 149], "3": [16, 40, 138, 139, 149], "packag": [16, 30, 31, 144], "4": [16, 40, 138, 149], "gar": 16, "file": [16, 27, 30, 148, 300], "github": [16, 17, 25, 36], "templat": [16, 17], "java": [17, 34, 55, 57, 82, 302, 306], "jar": 17, "own": [17, 18, 22, 48, 137, 147], "prepar": [17, 27, 29, 39, 149], "jdk": [17, 81], "submit": [17, 22, 23, 36, 38], "javasdk": 17, "write": 18, "pregel": [18, 24, 79, 312], "us": [18, 20, 27, 31, 48, 51, 58, 72, 144, 147, 149, 295, 298, 302, 303], "math": [18, 312], "h": [18, 312], "netowrkx": [19, 20], "how": [19, 36, 38, 39, 45, 46, 51, 60, 137, 147, 149, 310], "doe": 19, "analysi": [19, 66], "from": [19, 20, 30, 31, 32, 47, 56, 81, 144, 298, 302], "displai": 19, "speed": 19, "up": [19, 27, 29, 32], "over": 19, "creat": [20, 32, 36, 64], "an": [20, 147], "empti": 20, "ad": 20, "node": [20, 59, 64, 65, 155, 176, 302], "examin": 20, "element": 20, "remov": [20, 48], "constructor": 20, "access": 20, "neighbor": [20, 175], "deepcopi": 20, "subgraph": [20, 51, 54, 59, 62, 71, 184], "edge_subgraph": [20, 165], "copi": [20, 30], "direct": [20, 225, 226, 227, 228, 229, 288], "analyz": 20, "object": [20, 77, 78, 139, 151, 293, 296], "transform": [20, 292], "builtin": [21, 77, 154, 293], "giraph": 22, "try": [22, 149], "some": [22, 56], "app": [22, 23, 76, 77, 85], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 48, 302], "along": 23, "spark": 23, "includ": 23, "depend": [23, 30, 31, 144], "toward": 23, "centric": [24, 59], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 36], "discuss": [25, 36], "cloud": [26, 58, 138], "k8": [27, 64, 310], "kubernet": [27, 29, 32, 37, 39, 64, 314, 319], "launch": [27, 65], "default": 27, "paramet": 27, "frequent": [27, 41], "imag": [27, 31, 39, 144, 302], "uri": 27, "specifi": 27, "number": 27, "worker": [27, 76], "provid": 27, "kubeconfig": 27, "other": [27, 48, 148], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 29, 32], "releas": [28, 36], "configur": [28, 48, 150, 302], "offlin": [28, 30, 302], "depoli": 29, "exist": 29, "vineyard": [29, 50, 68, 303], "load": [29, 45, 56, 64, 65, 298, 300, 302, 303], "dataset": [29, 302], "anoth": 29, "session": [29, 64, 135, 296], "environ": [30, 31, 35, 39, 50, 60], "wheel": [30, 144, 314], "download": 30, "destin": 30, "extract": [30, 56], "them": 30, "locat": 30, "basic": [30, 56, 138], "gcc": 30, "g": [30, 129, 309], "third": 30, "parti": 30, "stabl": 31, "version": 31, "preview": 31, "linux": [31, 314], "maco": [31, 314], "persist": [32, 302], "pv": 32, "pvc": 32, "store": [32, 50, 302], "retor": 32, "framework": [33, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "multi": [33, 295], "languag": [33, 143], "high": [33, 58, 66], "librari": [33, 58, 144], "code": [34, 36, 147, 308], "style": [34, 36, 290, 301], "rust": 34, "script": 34, "linter": 34, "checker": 34, "contain": [35, 60], "dep": [35, 60], "target": [35, 39], "compon": 35, "individu": 35, "coordin": 35, "contribut": 36, "conduct": 36, "commun": [36, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 288], "report": [36, 46], "bug": [36, 46], "request": [36, 38], "featur": [36, 58, 300], "improv": 36, "document": 36, "chang": 36, "pre": 36, "commit": 36, "minor": 36, "fix": 36, "fork": 36, "branch": [36, 54], "suit": 36, "format": [36, 138, 300, 302], "right": 36, "keep": 36, "pull": [36, 38], "updat": 36, "merg": 36, "pr": 36, "maintain": 36, "ship": 36, "review": 36, "continu": 36, "debug": 37, "command": [37, 309], "techniqu": 37, "introduct": [40, 54, 141], "arrowfrag": 40, "0": 40, "\u672f\u8bed": 40, "\u8f7d\u56fe": [40, 322], "\u521d\u59cb\u5316partiton": 40, "\u6784\u5efa\u539f\u59cbarrow": 40, "tabl": [40, 47, 138], "shuffl": 40, "vtabl": 40, "\u6784\u5efavertex": 40, "map": [40, 298], "basicarrowvertexmapbuild": 40, "5": [40, 138], "\u6784\u5efafragment\u51c6\u5907": 40, "\u5904\u7406edg": 40, "basicevfragmentload": 40, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 40, "basicarrowfragmentbuild": 40, "6": 40, "fragment\u6784\u5efa": 40, "\u8bbf\u95eefragment": 40, "\u8bbf\u95ee\u9876\u70b9": 40, "\u8bbf\u95ee\u5185\u90e8\u70b9": 40, "\u8303\u56f4\u5916\u90e8\u70b9": 40, "\u8bbf\u95ee\u5168\u90e8\u70b9": 40, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 40, "\u8bbf\u95ee\u8fb9": 40, "\u8bbf\u95ee\u51fa\u8fb9": 40, "\u8bbf\u95ee\u5165\u8fb9": 40, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 40, "ask": 41, "question": 41, "gle": [42, 59, 307, 310], "workload": [43, 69, 70, 71, 73, 298], "interact": [43, 47, 52, 67, 70, 74, 152, 310], "queri": [43, 49, 51, 56, 66, 67, 140, 152, 302], "learn": [43, 47, 59, 60, 61, 65, 66, 67, 71, 73, 137, 145, 153, 310], "data": [44, 48, 51, 138, 145, 148, 149, 300, 302], "scientist": 44, "challeng": [44, 69, 71], "handl": [44, 73], "solut": 44, "machin": [44, 65], "pydata": 44, "ecosystem": [44, 55], "schema": 45, "advanc": 45, "tip": 45, "reduc": 45, "memori": [45, 303], "consumpt": 45, "One": [47, 67, 295], "stop": [47, 67], "larg": [47, 69, 71], "scale": [47, 305], "system": [47, 73, 148, 150], "alibaba": [47, 138], "troubleshoot": [47, 302], "util": [47, 309], "refer": [47, 76, 80, 82, 294, 301], "indic": 47, "standalon": 48, "gie": [48, 49, 50, 51, 68, 310], "servic": [48, 50], "process": [49, 65, 67, 73, 137, 302], "manual": 50, "gremlin": [51, 54, 55, 56, 58, 70, 133, 320], "usag": 51, "differ": [51, 295], "inner": 51, "id": [51, 54, 56, 301], "properti": [51, 54, 55, 56, 301, 322], "expand": [51, 54, 233, 234, 235, 288], "filter": [51, 54, 56], "like": 51, "sql": 51, "group": [51, 54, 56], "multipl": [51, 56], "valu": [51, 54, 56], "appropri": 51, "index": 51, "standard": [54, 300], "v": 54, "e": 54, "out": [54, 56, 149], "inE": [54, 56], "both": [54, 56], "outv": [54, 56], "inv": [54, 56], "otherv": [54, 56], "bothv": [54, 56], "hasid": [54, 56], "haslabel": 54, "ha": 54, "hasnot": 54, "where": [54, 56], "travers": [54, 56, 58, 62, 70, 142], "predic": 54, "dedup": [54, 56], "project": [54, 56, 81], "constant": [54, 56], "valuemap": [54, 56], "select": [54, 56], "count": 54, "fold": [54, 56], "sum": [54, 56], "min": [54, 56], "max": [54, 56], "mean": [54, 56], "groupcount": [54, 56], "order": [54, 56, 301], "statist": 54, "limit": [54, 56, 72, 302], "coin": 54, "union": 54, "match": [54, 56, 70], "syntact": [54, 56], "sugar": [54, 56], "pathexpand": 54, "endv": 54, "To": 54, "ident": 54, "elementmap": 54, "unfold": 54, "Will": 54, "Not": 54, "repeat": 54, "sideeffect": 54, "apach": [55, 320], "tinkerpop": [55, 70, 320], "within": 55, "consol": [55, 320], "constraint": 55, "ldbc": 56, "retriev": [56, 301], "appli": [56, 71], "real": 56, "expans": 56, "mani": 56, "point": 56, "after": 56, "pattern": [56, 70], "relat": [56, 298], "syntax": 56, "complex": 56, "bi2": 56, "bi3": 56, "bi4": 56, "left": 56, "part": 56, "bi11": 56, "bi14": 56, "user": [57, 75, 138, 306, 307], "eas": 58, "interfac": [58, 147, 148, 301], "cypher": 58, "extens": 58, "gnn": [58, 64, 71, 149, 316], "train": [58, 64, 65, 71, 137], "infer": 58, "nativ": 58, "across": 58, "orchestr": 58, "paradigm": [59, 71], "egograph": 59, "base": 59, "pass": 59, "pipelin": 59, "docker": [60, 144, 314], "neighborhood": 62, "neg": [62, 146], "gsl": [62, 143], "classif": [64, 65], "neural": [64, 71], "network": [64, 71, 288], "egographsag": 65, "unifi": [66, 301], "platform": 66, "disaggreg": 66, "divers": 66, "bi": 66, "qp": 66, "task": 67, "quick": [67, 149], "glossari": 68, "gart": [68, 298], "grin": [68, 301], "graphar": [68, 300], "groot": [68, 302, 310], "gum": 68, "maxgraph": 68, "deprec": 68, "v6d": 68, "gaia": 68, "pegasu": 68, "can": [69, 71], "do": [69, 71], "typic": 71, "introduc": 72, "why": 72, "ar": 72, "case": 72, "posit": 73, "compar": 73, "databas": 73, "variou": 73, "type": [73, 79, 138, 289], "benchmark": 74, "result": [74, 295], "gpu": 74, "reproduc": 74, "fragment": 76, "appasset": 77, "javaapp": 77, "cython": 79, "flex": 80, "about": 81, "structur": [81, 155], "javadoc": 82, "declar": 84, "load_app": 85, "dag_util": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "add_column": 86, "add_labels_to_graph": 87, "arrow_to_dynam": 88, "bind_app": 89, "clear_edg": 90, "clear_graph": 91, "context_to_datafram": 92, "context_to_numpi": 93, "copy_graph": 94, "create_app": 95, "create_graph": 96, "create_graph_view": 97, "create_load": 98, "create_subgraph": 99, "create_unload_op": 100, "dynamic_to_arrow": 101, "fetch_gremlin_result": 102, "get_context_data": 103, "graph_to_datafram": 104, "graph_to_numpi": 105, "gremlin_queri": 106, "gremlin_to_subgraph": 107, "modify_edg": 108, "modify_vertic": 109, "output": 110, "project_arrow_property_graph": 111, "project_to_simpl": 112, "report_graph": 113, "run_app": 114, "to_data_sink": 115, "to_direct": [116, 185], "to_undirect": [117, 186], "to_vineyard_datafram": 118, "to_vineyard_tensor": 119, "unload_app": 120, "unload_context": 121, "unload_graph": 122, "__init__": 123, "as_op_def": 124, "eval": 125, "evalu": 126, "signatur": 128, "get_default_sess": 130, "get_opt": 131, "graphlearn": 132, "has_default_sess": 134, "set_opt": 136, "encod": [137, 145], "loss": 137, "weight": 138, "put": 138, "togeth": 138, "maxcomput": 138, "describ": 139, "topologi": 139, "stand": 139, "alon": 139, "mode": 139, "server": 139, "pip": 144, "tensorflow": 144, "git": 144, "compil": [144, 147], "new": 147, "clone": 147, "regist": [147, 148], "bytestreamaccessfil": 148, "structuredaccessfil": 148, "writablefil": 148, "scheme": 148, "gl": 149, "construct": 149, "loader": [151, 322], "self": 155, "loop": 155, "freez": [155, 167], "add_cycl": 156, "add_path": 157, "add_star": 158, "all_neighbor": 159, "common_neighbor": 160, "create_empty_copi": 161, "degree_histogram": 163, "densiti": 164, "induced_subgraph": 168, "info": 169, "is_direct": 170, "is_empti": 171, "is_frozen": 172, "is_negatively_weight": 173, "is_weight": 174, "nodes_with_selfloop": 177, "non_edg": 178, "non_neighbor": 179, "number_of_edg": 180, "number_of_nod": 181, "number_of_selfloop": 182, "selfloop_edg": 183, "gener": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "atla": [187, 188, 288], "graph_atla": 187, "graph_atlas_g": 188, "classic": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 288], "balanced_tre": 189, "barbell_graph": 190, "binomial_tre": 191, "circulant_graph": 192, "circular_ladder_graph": 193, "complete_graph": 194, "complete_multipartite_graph": 195, "cycle_graph": 196, "dorogovtsev_goltsev_mendes_graph": 197, "empty_graph": 198, "full_rary_tre": 199, "ladder_graph": 200, "lollipop_graph": 201, "null_graph": 202, "path_graph": 203, "star_graph": 204, "trivial_graph": 205, "turan_graph": 206, "wheel_graph": 207, "lfr_benchmark_graph": 208, "caveman_graph": 209, "connected_caveman_graph": 210, "gaussian_random_partition_graph": 211, "planted_partition_graph": 212, "random_partition_graph": 213, "relaxed_caveman_graph": 214, "ring_of_cliqu": 215, "stochastic_block_model": 216, "windmill_graph": 217, "degree_seq": [218, 219, 220, 221, 222, 223, 224], "configuration_model": 218, "degree_sequence_tre": 219, "directed_configuration_model": 220, "directed_havel_hakimi_graph": 221, "expected_degree_graph": 222, "havel_hakimi_graph": 223, "random_degree_sequence_graph": 224, "gn_graph": 225, "gnc_graph": 226, "gnr_graph": 227, "random_k_out_graph": 228, "scale_free_graph": 229, "duplic": [230, 231, 288], "duplication_divergence_graph": 230, "partial_duplication_graph": 231, "ego": [232, 288], "ego_graph": 232, "chordal_cycle_graph": 233, "margulis_gabber_galil_graph": 234, "paley_graph": 235, "geometr": [236, 237, 238, 239, 240, 288], "geographical_threshold_graph": 236, "random_geometric_graph": 237, "soft_random_geometric_graph": 238, "thresholded_random_geometric_graph": 239, "waxman_graph": 240, "harary_graph": [241, 242], "hkn_harary_graph": 241, "hnm_harary_graph": 242, "intersect": [243, 244, 245, 288], "general_random_intersection_graph": 243, "k_random_intersection_graph": 244, "uniform_random_intersection_graph": 245, "joint_degree_seq": [246, 247, 248, 249], "directed_joint_degree_graph": 246, "is_valid_directed_joint_degre": 247, "is_valid_joint_degre": 248, "joint_degree_graph": 249, "mycielski": [250, 251, 288], "mycielski_graph": 250, "mycielskian": 251, "nonisomorphic_tre": [252, 253], "number_of_nonisomorphic_tre": 253, "small": [254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 288], "lcf_graph": 254, "bull_graph": 255, "chvatal_graph": 256, "cubical_graph": 257, "desargues_graph": 258, "diamond_graph": 259, "dodecahedral_graph": 260, "frucht_graph": 261, "heawood_graph": 262, "house_graph": 263, "house_x_graph": 264, "icosahedral_graph": 265, "krackhardt_kite_graph": 266, "make_small_graph": 267, "moebius_kantor_graph": 268, "octahedral_graph": 269, "pappus_graph": 270, "petersen_graph": 271, "sedgewick_maze_graph": 272, "tetrahedral_graph": 273, "truncated_cube_graph": 274, "truncated_tetrahedron_graph": 275, "tutte_graph": 276, "social": [277, 278, 279, 280, 288], "davis_southern_women_graph": 277, "florentine_families_graph": 278, "karate_club_graph": 279, "les_miserables_graph": 280, "spectral_graph_forg": 281, "sudoku": [282, 288], "sudoku_graph": 282, "tree": [283, 284, 288], "prefix_tre": 283, "random_tre": 284, "triad": [285, 288], "triad_graph": 285, "internet_as_graph": 286, "random_internet_as_graph": 286, "stochast": [287, 288], "stochastic_graph": 287, "diverg": 288, "sequenc": 288, "AS": 288, "spectral": 288, "non": 288, "isomorph": 288, "joint": 288, "harari": 288, "digraph": 289, "read": 291, "list": [291, 301], "adjac": 291, "selector": 295, "tensorcontext": 295, "vertexdatacontext": 295, "labeledvertexdatacontext": 295, "vertexpropertycontext": 295, "labeledvertexpropertycontext": 295, "method": 295, "dimension": 295, "rang": 295, "resourc": 297, "estim": 297, "bridg": 298, "gap": 298, "oltp": 298, "log": [298, 302, 310], "inform": 300, "archiv": 300, "predefin": 301, "macro": 301, "partit": [301, 302, 305], "strategi": 301, "guidelin": 301, "For": 301, "detail": 301, "handler": 301, "arrai": 301, "iter": 301, "master": 301, "mirror": 301, "complet": 301, "natur": 301, "trait": 301, "known": 302, "artifacthub": 302, "directori": 302, "common": 302, "modifi": 302, "j": 302, "import": 302, "restart": 302, "destroi": 302, "view": 302, "In": 303, "immut": 303, "bind": 304, "repartit": 305, "fennel": 305, "xtrapulp": 305, "hybrid": 305, "error": 308, "line": 309, "find": 310, "monitor": 311, "\u56fe\u5206\u6790\u5f15\u64ce": 312, "\u5185\u7f6e\u7b97\u6cd5": 312, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 312, "\u4f7f\u7528": 312, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 312, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 312, "\u4e2d\u7684\u51fd\u6570": 312, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 312, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 312, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 312, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 312, "\u90e8\u7f72": 313, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 313, "\u5728aw": 313, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 313, "\u672c\u5730\u90e8\u7f72graphscop": 313, "\u5f00\u53d1\u8005\u6307\u5357": 314, "\u57fa\u4e8e": [314, 319], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 314, "\u6784\u5efa": 314, "\u4ee3\u7801\u98ce\u683c": 314, "\u5e38\u89c1\u95ee\u9898": 315, "\u5feb\u901f\u4e0a\u624b": 316, "\u793a\u4f8b": 316, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 316, "\u521b\u5efa\u4f1a\u8bdd": 316, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 316, "\u56fe\u5206\u6790": 316, "\u56fe\u795e\u7ecf\u7f51\u7edc": 316, "\u5173\u95ed\u4f1a\u8bdd": 316, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 317, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 317, "\u6295\u5f71": 317, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 317, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 317, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 318, "\u76ee\u5f55": [318, 323], "\u53c2\u8003": 318, "\u7d22\u5f15": 318, "\u5b89\u88c5": 319, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 319, "\u5ba2\u6237\u7aef": 319, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 320, "\u5229\u7528python": 320, "\u8fde\u63a5graphscop": 320, "\u5229\u7528java": 320, "\u5f00\u53d1\u63a7\u5236\u53f0": 320, "gremlin\u7f16\u7a0b\u5165\u95e8": 320, "101": 320, "\u56fe\u6570\u636e\u6a21\u578b": 320, "\u67e5\u8be2\u8bed\u8a00": 320, "\u4e00\u4e2a\u4f8b\u5b50": 320, "gremlin\u517c\u5bb9\u6027": 320, "\u5bf9\u6bd4tinkerpop": 320, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 320, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 320, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 320, "\u5df2\u77e5\u9650\u5236": 320, "\u56fe\u5b66\u4e60\u5f15\u64ce": 321, "\u56fe\u5b66\u4e60\u6a21\u578b": 321, "\u6570\u636e\u6a21\u578b": 321, "\u7f16\u7801\u5668": 321, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 321, "\u91c7\u6837": 321, "\u56fe\u6570\u636e\u6d41": 321, "\u6a21\u578b": 321, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 321, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 322, "\u624b\u52a8\u914d\u7f6e\u56fe": 322, "vid_field": 322, "src_label": 322, "dst_label": 322, "src_field": 322, "dst_field": 322, "\u9ad8\u7ea7\u7528\u6cd5": 322, "\u6ca1\u6709\u6b67\u4e49\u65f6": 322, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 322, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 322, "\u591a\u79cd\u8fb9\u5173\u7cfb": 322, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 322, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 322, "\u5b8c\u6574\u7684\u793a\u4f8b": 322, "\u4ece": 322, "panda": 322, "\u6216": 322, "numpi": 322, "\u4e2d\u8f7d\u56fe": 322, "\u7684\u53d8\u79cd": 322, "\u5165\u95e8\u6559\u7a0b": 323}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [28, "prerequisites"], [29, "prerequisites"], [31, "prerequisites"], [32, "prerequisites"], [48, "prerequisites"], [302, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [50, "dev-and-test"], [60, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [66, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [47, null], [145, "overview"], [302, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [52, "getting-started"], [61, "getting-started"], [67, "getting-started"], [299, "getting-started"]], "Installation": [[7, "installation"], [28, "installation"], [52, "installation"], [61, "installation"], [302, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [52, "whats-the-next"], [61, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [53, "guide-and-examples"], [63, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with Github Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with Github Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetowrkX APIs": [[19, "tutorial-graph-algorithms-with-netowrkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetowrkX APIs": [[20, "tutorial-graph-operations-with-netowrkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [36, "slack"]], "Discussion on Github": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [29, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [29, "prepare-a-kubernetes-cluster"], [39, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope with helm": [[28, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[28, "connect-to-graphscope"]], "Uninstall the release": [[28, "uninstall-the-release"]], "Configuration": [[28, "configuration"]], "Offline Installation": [[28, "offline-installation"]], "Depoly with Existing Vineyard Cluster": [[29, "depoly-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[29, "deploy-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[29, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[29, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[29, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[29, "cleaning-up"]], "Install GraphScope in offline environment": [[30, "install-graphscope-in-offline-environment"]], "Install from wheels": [[30, "install-from-wheels"]], "Install from source": [[30, "install-from-source"], [31, "install-from-source"]], "Download dependencies and GraphScope": [[30, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[30, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[30, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[30, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[31, "install-graphscope-on-local"]], "Install from packages": [[31, "install-from-packages"]], "Install stable version of GraphScope": [[31, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[31, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[31, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[31, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[31, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[32, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[32, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[32, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[32, "retore-graphs-from-the-pvc"]], "Clean up": [[32, "clean-up"]], "Design of GAE": [[33, "design-of-gae"]], "Graph Storage": [[33, "graph-storage"]], "Execution Framework": [[33, "execution-framework"]], "Flexible programming models": [[33, "flexible-programming-models"]], "Multi-language SDKs": [[33, "multi-language-sdks"]], "High-performance runtime": [[33, "high-performance-runtime"]], "Algorithm Library": [[33, "algorithm-library"]], "Code Style Guide": [[34, "code-style-guide"]], "C++ Style": [[34, "c-style"]], "Python Style": [[34, "python-style"]], "Rust Style": [[34, "rust-style"]], "Java Style": [[34, "java-style"]], "Script Style": [[34, "script-style"]], "Style Linter and Checker": [[34, "style-linter-and-checker"]], "Development Guide": [[35, "development-guide"]], "Dev Environment": [[35, "dev-environment"], [39, "dev-environment"], [50, "dev-environment"], [60, "dev-environment"]], "Develop with dev containers.": [[35, "develop-with-dev-containers"]], "Install deps on local": [[35, "install-deps-on-local"], [60, "install-deps-on-local"]], "Build All Targets for GraphScope": [[35, "build-all-targets-for-graphscope"], [39, "build-all-targets-for-graphscope"]], "Build Components Individually": [[35, "build-components-individually"]], "Build and Test Engines": [[35, "build-and-test-engines"]], "Build Coordinator": [[35, "build-coordinator"]], "Build Python Client": [[35, "build-python-client"]], "How to Contribute": [[36, "how-to-contribute"]], "Code of Conduct": [[36, "code-of-conduct"]], "Community": [[36, "community"], [288, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[36, "github-discussion"]], "Reporting Bugs": [[36, "reporting-bugs"]], "Requesting Features": [[36, "requesting-features"]], "Improving Documentation": [[36, "improving-documentation"]], "Contributing Code and Documentation Changes": [[36, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[36, "install-pre-commit"]], "Minor Fixes": [[36, "minor-fixes"]], "Fork and Create a Branch": [[36, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[36, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[36, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[36, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[36, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[36, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[36, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[36, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[36, "how-to-review-pull-requests"]], "Continuous integration testing": [[36, "continuous-integration-testing"]], "Debugging on local deployment": [[37, "debugging-on-local-deployment"]], "Debugging on Kubernetes deployment": [[37, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[37, "commands-for-debugging"]], "Debugging Techniques": [[37, "debugging-techniques"]], "How to Submit Pull-requests": [[38, "how-to-submit-pull-requests"]], "How to Test": [[39, "how-to-test"], [60, "how-to-test"]], "Test GraphScope on local": [[39, "test-graphscope-on-local"]], "Run tests": [[39, "run-tests"], [39, "id1"]], "Test GraphScope on Kubernetes cluster": [[39, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[39, "build-images"]], "Introduction to ArrowFragment": [[40, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[40, "id1"]], "1. \u8f7d\u56fe": [[40, "id2"]], "1.1 \u521d\u59cb\u5316partitoner": [[40, "partitoner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[40, "arrow-table"]], "1.3. Shuffle vtable": [[40, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[40, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[40, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[40, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[40, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[40, "id3"]], "2. \u8bbf\u95eeFragment": [[40, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[40, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[40, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[40, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[40, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[40, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[40, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[40, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[40, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[40, "id13"]], "Frequently Asked Questions": [[41, "frequently-asked-questions"]], "Getting Started for GLE": [[42, "getting-started-for-gle"]], "Graph Workloads": [[43, "graph-workloads"]], "Graph Analytics": [[43, "graph-analytics"]], "Graph Interactive Query": [[43, "graph-interactive-query"]], "Graph Learning": [[43, "graph-learning"], [153, "graph-learning"]], "GraphScope for Data Scientists": [[44, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[44, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[44, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[44, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[44, "integration-with-pydata-ecosystem"]], "How to Load Graphs": [[45, "how-to-load-graphs"]], "Define Graph Schema": [[45, "define-graph-schema"]], "Load Graphs": [[45, "load-graphs"]], "Advanced Topics": [[45, "advanced-topics"]], "Tips for reduce memory consumption of graphs": [[45, "tips-for-reduce-memory-consumption-of-graphs"]], "How to Report Bugs": [[46, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[47, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[47, null]], "Graph Analytical Engine": [[47, null], [74, "graph-analytical-engine"]], "Graph Interactive Engine": [[47, null], [74, "graph-interactive-engine"]], "Graph Learning Engine": [[47, null]], "Storage Engine": [[47, null]], "Troubleshooting & Utilities": [[47, null]], "Development": [[47, null]], "Reference": [[47, null], [301, "reference"]], "Indices and tables": [[47, "indices-and-tables"]], "Standalone Deployment for GIE": [[48, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[48, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[48, "remove-the-gie-service"]], "Using Your Own Data": [[48, "using-your-own-data"]], "Deploy on a Cluster": [[48, "deploy-on-a-cluster"]], "Other Useful Configurations": [[48, "other-useful-configurations"]], "Design of GIE": [[49, "design-of-gie"]], "The Motivations": [[49, "the-motivations"]], "The Architecture": [[49, "the-architecture"]], "Query Processing": [[49, "query-processing"]], "Build GIE with Vineyard Store on Local": [[50, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[50, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[50, "manually-start-the-gie-services"]], "FAQs for GIE Gremlin Usage": [[51, "faqs-for-gie-gremlin-usage"]], "What\u2019s the difference between Inner ID and Property ID ?": [[51, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[51, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[51, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[51, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[51, "group-by-multiple-keys"]], "group by multiple values:": [[51, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[51, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[51, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[51, "how-to-use-subgraph-in-gie-gremlin"]], "Running GraphScope Interactive Engine on Local": [[52, "running-graphscope-interactive-engine-on-local"]], "Supported Gremlin Steps": [[54, "supported-gremlin-steps"]], "Introduction": [[54, "introduction"]], "Standard Steps": [[54, "standard-steps"]], "Source": [[54, "source"]], "V()": [[54, "v"]], "E()": [[54, "e"]], "Expand": [[54, "expand"]], "outE()": [[54, "oute"]], "inE()": [[54, "ine"]], "bothE()": [[54, "bothe"]], "out()": [[54, "out"], [54, "id5"]], "in()": [[54, "in"], [54, "id6"]], "both()": [[54, "both"], [54, "id7"]], "outV()": [[54, "outv"]], "inV()": [[54, "inv"]], "otherV()": [[54, "otherv"]], "bothV()": [[54, "bothv"]], "Filter": [[54, "filter"]], "hasId()": [[54, "hasid"], [56, "hasid"]], "hasLabel()": [[54, "haslabel"]], "has()": [[54, "has"]], "hasNot()": [[54, "hasnot"]], "is()": [[54, "is"]], "where(traversal)": [[54, "where-traversal"]], "where(predicate)": [[54, "where-predicate"]], "not(traversal)": [[54, "not-traversal"]], "dedup()": [[54, "dedup"], [56, "dedup"]], "Project": [[54, "project"]], "id()": [[54, "id"]], "label()": [[54, "label"]], "constant()": [[54, "constant"], [56, "constant"]], "valueMap()": [[54, "valuemap"], [56, "valuemap"]], "values()": [[54, "values"]], "select()": [[54, "select"], [56, "select"]], "Aggregate": [[54, "aggregate"]], "count()": [[54, "count"]], "fold()": [[54, "fold"], [56, "fold"]], "sum()": [[54, "sum"]], "min()": [[54, "min"]], "max()": [[54, "max"]], "mean()": [[54, "mean"]], "group()": [[54, "group"], [56, "group"]], "groupCount()": [[54, "groupcount"], [56, "groupcount"]], "Order": [[54, "order"], [301, "order"]], "order()": [[54, "id1"]], "Statistics": [[54, "statistics"]], "limit()": [[54, "limit"]], "coin()": [[54, "coin"]], "Union": [[54, "union"]], "union()": [[54, "id2"]], "Match": [[54, "match"]], "match()": [[54, "id3"]], "Subgraph": [[54, "subgraph"]], "subgraph()": [[54, "id4"]], "Syntactic Sugars": [[54, "syntactic-sugars"]], "PathExpand": [[54, "pathexpand"]], "endV()": [[54, "endv"]], "Expression": [[54, "expression"]], "Aggregate (Group)": [[54, "aggregate-group"]], "Limitations": [[54, "limitations"]], "To be Supported": [[54, "to-be-supported"]], "identity()": [[54, "identity"]], "elementMap()": [[54, "elementmap"]], "path()": [[54, "path"]], "unfold()": [[54, "unfold"]], "local()": [[54, "local"]], "Will Not be Supported": [[54, "will-not-be-supported"]], "repeat()": [[54, "repeat"]], "properties()": [[54, "properties"]], "sideEffect": [[54, "sideeffect"]], "branch": [[54, "branch"]], "Apache TinkerPop Ecosystem": [[55, "apache-tinkerpop-ecosystem"]], "Connecting Gremlin within Python": [[55, "connecting-gremlin-within-python"]], "Connecting Gremlin within Java": [[55, "connecting-gremlin-within-java"]], "Gremlin Console": [[55, "gremlin-console"]], "Compatibility with TinkerPop": [[55, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[55, "property-graph-constraints"]], "Tutorial: LDBC Gremlin": [[56, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[56, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[56, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[56, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[56, "apply-some-filters"]], "Extract Property Values": [[56, "extract-property-values"]], "Real Applications": [[56, "real-applications"], [56, "id1"]], "Basic Traversal Query": [[56, "basic-traversal-query"]], "Expansion": [[56, "expansion"]], "out(), in() and both()": [[56, "out-in-and-both"]], "outE(), inE() and bothE()": [[56, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[56, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[56, "multiple-expansion-steps"]], "Expansion from many starting points": [[56, "expansion-from-many-starting-points"]], "Filter & Expansion": [[56, "filter-expansion"]], "Apply filters after expansion": [[56, "apply-filters-after-expansion"]], "Expansion as filters": [[56, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[56, "path-expansion-syntactic-sugar"]], "Pattern Match": [[56, "pattern-match"]], "Relational Operations": [[56, "relational-operations"]], "Filter Steps": [[56, "filter-steps"]], "where()": [[56, "where"]], "Project Steps": [[56, "project-steps"]], "id() and label()": [[56, "id-and-label"]], "Aggregate Steps": [[56, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[56, "sum-min-max-and-mean"]], "Order Step": [[56, "order-step"]], "Limit Step": [[56, "limit-step"]], "Expression(Syntax Sugar)": [[56, "expression-syntax-sugar"]], "Complex Queries": [[56, "complex-queries"]], "LDBC BI2": [[56, "ldbc-bi2"]], "LDBC BI3": [[56, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[56, "ldbc-bi4-left-part"]], "LDBC BI11": [[56, "ldbc-bi11"]], "LDBC BI14": [[56, "ldbc-bi14"]], "Tutorials for Java Users": [[57, "tutorials-for-java-users"]], "Key Features": [[58, "key-features"]], "Ease-of-use: Python Interface": [[58, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[58, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[58, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[58, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[58, "gnn-training-inference"]], "Cloud Native Design": [[58, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[58, "across-engine-workflow-orchestration"]], "Design of GLE": [[59, "design-of-gle"]], "Model Paradigms": [[59, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[59, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[59, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[59, "pipeline-for-learning"]], "Dev on docker container": [[60, "dev-on-docker-container"]], "Build Learning Engine": [[60, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[61, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[62, "graph-sampling"], [141, "graph-sampling"]], "Graph Traversal": [[62, "graph-traversal"], [70, "graph-traversal"], [142, "graph-traversal"]], "Neighborhood Sampling": [[62, "neighborhood-sampling"]], "Subgraph Sampling": [[62, "subgraph-sampling"], [71, "subgraph-sampling"]], "Negative Sampling": [[62, "negative-sampling"], [146, "negative-sampling"]], "GSL": [[62, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[64, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[64, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[64, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[65, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[65, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[65, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[65, "launch-the-learning-engine"]], "Train the Model": [[65, "train-the-model"]], "Design of GraphScope": [[66, "design-of-graphscope"]], "Unified Graph Computing Platform": [[66, "unified-graph-computing-platform"]], "Application layer": [[66, "application-layer"]], "Execution engine layer": [[66, "execution-engine-layer"]], "Storage layer": [[66, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[66, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[66, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[66, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[66, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[66, "graphscope-for-learning"]], "One-stop Graph Processing": [[67, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[67, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[67, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[67, "graph-learning-quick-start"]], "Glossary": [[68, "glossary"]], "FLASH": [[68, "flash"]], "GRAPE": [[68, "grape"]], "GAE": [[68, "gae"]], "GART": [[68, "gart"]], "GRIN": [[68, "grin"]], "GraphAr": [[68, "graphar"]], "Groot": [[68, "groot"]], "GUM": [[68, "gum"]], "MaxGraph (deprecated)": [[68, "maxgraph-deprecated"]], "Vineyard, or v6d": [[68, "vineyard-or-v6d"]], "GIE": [[68, "gie"]], "GAIA": [[68, "gaia"]], "Pegasus": [[68, "pegasus"]], "Ingress": [[68, "ingress"]], "PIE-model": [[68, "pie-model"]], "Graph Analytics Workloads": [[69, "graph-analytics-workloads"]], "What is Graph Analytics": [[69, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[69, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[69, "what-can-graphscope-do"], [71, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[70, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[70, "tinkerpop-and-gremlin"]], "Pattern Matching": [[70, "pattern-matching"]], "Graph Learning Workloads": [[71, "graph-learning-workloads"]], "What is Graph Neural Network": [[71, "what-is-graph-neural-network"]], "Typical GNN Models": [[71, "typical-gnn-models"]], "Paradigm of Model Training": [[71, "paradigm-of-model-training"]], "Steps of Model Training": [[71, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[71, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[72, "introducing-graphscope"]], "What is GraphScope": [[72, "what-is-graphscope"]], "Why use GraphScope": [[72, "why-use-graphscope"]], "What are the Use Cases": [[72, "what-are-the-use-cases"]], "What are the Limitations": [[72, "what-are-the-limitations"]], "What are the Next": [[72, "what-are-the-next"]], "Positioning of GraphScope": [[73, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[73, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[73, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[73, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[73, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[74, "performance-and-benchmark"]], "Results": [[74, "results"]], "Performance on GPUs": [[74, "performance-on-gpus"]], "Reproducing the results": [[74, "reproducing-the-results"]], "Tutorials for Python Users": [[75, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[76, "analytical-engine-api-reference"]], "Analytical Engine": [[76, "analytical-engine"]], "Fragments in GraphScope": [[76, "fragments-in-graphscope"]], "Analytical Apps": [[76, "analytical-apps"]], "Analytical Workers": [[76, "analytical-workers"]], "App\u2019s Context": [[76, "app-s-context"]], "Analytical App": [[77, "analytical-app"]], "AppAssets": [[77, "appassets"]], "JavaApp": [[77, "javaapp"]], "App object": [[77, "app-object"]], "Functions": [[77, "functions"], [79, "functions"], [155, "functions"]], "BuiltIn apps": [[77, "builtin-apps"]], "Context": [[78, "context"]], "Context object": [[78, "context-object"]], "Cython SDK API": [[79, "cython-sdk-api"]], "Pregel": [[79, "pregel"]], "PIE": [[79, "pie"]], "GraphScope types": [[79, "graphscope-types"]], "Flex API Reference": [[80, "flex-api-reference"]], "About Grape JDK": [[81, "about-grape-jdk"]], "Project Structure": [[81, "project-structure"]], "Building from source": [[81, "building-from-source"]], "Java Reference (javadoc)": [[82, "java-reference-javadoc"]], "graphscope.Vertex": [[83, "graphscope-vertex"]], "graphscope.declare": [[84, "graphscope-declare"]], "graphscope.framework.app.load_app": [[85, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[86, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[87, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[88, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[89, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[90, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[91, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[92, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[93, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[94, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[95, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[96, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[97, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[98, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[99, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[100, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[101, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.fetch_gremlin_result": [[102, "graphscope-framework-dag-utils-fetch-gremlin-result"]], "graphscope.framework.dag_utils.get_context_data": [[103, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[104, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[105, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_query": [[106, "graphscope-framework-dag-utils-gremlin-query"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[107, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[108, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[109, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[110, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[111, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[112, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[113, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[114, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[115, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[116, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[117, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[118, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[119, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[120, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[121, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[122, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[123, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[124, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[125, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[126, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[127, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[128, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[129, "graphscope-g"]], "graphscope.get_default_session": [[130, "graphscope-get-default-session"]], "graphscope.get_option": [[131, "graphscope-get-option"]], "graphscope.graphlearn": [[132, "graphscope-graphlearn"]], "graphscope.gremlin": [[133, "graphscope-gremlin"]], "graphscope.has_default_session": [[134, "graphscope-has-default-session"]], "graphscope.session": [[135, "graphscope-session"]], "graphscope.set_option": [[136, "graphscope-set-option"]], "Developing Your Own Model": [[137, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[137, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[137, "sampling"]], "Encoder": [[137, "encoder"], [145, "encoder"]], "Loss Function and Training Process": [[137, "loss-function-and-training-process"]], "Data Source": [[138, "data-source"]], "1 Data format": [[138, "data-format"]], "1.1 Basic format": [[138, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[138, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[138, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[138, "label-format-labeled"]], "1.5 Putting together": [[138, "putting-together"]], "2 Data source type": [[138, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[138, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[138, "user-api"]], "Graph Object": [[139, "graph-object"]], "2 Describe the Topology": [[139, "describe-the-topology"]], "3.1 Stand-alone Mode": [[139, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[139, "distributed-mode-client-server-mode"]], "Graph Query": [[140, "graph-query"]], "1 Introduction": [[141, "introduction"]], "Graph Sampling Language\uff08GSL)": [[143, "graph-sampling-language-gsl"]], "Install from pip": [[144, "install-from-pip"]], "Get wheel package": [[144, "get-wheel-package"]], "Install using pip": [[144, "install-using-pip"]], "Install TensorFlow": [[144, "install-tensorflow"]], "Build from source": [[144, "build-from-source"]], "Install git": [[144, "install-git"]], "Install dependent libraries": [[144, "install-dependent-libraries"]], "Compile": [[144, "compile"], [147, "compile"]], "Install": [[144, "install"]], "Run test": [[144, "run-test"]], "Docker image": [[144, "docker-image"]], "Graph Learning Model": [[145, "graph-learning-model"]], "Data model": [[145, "data-model"]], "Defining Your Own Operator": [[147, "defining-your-own-operator"]], "Programming Interface": [[147, "programming-interface"]], "Distributed Runtime Design": [[147, "distributed-runtime-design"]], "Implement a New Operator": [[147, "implement-a-new-operator"]], "Clone source code": [[147, "clone-source-code"]], "Implement your operator class": [[147, "implement-your-operator-class"]], "Register Operator": [[147, "register-operator"]], "How to Use an Operator": [[147, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[148, "integrating-other-data-sources"]], "File System Interface": [[148, "file-system-interface"]], "ByteStreamAccessFile": [[148, "bytestreamaccessfile"]], "StructuredAccessFile": [[148, "structuredaccessfile"]], "WritableFile": [[148, "writablefile"]], "Register with Scheme": [[148, "register-with-scheme"]], "Quick Start": [[149, "quick-start"]], "1 Trying out the built-in models": [[149, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[149, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[149, "developing-a-gnn-model"]], "3.1 Data Preparation": [[149, "data-preparation"]], "3.2 Graph Construction": [[149, "graph-construction"]], "3.3 Graph Sampling": [[149, "graph-sampling"]], "3.4 GNN Model": [[149, "gnn-model"]], "System configuration": [[150, "system-configuration"]], "Graph": [[151, "graph"], [155, "graph"], [289, "graph"]], "Graph object": [[151, "graph-object"]], "Loader object": [[151, "loader-object"]], "Graph Functions": [[151, "graph-functions"]], "Interactive Query": [[152, "interactive-query"]], "Builtin algorithms": [[154, "builtin-algorithms"]], "Nodes": [[155, "nodes"]], "Edges": [[155, "edges"]], "Self loops": [[155, "self-loops"]], "Attributes": [[155, "attributes"]], "Freezing graph structure": [[155, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[156, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[157, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[158, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[159, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[160, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[161, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[162, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[163, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[164, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[165, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[166, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[167, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[168, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[169, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[170, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[171, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[172, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[173, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[174, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[175, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[176, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[177, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[178, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[179, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[180, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[181, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[182, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[183, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[184, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[185, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[186, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[187, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[188, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[189, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[190, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[191, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[192, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[193, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[194, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[195, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[196, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[197, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[198, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[199, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[200, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[201, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[202, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[203, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[204, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[205, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[206, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[207, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[208, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[209, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[210, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[211, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[212, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[213, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[214, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[215, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[216, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[217, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[218, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[219, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[220, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[221, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[222, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[223, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[224, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[225, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[226, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[227, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[228, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[229, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[230, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[231, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[232, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[233, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[234, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[235, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[236, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[237, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[238, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[239, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[240, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[241, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[242, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[243, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[244, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[245, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[246, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[247, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[248, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[249, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[250, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[251, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[252, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[253, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[254, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[255, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[256, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[257, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[258, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[259, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[260, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[261, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[262, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[263, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[264, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[265, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[266, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[267, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[268, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[269, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[270, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[271, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[272, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[273, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[274, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[275, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[276, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[277, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[278, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[279, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[280, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[281, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[282, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[283, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[284, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[285, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[286, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[287, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[288, "graph-generators"]], "Atlas": [[288, "module-graphscope.nx.generators.atlas"]], "Classic": [[288, "module-graphscope.nx.generators.classic"]], "Expanders": [[288, "module-graphscope.nx.generators.expanders"]], "Small": [[288, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[288, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[288, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[288, "module-graphscope.nx.generators.directed"]], "Geometric": [[288, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[288, "module-graphscope.nx.generators.ego"]], "Stochastic": [[288, "module-networkx.generators.stochastic"]], "AS graph": [[288, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[288, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[288, "module-graphscope.nx.generators.social"]], "Spectral": [[288, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[288, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[288, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[288, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[288, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[288, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[288, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[288, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[289, "graph-types"]], "DiGraph": [[289, "digraph"]], "NetworkX-style API": [[290, "networkx-style-api"]], "Reading graphs": [[291, "reading-graphs"]], "Edge List": [[291, "edge-list"]], "Adjacency List": [[291, "adjacency-list"]], "Graph Transformation": [[292, "graph-transformation"]], "Operation": [[293, "operation"]], "Operation object": [[293, "operation-object"]], "BuiltIn operations": [[293, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[294, "python-api-reference"]], "Selector": [[295, "selector"]], "Selectors in different context": [[295, "selectors-in-different-context"]], "TensorContext": [[295, "tensorcontext"]], "VertexDataContext": [[295, "vertexdatacontext"]], "LabeledVertexDataContext": [[295, "labeledvertexdatacontext"]], "VertexPropertyContext": [[295, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[295, "labeledvertexpropertycontext"]], "Methods that use selectors": [[295, "methods-that-use-selectors"]], "One-dimensional results": [[295, "one-dimensional-results"]], "Multi-dimensional results": [[295, "multi-dimensional-results"]], "Vertex Range": [[295, "vertex-range"]], "Session": [[296, "session"]], "Session object": [[296, "session-object"]], "Session Functions": [[296, "session-functions"]], "Resources Estimator": [[297, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[298, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[298, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[298, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[298, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[298, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[300, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[300, "the-graphar-file-format"]], "Features": [[300, "features"]], "File Format": [[300, "file-format"]], "Information files": [[300, "information-files"]], "Data files": [[300, "data-files"]], "GraphAr in GraphScope": [[300, "graphar-in-graphscope"]], "Loading GraphAr Data into GraphScope": [[300, "loading-graphar-data-into-graphscope"]], "Archiving the Graph Data in GraphAr": [[300, "archiving-the-graph-data-in-graphar"]], "GRIN: Graph Retrieval INterface": [[301, "grin-graph-retrieval-interface"]], "Motivations": [[301, "motivations"]], "Unified Graph Retrieval": [[301, "unified-graph-retrieval"]], "GRIN Concepts": [[301, "grin-concepts"]], "Predefined Macros": [[301, "predefined-macros"]], "Partition Strategy": [[301, "partition-strategy"]], "Edge-cut Partition Strategy": [[301, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[301, "vertex-cut-partition-strategy"]], "Property Graph Model": [[301, "property-graph-model"]], "Implementation Guideline": [[301, "implementation-guideline"]], "For computing engine": [[301, "for-computing-engine"]], "For storage engine": [[301, "for-storage-engine"]], "Design Details": [[301, "design-details"]], "Handler": [[301, "handler"]], "Edge": [[301, "edge"]], "List": [[301, "list"]], "Array-style Retrieval": [[301, "array-style-retrieval"]], "List Iterator": [[301, "list-iterator"]], "Property": [[301, "property"]], "Label": [[301, "label"], [322, "label"]], "Master and Mirror": [[301, "master-and-mirror"]], "Local Complete": [[301, "local-complete"]], "Natural ID Trait": [[301, "natural-id-trait"]], "Groot: Persistent Graph Store": [[302, "groot-persistent-graph-store"]], "Known Limitation": [[302, "known-limitation"]], "Deploy Groot": [[302, "deploy-groot"]], "Install from ArtifactHub": [[302, "install-from-artifacthub"]], "Installing from a local directory": [[302, "installing-from-a-local-directory"]], "Common Configurations": [[302, "common-configurations"]], "Connecting to Groot": [[302, "connecting-to-groot"]], "Connection": [[302, "connection"]], "Building and Modifying Graph Models": [[302, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[302, "using-built-in-datasets"]], "Customizing Models and Datasets": [[302, "customizing-models-and-datasets"]], "Querying Data": [[302, "querying-data"]], "Python": [[302, "python"]], "Java": [[302, "java"]], "Node.js": [[302, "node-js"]], "Data Import": [[302, "data-import"]], "Offline Import": [[302, "offline-import"]], "Prerequisite": [[302, "prerequisite"]], "Data Format": [[302, "data-format"]], "Loading Process": [[302, "loading-process"]], "Build: Building a partitioned graph": [[302, "build-building-a-partitioned-graph"]], "Uninstalling and Restarting": [[302, "uninstalling-and-restarting"]], "Uninstall Groot": [[302, "uninstall-groot"]], "Restart Groot": [[302, "restart-groot"]], "Destroy Groot": [[302, "destroy-groot"]], "Developing Guide": [[302, "developing-guide"]], "Build image": [[302, "build-image"]], "Persistence": [[302, "persistence"]], "Troubleshooting": [[302, "troubleshooting"]], "Viewing logs": [[302, "viewing-logs"]], "Configuring logs": [[302, "configuring-logs"]], "In-memory immutable graphs on Vineyard": [[303, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[303, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[303, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[303, "using-loaded-graphs"]], "Applications and algorithms": [[304, "applications-and-algorithms"]], "Bind application to graph": [[304, "bind-application-to-graph"]], "Built-in algorithms": [[304, "built-in-algorithms"]], "Scaling and repartitioning": [[305, "scaling-and-repartitioning"]], "Fennel": [[305, "fennel"]], "XtraPuLP": [[305, "xtrapulp"]], "Hybrid partitioning": [[305, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[306, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[306, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[306, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[306, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[307, "user-guide-and-examples-of-gle"]], "Error Codes": [[308, "error-codes"]], "Command-line Utility gs": [[309, "command-line-utility-gs"]], "How to Find logs": [[310, "how-to-find-logs"]], "Find logs in k8s": [[310, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[310, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[310, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[310, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[310, "find-logs-for-groot"]], "Monitoring": [[311, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[312, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[312, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[312, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[312, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[312, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[312, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[312, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[312, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[312, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[312, "id7"]], "\u90e8\u7f72": [[313, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[313, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[313, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[313, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[314, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[314, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[314, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[314, "python-wheels"]], "Linux": [[314, "linux"]], "macOS": [[314, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[314, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[315, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[316, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[316, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[316, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[316, "id6"]], "\u56fe\u5206\u6790": [[316, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[316, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[316, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[317, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[317, "id2"]], "\u6295\u5f71": [[317, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[317, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[317, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[318, "graphscope"]], "\u76ee\u5f55": [[318, null], [323, null]], "API \u53c2\u8003": [[318, null]], "\u7d22\u5f15": [[318, "id1"]], "\u5b89\u88c5": [[319, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[319, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[319, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[320, "id1"]], "Apache TinkerPop": [[320, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[320, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[320, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[320, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[320, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[320, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[320, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[320, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[320, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[320, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[320, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[320, "id13"]], "\u5df2\u77e5\u9650\u5236": [[320, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[321, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[321, "id2"]], "\u6570\u636e\u6a21\u578b": [[321, "id3"]], "\u7f16\u7801\u5668": [[321, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[321, "id5"]], "\u91c7\u6837": [[321, "id6"]], "\u56fe\u6570\u636e\u6d41": [[321, "id7"]], "\u6a21\u578b": [[321, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[321, "id9"]], "\u8f7d\u56fe": [[322, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[322, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[322, "id4"]], "Build Vertex": [[322, "build-vertex"]], "vertices": [[322, "vertices"]], "properties": [[322, "properties"], [322, "id7"]], "vid_field": [[322, "vid-field"]], "Build Edge": [[322, "build-edge"]], "edges": [[322, "edges"]], "label": [[322, "id6"]], "src_label and dst_label": [[322, "src-label-and-dst-label"]], "src_field and dst_field": [[322, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[322, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[322, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[322, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[322, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[322, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[322, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[322, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[322, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[322, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[322, "numpy"]], "Loader \u7684\u53d8\u79cd": [[322, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[323, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id0"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id1"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id2"]], "gs::appbase (c++ class)": [[76, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[76, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[76, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[76, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[76, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[76, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[76, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[76, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[76, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[76, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[76, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[76, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[76, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[76, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[76, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[76, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[76, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[76, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [76, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbb"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[76, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[76, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[76, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [76, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [76, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[76, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[76, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[76, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [76, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [76, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[76, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[76, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [76, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [76, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [76, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[76, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[76, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[76, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[76, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[76, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[76, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[76, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[76, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[76, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[76, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[76, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[76, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[76, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[76, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [76, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[76, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[76, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[76, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[76, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[76, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[76, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[76, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::ctxwrapperbuilder (c++ struct)": [[76, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[76, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[76, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[76, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[76, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[76, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[76, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[76, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[76, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[76, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[76, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[76, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[76, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[76, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[76, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[76, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[76, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[76, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[76, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[76, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[76, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[76, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[76, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[76, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[76, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[76, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[76, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[76, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[76, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[76, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[76, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[76, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [76, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[76, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[76, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[76, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[76, "_CPPv4N2gs14DispatchResult9graph_defEv"], [76, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[76, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[76, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[76, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [76, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[76, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[76, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[76, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[76, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[76, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[76, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[76, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[76, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[76, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[76, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[76, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[76, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[76, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[76, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[76, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[76, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[76, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[76, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[76, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[76, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[76, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[76, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[76, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[76, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[76, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [76, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[76, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[76, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[76, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[76, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[76, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[76, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[76, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[76, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[76, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [76, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[76, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[76, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[76, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[76, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[76, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[76, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[76, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[76, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[76, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[76, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[76, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[76, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[76, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[76, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[76, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[76, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[76, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[76, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[76, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[76, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[76, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[76, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[76, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[76, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[76, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[76, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[76, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[76, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[76, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[76, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[76, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[76, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[76, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[76, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[76, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[76, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[76, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[76, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[76, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[76, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[76, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[76, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[76, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[76, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[76, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [76, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[76, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[76, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[76, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[76, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[76, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[76, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[76, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[76, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[76, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[76, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[76, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[76, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[76, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[76, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[76, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[76, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[76, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[76, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[76, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[76, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[76, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[76, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[76, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[76, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[76, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[76, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[76, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[76, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[76, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [76, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[76, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [76, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[76, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[76, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[76, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[76, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[76, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[76, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[76, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[76, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[76, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[77, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[77, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[77, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[77, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[77, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[77, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[77, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[77, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[77, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[77, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[77, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[77, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[77, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[77, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[77, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[77, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[77, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[77, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[77, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[77, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[77, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[77, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[77, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[77, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[77, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[77, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[77, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[77, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[77, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[77, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[77, "graphscope.louvain"]], "lpa() (in module graphscope)": [[77, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[77, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[77, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[77, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[77, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[77, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[77, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[77, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[77, "graphscope.sssp"]], "triangles() (in module graphscope)": [[77, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[77, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[77, "graphscope.voterank"]], "wcc() (in module graphscope)": [[77, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[78, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[78, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[78, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[78, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[78, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[78, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[78, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[78, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[78, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[78, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[78, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[78, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[78, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[83, "graphscope.Vertex"]], "declare() (in module graphscope)": [[84, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[85, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[86, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[87, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[88, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[89, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[90, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[91, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[92, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[93, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[94, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[95, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[96, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[97, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[98, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[99, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[100, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[101, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "fetch_gremlin_result() (in module graphscope.framework.dag_utils)": [[102, "graphscope.framework.dag_utils.fetch_gremlin_result"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[103, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[104, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[105, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_query() (in module graphscope.framework.dag_utils)": [[106, "graphscope.framework.dag_utils.gremlin_query"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[107, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[108, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[109, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[110, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[111, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[112, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[113, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[114, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[115, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[116, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[117, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[118, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[119, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[120, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[121, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[122, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[123, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[124, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[125, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[126, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[127, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[128, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[129, "graphscope.g"]], "get_default_session() (in module graphscope)": [[130, "graphscope.get_default_session"]], "get_option() (in module graphscope)": [[131, "graphscope.get_option"]], "graphlearn() (in module graphscope)": [[132, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[133, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[134, "graphscope.has_default_session"]], "session (in module graphscope)": [[135, "graphscope.session"]], "set_option() (in module graphscope)": [[136, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[151, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[151, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[151, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[151, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[151, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[151, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[151, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[151, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "archive() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.archive"]], "detach() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[151, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[151, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[151, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graphdagnode method)": [[151, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[151, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[151, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[151, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[151, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[151, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[152, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[152, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[152, "graphscope.interactive.query.InteractiveQuery.close"]], "execute() (graphscope.interactive.query.interactivequery method)": [[152, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[152, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[152, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[152, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[152, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[152, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[152, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[152, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[153, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[153, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[153, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[153, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[153, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[154, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[155, "module-graphscope.nx.classes.function"]], "module": [[155, "module-graphscope.nx.classes.function"], [288, "module-graphscope.nx.generators.atlas"], [288, "module-graphscope.nx.generators.classic"], [288, "module-graphscope.nx.generators.community"], [288, "module-graphscope.nx.generators.degree_seq"], [288, "module-graphscope.nx.generators.directed"], [288, "module-graphscope.nx.generators.duplication"], [288, "module-graphscope.nx.generators.ego"], [288, "module-graphscope.nx.generators.expanders"], [288, "module-graphscope.nx.generators.geometric"], [288, "module-graphscope.nx.generators.harary_graph"], [288, "module-graphscope.nx.generators.intersection"], [288, "module-graphscope.nx.generators.joint_degree_seq"], [288, "module-graphscope.nx.generators.mycielski"], [288, "module-graphscope.nx.generators.nonisomorphic_trees"], [288, "module-graphscope.nx.generators.small"], [288, "module-graphscope.nx.generators.social"], [288, "module-graphscope.nx.generators.spectral_graph_forge"], [288, "module-graphscope.nx.generators.sudoku"], [288, "module-graphscope.nx.generators.trees"], [288, "module-graphscope.nx.generators.triads"], [288, "module-networkx.generators.internet_as_graphs"], [288, "module-networkx.generators.stochastic"], [293, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[156, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[157, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[158, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[159, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[160, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[161, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[162, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[163, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[164, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[165, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[166, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[167, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[168, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[169, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[170, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[171, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[172, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[173, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[174, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[175, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[176, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[177, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[178, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[179, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[180, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[181, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[182, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[183, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[184, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[185, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[186, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[187, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[188, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[189, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[190, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[191, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[192, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[193, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[194, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[195, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[196, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[197, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[198, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[199, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[200, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[201, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[202, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[203, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[204, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[205, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[206, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[207, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[208, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[209, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[210, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[211, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[212, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[213, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[214, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[215, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[216, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[217, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[218, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[219, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[220, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[221, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[222, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[223, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[224, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[225, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[226, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[227, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[228, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[229, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[230, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[231, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[232, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[233, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[234, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[235, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[236, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[237, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[238, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[239, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[240, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[241, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[242, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[243, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[244, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[245, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[246, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[247, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[248, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[249, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[250, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[251, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[252, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[253, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[254, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[255, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[256, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[257, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[258, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[259, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[260, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[261, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[262, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[263, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[264, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[265, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[266, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[267, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[268, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[269, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[270, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[271, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[272, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[273, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[274, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[275, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[276, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[277, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[278, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[279, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[280, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[281, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[282, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[283, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[284, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[285, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[286, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[287, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[288, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[288, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[288, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[288, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[288, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[288, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[288, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[288, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[288, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[288, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[288, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[288, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[288, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[288, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[288, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[288, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[288, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[288, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[288, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[288, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[288, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[288, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[289, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[289, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[289, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[289, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[289, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[289, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[289, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[289, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[289, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[289, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[289, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[289, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[289, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[289, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[289, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[289, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[289, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[289, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[289, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[289, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[291, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[291, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[292, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[292, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[293, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[293, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[296, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[296, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[296, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[296, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[296, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[296, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[296, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[296, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[296, "graphscope.Session.engine_config"]], "get_config() (graphscope.session method)": [[296, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[296, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[296, "graphscope.Session.graphlearn"]], "gremlin() (graphscope.session method)": [[296, "graphscope.Session.gremlin"]], "info (graphscope.session property)": [[296, "graphscope.Session.info"]], "learning() (graphscope.session method)": [[296, "graphscope.Session.learning"]], "load_from() (graphscope.session method)": [[296, "graphscope.Session.load_from"]], "load_from_gar() (graphscope.session method)": [[296, "graphscope.Session.load_from_gar"]], "restore_from_pvc() (graphscope.session method)": [[296, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[296, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[296, "graphscope.Session.store_to_pvc"]]}})